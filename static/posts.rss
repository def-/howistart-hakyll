<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>How I Start.</title>
    <link href="http://www.howistart.org/static/posts.rss" rel="self" />
    <link href="http://www.howistart.org" />
    <id>http://www.howistart.org/static/posts.rss</id>
    <author>
        <name>Tristan Sloughter</name>
        <email>contact@howistart.org</email>
    </author>
    <updated>2015-10-08T00:00:00Z</updated>
    <entry>
    <title>C++</title>
    <link href="http://www.howistart.org/posts/cpp/1/index.html" />
    <id>http://www.howistart.org/posts/cpp/1/index.html</id>
    <published>2015-10-08T00:00:00Z</published>
    <updated>2015-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      C++ <small>with Jeremy Ong</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <h2 id="introduction">Introduction</h2>
<p>C++ is one of the few languages that can incite as much debate as an editor holy war. However, it resolutely holds it’s position as a state-of-the-art lingua franca, losing in ubiquity only to it’s predecessor C. While it’s easy to bemoan the warts of the language, it’s important to understand that the modernization of C++ since the advent of C++11 (which continues through refinements introduced in C++14 and upcoming additions to C++17), has truly changed the game (ref. <a href="https://www.jetbrains.com/cpp-today-oreilly/books/Cplusplus_Today.pdf">The Beast is Back</a>).</p>
<p>Historically, C++ has not been kind to interested developers. The awkward mix of various Make build utilities, opaque compilation toolchains, obscure flags, and more provide both a immense configurability for nearly any platform and a absolute swamp of complexity.</p>
<p>My hope with this article is to provide you, the reader, with a decent foothold from which to begin. You might be writing shared libraries for mobile apps, high performance simulations, graphics engines for consoles, or even embedded code for a remote control car. Regardless, while I may not have time or space to delve into every nook and cranny now, you should feel comfortable using what you learn here as a starting point. It’s worth noting that this is not meant to be a language tutorial or language introduction even. Think of it more as a whirlwind tour of a workflow to making several different parts that interact with each other in a non-trivial fashion. For learning C++, I have a few references listed at the end. However, here’s a rough outline of what we <em>will</em> cover:</p>
<ul>
<li>The objective: What are we going to get by the end of this article?</li>
<li>The executable: How are C++ programs compiled and how do they run?</li>
<li>The build process: How do we set up our project for multiple platforms and configurations?</li>
<li>The implementation: How do we implement the project?</li>
<li>Some refinements: Touching up our implementation and discussing other improvements.</li>
<li>Testing and publishing: How do we make our library testable and package it?</li>
<li>Notes on writing code: How do I typically author C++ code?</li>
<li>The wrap-up: Where do I go from here?</li>
</ul>
<h2 id="the-objective">The objective</h2>
<p>Our end goal is a self-contained project containing two parts. A shared library, and a runtime we can use to test the library (hosted as the project <a href="https://github.com/PlexChat/RePlex">RePlex</a>). The function of the library is to act as a live code-reloader, which is extremely useful for live development (and potentially a surprise for people that didn’t realize C++ could do this). This way, we’ll cover how to make a reusable library across other executables, link that library to a sample executable, and cover a cool technique which needs to account for the host platform. Neat, let’s get started!</p>
<h2 id="the-executable">The executable</h2>
<p>First, we need to understand the basic building blocks of a C++ executable (also known as a binary executable or just binary for short). While this might seem overly pedantic, it actually isn’t as complicated as you might think (if you skip the less interesting parts). Knowledge about these building blocks will give us a common pool of terminology and concepts we’ll use throughout the rest of the article. If this is something you’re already familiar with, feel free to skip ahead to the next section.</p>
<p>C++ code is usually organized into two types of files, header files and source files, usually with a <code>.h</code> or <code>.cpp</code> file suffix respectively. The smallest useful granularity of compiled code is an <em>object file</em>, which is the output when compiling a single source file. Thus, a set of <code>N</code> source files will emit <code>N</code> associated compiled object files. These object files can then be combined into a library or standalone-executable in a process known as <em>linking</em>. In addition to linking object files, the <em>linker</em> can also link other libraries (which were themselves created by linking object files together). Here’s a flow chart showing some of the possibilities:</p>
<pre><code> Source Data     Compilation              Linking
 -----------     -----------              -------

+-------------+              +----------+
|Source file 1|  ----------&gt; |Obj file 1| -
+-------------+              +----------+  \
+-------------+              +----------+   \   +---------------------+
|Source file 2|  ----------&gt; |Obj file 2| ----&gt; |Library or executable|
+-------------+              +----------+   /   +---------------------+
                             +----------+  /
                             |Static Lib| -
                             +----------+</code></pre>
<p>Notice that I referred to the external library in the above flow chart as a <em>static</em> library. There are actually two types of libraries, <em>static</em> and <em>dynamic</em> (also known as <em>shared</em>). Static libraries are bundled into the executable at compile time as you’ve just seen. Dynamics libraries are loaded on demand by the executable at runtime.</p>
<p>As you may have guessed, our reloader is only going to work on dynamic libraries. Reloading a static library would require a relink of the entire executable and doing this on the fly would be quite a challenge indeed (left as a sadistic exercise to the reader).</p>
<h1 id="the-build-process">The build process</h1>
<p>If you haven’t guessed already, builds for C++ programs can get complicated fast. Decisions like link order, what to link, what the linker should produce have to be made by the programmer. The compilation of the object files is quite configurable as well. For example, we can specify how much the compiler should optimize or if we need debug symbols. Couple this with the fact that there are many compilers, each with their own feature sets and options (which may or may not be platform specific) and we have a real doozy on our hands. Fortunately, there are a lot more solutions for managing this today than there were years ago. The solution I’m going to cover here leverages <a href="https://premake.github.io/index.html">premake5</a>. Another piece of good news is that once you have some of the boilerplate in place, it’s easy to fork a new project off of it. There exist other build solutions which I’ll list non-exhaustively at the end of the section, but without further ado, let’s start scaffolding our project.</p>
<pre><code>RePlex
|-- premake5.lua
|-- lib
|   |-- RePlex.cpp
|   +-- pub
|       +-- RePlex.h
+-- runtime
    +-- Main.cpp</code></pre>
<p>There are countless ways one can organize files within a C++ project. Personally, I like having public headers separated other files within the same module and in an easily identifiable folder name (like “pub”). I also ensure that modules themselves (standalone libraries and executables) are separated. Occasionally, I introduce more folder nesting within a module to provide even more structure where it makes sense (e.g. grouping platform specific code, test harness code, etc). The contents of lib will be used to make our library, and the contents of runtime will make our executable. The file <code>RePlex/lib/pub/RePlex.h</code> will be the public interface of the library. Note that we’ll add files as we need them throughout this article; this is just a starting point.</p>
<p>What you’re actually curious about though, is that <code>lua</code> file. The Premake build configuration system actually consumes Lua files in order to generate project files or makefiles appropriate to your target platform. For example, on Windows, you could invoke <code>premake5 vs2015</code> in the <code>RePlex</code> directory to generate Visual Studio 2015 solution files to then edit and compile the code. Alternatively, on OSX you could generate Xcode project files, or GNU makefiles on Linux. Many more backends to premake <a href="https://github.com/premake/premake-core/wiki/Using-Premake">exist</a> and you can even <a href="https://github.com/premake/premake-core/wiki/Adding-a-New-Action">make your own</a>. The Lua files Premake consumes are declarative in nature, but you can use the entire Lua runtime at your disposal to do more complex build tasks if you wish (like preprocessing, or what have you). Here are the contents of <code>premake5.lua</code> file.</p>
<div class="sourceCode"><pre class="sourceCode lua"><code class="sourceCode lua">workspace <span class="st">&quot;RePlex&quot;</span>
  configurations <span class="ot">{</span><span class="st">&quot;Debug&quot;</span><span class="ot">,</span> <span class="st">&quot;Release&quot;</span><span class="ot">}</span>
  <span class="co">-- Use C++ as the target language for all builds</span>
  language <span class="st">&quot;C++&quot;</span>
  targetdir <span class="st">&quot;bin/%{cfg.buildcfg}&quot;</span>

  <span class="co">-- Get that C++14 goodness</span>
  flags <span class="ot">{</span> <span class="st">&quot;C++14&quot;</span> <span class="ot">}</span>

  filter <span class="st">&quot;configurations:Debug&quot;</span>
    <span class="co">-- Add the preprocessor definition DEBUG to debug builds</span>
    defines <span class="ot">{</span> <span class="st">&quot;DEBUG&quot;</span> <span class="ot">}</span>
    <span class="co">-- Ensure symbols are bundled with debug builds</span>
    flags <span class="ot">{</span> <span class="st">&quot;Symbols&quot;</span> <span class="ot">}</span>

  filter <span class="st">&quot;configurations:Release&quot;</span>
    <span class="co">-- Add the preprocessor definition RELEASE to debug builds</span>
    defines <span class="ot">{</span> <span class="st">&quot;RELEASE&quot;</span> <span class="ot">}</span>
    <span class="co">-- Turn on compiler optimizations for release builds</span>
    optimize <span class="st">&quot;On&quot;</span>

  <span class="co">-- RePlex Library</span>
  project <span class="st">&quot;RePlex&quot;</span>
    kind <span class="st">&quot;SharedLib&quot;</span>
    <span class="co">-- recursively glob .h and .cpp files in the lib directory</span>
    <span class="fu">files</span> <span class="ot">{</span> <span class="st">&quot;lib/**.h&quot;</span><span class="ot">,</span> <span class="st">&quot;lib/**.cpp&quot;</span> <span class="ot">}</span>

  <span class="co">-- RePlex Runtime</span>
  project <span class="st">&quot;RePlexRuntime&quot;</span>
    kind <span class="st">&quot;ConsoleApp&quot;</span>
    <span class="co">-- recursively glob .h and .cpp files in the runtime directory</span>
    <span class="fu">files</span> <span class="ot">{</span> <span class="st">&quot;runtime/**.h&quot;</span><span class="ot">,</span> <span class="st">&quot;runtime/**.cpp&quot;</span> <span class="ot">}</span>
    <span class="co">-- link the RePlexLib library at runtime</span>
    links <span class="ot">{</span> <span class="st">&quot;RePlex&quot;</span> <span class="ot">}</span>
    includedirs <span class="ot">{</span> <span class="st">&quot;lib/pub&quot;</span> <span class="ot">}</span></code></pre></div>
<p>I don’t want to belabor the mechanics of this in too much detail, but hopefully the structure makes sense. At the top level, we have a workspace called “RePlex” which is purely semantic; it has no meaning as far as C++ is concerned but acts as a container for all our build targets (i.e. libraries and executables). This is useful for signalling what should be grouped to IDEs like Visual Studio, Xcode. Premake files are structured with lexical scoping, where keywords like <code>workspace</code> and <code>project</code> increase the depth of the scope tree. Thus all the properties defined underneath line 1 apply to all projects in that workspace. Here, we define two possible build configurations, the workspace language, target directory, and configuration specific compiler flags and preprocessor definitions.</p>
<p>Then, we define two projects for our shared library and console application respectively. Note that RePlexLib is a dependency of RePlexRuntime; RePlexRuntime has access to all headers in <code>lib/pub</code> and also links RePlexLib. Note that we could have overridden or specified any of global workspace properties on a per project basis.</p>
<p>Let’s make some stub files too:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// lib/pub/RePlex.h</span>

<span class="ot">#pragma once</span>

<span class="kw">class</span> Foo
{
<span class="kw">public</span>:
    <span class="dt">int</span> GetTheAnswer() <span class="dt">const</span>;
<span class="kw">private</span>:
    <span class="dt">int</span> m_answer = <span class="dv">42</span>;
};</code></pre></div>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// lib/RePlex.cpp</span>

<span class="ot">#include &quot;pub/RePlex.h&quot;</span>

<span class="dt">int</span> Foo::GetTheAnswer() <span class="dt">const</span>
{
    <span class="kw">return</span> m_answer;
}</code></pre></div>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// runtime/Main.cpp</span>

<span class="ot">#include &lt;RePlex.h&gt;</span>
<span class="ot">#include &lt;iostream&gt;</span>

<span class="dt">int</span> main()
{
    Foo foo;
    std::cout &lt;&lt; <span class="st">&quot;The answer is &quot;</span> &lt;&lt; foo.GetTheAnswer() &lt;&lt; std::endl;
    <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>As a side note, my preference for editing code varies based on the platform I am using. When developing on Windows, I prefer Visual Studio (which has improved dramatically since 2010, the version I first learned on). When developing on OSX, I use Xcode due to its integration with the various simulators for iOS devices. On Linux, I use Emacs with Vim emulation, or Eclipse when I need a visual debugger (I’ve had issues using Eclipse as an editor due to stability, although this may have been addressed in more recent builds since my last experience with it in 2014). When writing this article, I opted to use a simple text editor and the make system, as this is the most ubiquitous build system and the reader should be able to reproduce all the work with the IDE of their choosing relatively easily.</p>
<p>At this point, you should install Premake if you haven’t already for the operating system of your choice. With this, you should be able to invoke <code>premake5 gmake</code> (substitute <code>gmake</code> with whatever action you like) in the root directory of the app should create the corresponding Makefiles or project files depending on what action you choose. Subsequently, building the workspace should emit <code>bin/Debug/RePlexRuntime</code> and <code>bin/Debug/libRePlex.dylib</code>. Running <code>bin/Debug/RePlexRuntime</code> should give us the output we expect.</p>
<pre><code>The answer is 42</code></pre>
<p>Woohoo, progress!</p>
<h1 id="the-implementation">The implementation</h1>
<p>As mentioned before, we want to author a library that will handle “hot-reloading” a different library on the fly. Let’s first imagine what the interface to this library might look like. Obviously, the calling site needs to supply the name of the library they want to link. In addition, they need to specify the <em>symbols</em> in the library they wish to use. A symbol is, roughly speaking, the name given by the compiler to a variable name or function in your program. “Why can’t they just use the name I gave it?” you might ask. The reason is because of features like function overloading, namespacing, templating, and a number of other features that make the given visible name insufficient for unique identification purposes. The symbol is generally used by the linker at compile time to determine where in memory the data or function exists. For our purposes, we need to make this association at runtime, but fortunately, an API for doing this exists in all major operating systems. We’re going to focus on UNIX-based operating systems here. The functions we need are:</p>
<ul>
<li><code>dlopen</code>: Given a file name, reads the library from disk into memory</li>
<li><code>dlsym</code>: Given a symbol, returns the address of that symbol</li>
<li><code>dlerror</code>: Returns an error message describing the last thing that went wrong</li>
<li><code>dlclose</code>: Releases a reference to the specified library. If the reference count drops to zero, the library is removed from the address space.</li>
</ul>
<p>Let’s do a quick and dirty demo to test the mechanics of these functions. The structure of the program will look like the following:</p>
<pre><code>+------+
|RePlex| Library for performing loading and unloading
+------+
 |       \  Is a dependency of
 |        \
 |         *---*
 |              \     +-------------+
 |               *--&gt; |RePlexRuntime|
 |                    +-------------+
 | Loads               /
 |                    / Uses symbols in RePlexTest
  \                  /
   \     +----------+
    *--&gt; |RePlexTest| Library that gets reloaded
         +----------+</code></pre>
<p>RePlexRuntime is the executable that will be running in our test. RePlexTest will be the library that we eventually want to hotload. Replex will be our library for encapsulating the various functions to interact with the dynamic library. To accommodate this structure, let’s add the test library to our Premake file.</p>
<div class="sourceCode"><pre class="sourceCode lua"><code class="sourceCode lua">project <span class="st">&quot;RePlexTest&quot;</span>
  kind <span class="st">&quot;SharedLib&quot;</span>
  <span class="fu">files</span> <span class="ot">{</span> <span class="st">&quot;test/**.h&quot;</span><span class="ot">,</span> <span class="st">&quot;test/**.cpp&quot;</span><span class="ot">,</span> <span class="st">&quot;test/pub/*.h&quot;</span> <span class="ot">}</span></code></pre></div>
<p>Easy enough. We’ll also add a header and source file to our test library.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// test/pub/Test.h</span>

<span class="ot">#pragma once</span>

<span class="co">// This line prevents C++ name mangling which would prevent dlsym from retrieving</span>
<span class="co">// the correct symbols.</span>
<span class="dt">extern</span> <span class="st">&quot;C&quot;</span>
{
    <span class="dt">void</span> foo();

    <span class="co">// The extern keyword here exports a global variable that will be defined in Test.cpp</span>
    <span class="dt">extern</span> <span class="dt">int</span> bar;
}</code></pre></div>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// test/Test.cpp</span>
<span class="ot">#include &quot;pub/Test.h&quot;</span>
<span class="ot">#include &lt;cstdio&gt;</span>

<span class="dt">void</span> foo()
{
    printf(<span class="st">&quot;Hi</span><span class="ch">\n</span><span class="st">&quot;</span>);
}

<span class="dt">int</span> bar = <span class="dv">4</span>;</code></pre></div>
<p>Our RePlex library for now will just have a very thin wrapper to the various <code>dl*</code> functions.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// lib/pub/RePlex.h</span>

<span class="ot">#pragma once</span>

<span class="ot">#include &lt;dlfcn.h&gt;</span>

<span class="dt">void</span>* Load(<span class="dt">const</span> <span class="dt">char</span>* filepath);

<span class="dt">void</span>* LoadSymbol(<span class="dt">void</span>* library, <span class="dt">const</span> <span class="dt">char</span>* symbol);

<span class="dt">void</span> Reload(<span class="dt">void</span>* &amp;library, <span class="dt">const</span> <span class="dt">char</span>* filepath);

<span class="dt">void</span> PrintError();</code></pre></div>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// lib/RePlex.cpp</span>

<span class="ot">#include &quot;pub/RePlex.h&quot;</span>

<span class="ot">#include &lt;cstdio&gt;</span>

<span class="dt">void</span>* Load(<span class="dt">const</span> <span class="dt">char</span>* filepath)
{
  <span class="kw">return</span> dlopen(filepath, RTLD_NOW);
}

<span class="dt">void</span>* LoadSymbol(<span class="dt">void</span>* library, <span class="dt">const</span> <span class="dt">char</span>* symbol)
{
  <span class="kw">return</span> dlsym(library, symbol);
}

<span class="dt">void</span> Reload(<span class="dt">void</span>* &amp;library, <span class="dt">const</span> <span class="dt">char</span>* filepath)
{
  dlclose(library);
  library = dlopen(filepath, RTLD_NOW);
}

<span class="dt">void</span> PrintError()
{
  printf(<span class="st">&quot;Error: </span><span class="ch">%s\n</span><span class="st">&quot;</span>, dlerror());
}</code></pre></div>
<p>Finally, we’ll modify our runtime to use these new functions and test run a dll hot-load.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#include &lt;RePlex.h&gt;</span>
<span class="ot">#include &lt;iostream&gt;</span>

<span class="ot">#ifdef DEBUG</span>
<span class="dt">const</span> <span class="dt">char</span>* g_libPath = <span class="st">&quot;bin/Debug/libRePlexTest.dylib&quot;</span>;
<span class="ot">#else</span>
<span class="dt">const</span> <span class="dt">char</span>* g_libPath = <span class="st">&quot;bin/Release/libRePlexTest.dylib&quot;</span>;
<span class="ot">#endif</span>

<span class="dt">void</span> (*foo)();

<span class="dt">int</span> main()
{
  <span class="dt">void</span>* handle = Load(g_libPath);
  <span class="kw">if</span> (handle)
  {
    <span class="co">// Set the memory address of the function foo from the library to our foo.</span>
    foo = <span class="kw">reinterpret_cast</span>&lt;<span class="dt">void</span> (*)()&gt;(LoadSymbol(handle, <span class="st">&quot;foo&quot;</span>));
    <span class="co">// Call foo</span>
    foo();

    <span class="co">// Read the data from the global variable bar in the test library</span>
    <span class="dt">int</span> bar = *<span class="kw">reinterpret_cast</span>&lt;<span class="dt">int</span>*&gt;(LoadSymbol(handle, <span class="st">&quot;bar&quot;</span>));
    std::cout &lt;&lt; <span class="st">&quot;bar == &quot;</span> &lt;&lt; bar &lt;&lt; std::endl;

    <span class="co">// Wait for input to give us a chance to recompile the library</span>
    std::cout &lt;&lt; <span class="st">&quot;Make some changes, recompile, and press enter.&quot;</span> &lt;&lt; std::flush;
    <span class="kw">while</span>(std::cin.get() != <span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>) {}

    <span class="co">// Reload the library!</span>
    Reload(handle, g_libPath);

    <span class="co">// We need to refetch the symbol because it&#39;s location in memory may have changed</span>
    foo = <span class="kw">reinterpret_cast</span>&lt;<span class="dt">void</span> (*)()&gt;(LoadSymbol(handle, <span class="st">&quot;foo&quot;</span>));
    foo();

    <span class="co">// Do the same for bar</span>
    bar = *<span class="kw">reinterpret_cast</span>&lt;<span class="dt">int</span>*&gt;(LoadSymbol(handle, <span class="st">&quot;bar&quot;</span>));
    std::cout &lt;&lt; <span class="st">&quot;bar == &quot;</span> &lt;&lt; bar &lt;&lt; std::endl;
  }
  <span class="kw">else</span>
  {
    PrintError();
  }
  <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>Running this on my machine generates output like the following:</p>
<pre><code>Hi
bar == 4
Make some changes, recompile, and press enter.
Can i haz hot-reloading
bar == 314159</code></pre>
<p>Note that after the second line of that output, I changed the contents of Test.cpp and reinvoked <code>make</code> to recompile the library. So far so good! Now that we have some grasp of the strange incantations of this program, we can start to think about a better way to structure it. One thing worth noting is our use of <code>extern &quot;C&quot;</code>. This has a special meaning in C++ and informs the compiler to not use name-mangling on the symbols defined in its scope (in our case, the <code>foo</code> function and <code>bar</code> global). This makes those symbols callable from C code, and also allows functions like <code>dlsym</code> to locate them using a simple C-string lookup. Symbol lookup for C++ functions and variables is a bit more complex due to the various decorators that can be attached to functions and variables. More importantly, the way in which the compiler assigns names to these decorated functions and variables is not standardized and can vary from compiler to compiler.</p>
<p>The existing program has a number of problems. First, we need to manually load the symbol ourselves. This will certainly become tedious if a module exports a lot of functions and variables. In addition, the test library where the actual code resides doesn’t actually specify it’s own exports which is a little odd. What we really want is a way to package all exports in a pretty package. This means that RePlex will need to expose two public interfaces, one for publishing a hot-loadable library, and one for loading and reloading those hot-loadable libraries. To do this, we’ll make a class called <code>RePlexModule</code> in Replex.h. The intended usage of this module is to be inherited by the test library and specialized so it can load all the correct symbols and expose a cleaner interface to the end user of the library. Let’s start with just the public interface:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// lib/pub/RePlex.h</span>
<span class="ot">#pragma once</span>

<span class="ot">#include &lt;array&gt;</span>
<span class="ot">#include &lt;unordered_map&gt;</span>
<span class="ot">#include &lt;string&gt;</span>
<span class="ot">#include &lt;dlfcn.h&gt;</span>

<span class="kw">template</span> &lt;<span class="kw">typename</span> E, size_t NumSymbols&gt;
<span class="kw">class</span> RePlexModule
{
<span class="kw">public</span>:
  <span class="dt">static</span> <span class="dt">void</span> LoadLibrary() { GetInstance().Load(); }
  <span class="dt">static</span> <span class="dt">void</span> ReloadLibrary() { GetInstance().Reload(); }

<span class="kw">protected</span>:
  <span class="dt">static</span> E&amp; GetInstance()
  {
    <span class="dt">static</span> E instance;
    <span class="kw">return</span> instance;
  }

  <span class="co">//...</span>
  <span class="co">//... continued later</span>
};</code></pre></div>
<p>The first thing you’ll notice are the template parameters attached to our class. That’s right, this is a template class! If you haven’t seen them before (or saw them and didn’t understand them), the following example should give you the basic gist.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Foo
{
<span class="kw">public</span>:
    T GetT() { <span class="kw">return</span> t; }
    T t;
}</code></pre></div>
<p><code>Foo</code> is a class template (you might have heard the term “template class” before, but honestly, I don’t think that makes any sense; just know that they’re interchangeable and “template class” is a bit more common) and has one template parameter. We can’t make an object of type <code>Foo</code> since we don’t know what <code>T</code> is. However, later we might <em>instantiate</em> the class template like so:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">Foo&lt;<span class="dt">double</span>&gt; foo;</code></pre></div>
<p>This makes an instance of the class template <code>Foo</code> with <code>T = double</code>. The compiler essentially writes out the code like so:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">class</span> Foo&lt;<span class="dt">double</span>&gt;
{
<span class="kw">public</span>:
    <span class="dt">double</span> GetT() { <span class="kw">return</span> t; }
    <span class="dt">double</span> t;
}</code></pre></div>
<p>The compiler simply did a substitution of the unqualified type <code>T</code> for the type <code>double</code>. If you conceptually think of templates in this way and do mental substitutions, you’ll have a good mental model for what’s going on. In addition to types, template arguments can be countable numbers (like <code>NumSymbols</code>).</p>
<p>Going back to <code>RePlexModule</code>, the only two public functions RePlexModule will expose to our runtime is <code>LoadLibrary</code> and <code>ReloadLibrary</code> which both depend on <code>GetInstance</code>. Notice that these are all static functions that operate on a singleton. Singletons are often considered an antipattern, however, in this case we actually want to enforce that only one copy of this class exists in memory. It really doesn’t make sense to have multiple instances (if we wanted, say, two separate versions of the library to coexist, we would associate them with entirely different types, not two instances of the same type). Why doesn’t <code>GetInstance</code> return a reference to <code>RePlexModule</code>? Because remember, we want our test library to inherit from this class to specialize behavior. Thus, we expect it to supply the value of the template parameter <code>E</code> as itself. If this is confusing now, don’t worry. It will get clarified better later on. We also need to remember to remove the <code>RePlex</code> library as a Premake project since it now is a header only file that doesn’t require standalone compilation (this includes removing it as a link dependency of the runtime).</p>
<p>Now, let’s look at the functions exposed to the test library that will inherit <code>RePlexModule</code>:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">  <span class="co">// Start of RePlexModule declaration above</span>
  <span class="co">// ...</span>
<span class="kw">protected</span>:

  <span class="co">// Should return the path to the library on disk</span>
  <span class="kw">virtual</span> <span class="dt">const</span> <span class="dt">char</span>* GetPath() <span class="dt">const</span> = <span class="dv">0</span>;

  <span class="co">// Should return a reference to an array of C-strings of size NumSymbols</span>
  <span class="co">// Used when loading or reloading the library to lookup the address of</span>
  <span class="co">// all exported symbols</span>
  <span class="kw">virtual</span> std::array&lt;<span class="dt">const</span> <span class="dt">char</span>*, NumSymbols&gt;&amp; GetSymbolNames() <span class="dt">const</span> = <span class="dv">0</span>;

  <span class="kw">template</span> &lt;<span class="kw">typename</span> Ret, <span class="kw">typename</span>... Args&gt;
  Ret Execute(<span class="dt">const</span> <span class="dt">char</span>* name, Args... args)
  {
    <span class="co">// Lookup the function address</span>
    <span class="kw">auto</span> symbol = m_symbols.find(name);
    <span class="kw">if</span> (symbol != m_symbols.end())
    {
      <span class="co">// Cast the address to the appropriate function type and call it,</span>
      <span class="co">// forwarding all arguments</span>
      <span class="kw">return</span> <span class="kw">reinterpret_cast</span>&lt;Ret(*)(Args...)&gt;(symbol-&gt;second)(args...);
    }
    <span class="kw">else</span>
    {
      <span class="kw">throw</span> std::runtime_error(std::string(<span class="st">&quot;Function not found: &quot;</span>) + name);
    }
  }

  <span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
  T* GetVar(<span class="dt">const</span> <span class="dt">char</span>* name)
  {
    <span class="kw">auto</span> symbol = m_symbols.find(name);
    <span class="kw">if</span> (symbol != m_symbols.end())
    {
      <span class="kw">return</span> <span class="kw">static_cast</span>&lt;T*&gt;(symbol-&gt;second);
    }
    <span class="kw">else</span>
    {
      <span class="co">// We didn&#39;t find the variable. Return an empty pointer</span>
      <span class="kw">return</span> <span class="kw">nullptr</span>;
    }
  }

<span class="kw">private</span>:
  <span class="dt">void</span> Load()
  {
    m_libHandle = dlopen(GetPath(), RTLD_NOW);
    LoadSymbols();
  }

  <span class="dt">void</span> Reload()
  {
    dlclose(m_libHandle);
    m_symbols.clear();
    Load();
  }

  <span class="dt">void</span> LoadSymbols()
  {
    <span class="kw">for</span> (<span class="dt">const</span> <span class="dt">char</span>* symbol : GetSymbolNames())
    {
      m_symbols[symbol] = dlsym(m_libHandle, symbol);
    }
  }

  <span class="dt">void</span>* m_libHandle;
  std::unordered_map&lt;std::string, <span class="dt">void</span>*&gt; m_symbols;
};</code></pre></div>
<p>The data members of the class at the very bottom are a pointer to the library handle after it gets loaded and an associative container mapping symbol names to their pointers in memory. Working upwards, we have functions that operate very similarly to our initial toy implementation. <code>LoadSymbols</code> iterates over all elements returned from <code>GetSymbols</code> and populates <code>m_symbols</code>. <code>Load</code> works as before but also calls <code>LoadSymbols</code>. <code>Reload</code> also works as before but clears the contents of <code>m_symbols</code> first to ensure there aren’t any invalid symbols lingering around. <code>Load</code> and <code>Reload</code> are called by the static functions <code>LoadLibrary</code> and <code>ReloadLibrary</code> defined above respectively.</p>
<p>Towards the top, we have pure virtual functions we expect implementers of this class to override: <code>GetPath</code> and <code>GetSymbols</code>. We’ll override these soon, but first, let’s look at the (possibly terrifying) functions <code>Execute</code> and <code>GetVar</code>.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> Ret, <span class="kw">typename</span>... Args&gt;
Ret Execute(<span class="dt">const</span> <span class="dt">char</span>* name, Args... args)
{
  <span class="kw">auto</span> symbol = m_symbols.find(name);
  <span class="kw">if</span> (symbol != m_symbols.end())
  {
    <span class="kw">return</span> <span class="kw">reinterpret_cast</span>&lt;Ret(*)(Args...)&gt;(symbol-&gt;second)(args...);
  }
  <span class="kw">else</span>
  {
    <span class="kw">throw</span> std::runtime_error(std::string(<span class="st">&quot;Function not found: &quot;</span>) + name);
  }
}</code></pre></div>
<p><code>Execute</code> takes a function name and <code>Args... args</code> as arguments. Its return type is <code>Ret</code>. The first argument is unlikely to be contentious but the second is likely unfamiliar to those who haven’t touched C++ since the advent of the C++11 standard. The <code>...</code> syntax denotes a parameter pack and is useful for specifying a variadic number of arguments with varying types. For example, if I called this function like:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">Execute&lt;<span class="dt">char</span>, <span class="dt">int</span>, <span class="dt">float</span>&gt;(<span class="st">&quot;stuff&quot;</span>, <span class="dv">7</span>, <span class="fl">2.4f</span>);

<span class="co">// Compiler turns this into something like:</span>
<span class="co">// char Execute(const char* name, int arg1, float arg2)</span>
<span class="co">// {</span>
<span class="co">//   auto symbol = m_symbols.find(name);</span>
<span class="co">//   if (symbol != m_symbols.end())</span>
<span class="co">//   {</span>
<span class="co">//     return reinterpret_cast&lt;char(*)(int, float)&gt;(symbol-&gt;second)(arg1, arg2);</span>
<span class="co">//   }</span>
<span class="co">//   else</span>
<span class="co">//   {</span>
<span class="co">//     throw std::runtime_error(std::string(&quot;Function not found: &quot;) + name);</span>
<span class="co">//   }</span>
<span class="co">// }</span></code></pre></div>
<p>The compiler would interpret <code>Ret</code> as a <code>char</code>, <code>args...</code> would be expanded to 7 and 2.4f, and <code>Args...</code> would be expanded to an int and float type. This allows us to invoke <code>Execute</code> to first lookup the symbol, call it as a function with the appropriate arguments, and subsequently return the correct return value. Neat! We throw an exception if the function isn’t found because it’s hard to know what to return in this case.</p>
<p>The function <code>GetVar</code> is a little simpler. We simply look up the symbol and cast it as a pointer to specified template type before returning it.</p>
<p>Now, we’re ready to specialize this class for our test library.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// Test.h</span>
<span class="ot">#pragma once</span>

<span class="ot">#include &lt;RePlex.h&gt;</span>

<span class="dt">extern</span> <span class="st">&quot;C&quot;</span>
{
  <span class="dt">void</span> foo();
  <span class="dt">extern</span> <span class="dt">int</span> bar;
}

std::array&lt;<span class="dt">const</span> <span class="dt">char</span>*, <span class="dv">2</span>&gt; g_exports = { <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span> };

<span class="kw">class</span> TestModule : <span class="kw">public</span> RePlexModule&lt;TestModule, g_exports.size()&gt;
{
<span class="kw">public</span>:
  <span class="dt">static</span> <span class="dt">void</span> Foo()
  {
    <span class="co">// Execute might throw, but we don&#39;t bother catching the exception here for brevity</span>
    GetInstance().Execute&lt;<span class="dt">void</span>&gt;(<span class="st">&quot;foo&quot;</span>);
  }

  <span class="dt">static</span> <span class="dt">int</span> GetBar()
  {
    <span class="co">// decltype is a relatively new operator. decltype(bar) resolves to int</span>
    <span class="co">// Note that this function does not protect against retrieving nullptr</span>
    <span class="kw">return</span> *GetInstance().GetVar&lt;<span class="kw">decltype</span>(bar)&gt;(<span class="st">&quot;bar&quot;</span>);
  }

<span class="kw">protected</span>:
  <span class="kw">virtual</span> <span class="dt">const</span> <span class="dt">char</span>* GetPath() <span class="dt">const</span> <span class="kw">override</span>
  {
<span class="ot">#ifdef DEBUG</span>
    <span class="kw">return</span> <span class="st">&quot;bin/Debug/libRePlexTest.dylib&quot;</span>;
<span class="ot">#else</span>
    <span class="kw">return</span> <span class="st">&quot;bin/Release/libRePlexTest.dylib&quot;</span>;
<span class="ot">#endif</span>
  }

  <span class="kw">virtual</span> std::array&lt;<span class="dt">const</span> <span class="dt">char</span>*, g_exports.size()&gt;&amp; GetSymbols() <span class="dt">const</span> <span class="kw">override</span>
  {
    <span class="kw">return</span> g_exports;
  }
};</code></pre></div>
<p>In addition to the things we actually want to export from before (<code>foo</code> and <code>bar</code>), we make an array of exports of size 2 containing the correct string names. When we inherit from <code>RePlexModule</code>, we are careful to fully qualify all of its template arguments so the compiler can properly substitute all the template arguments where they are necessary. Thus, <code>GetInstance</code> will return a reference to a <code>TestModule</code> singleton, and <code>GetSymbolNames</code> will return an array of 2 strings. We override the methods that were declared pure virtual, <code>GetPath</code>, and <code>GetSymbolNames</code> in a straightforward manner. Finally, we provide convenient static functions <code>Foo</code> and <code>GetBar</code> for calling <code>foo</code> and retrieving <code>bar</code>. Notice that the body of <code>Foo</code> contains</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">GetInstance().Execute&lt;<span class="dt">void</span>&gt;(<span class="st">&quot;foo&quot;</span>);</code></pre></div>
<p>because <code>foo</code> returns void and takes no arguments. We’re finally ready to modify our main program to take advantage of the new <code>TestModule</code> class.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// runtime/Main.cpp</span>

<span class="ot">#include &lt;RePlex.h&gt;</span>
<span class="ot">#include &lt;Test.h&gt;</span>
<span class="ot">#include &lt;iostream&gt;</span>

<span class="dt">int</span> main()
{
  TestModule::LoadLibrary();
  TestModule::Foo();
  std::cout &lt;&lt; <span class="st">&quot;bar == &quot;</span> &lt;&lt; TestModule::GetBar() &lt;&lt; std::endl;

  std::cout &lt;&lt; <span class="st">&quot;Make some changes, recompile, and press enter.&quot;</span> &lt;&lt; std::flush;
  <span class="kw">while</span>(std::cin.get() != <span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>) {}

  TestModule::ReloadLibrary();
  TestModule::Foo();
  std::cout &lt;&lt; <span class="st">&quot;bar == &quot;</span> &lt;&lt; TestModule::GetBar() &lt;&lt; std::endl;
  <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>Much better. Now the user of the test module doesn’t need to think about the specifics regarding symbol names, reloading each symbol, or their types. We can just look at the public interface of <code>TestModule</code> to get it all down pat. If you’re following along in code, remember to add the correct include paths to the test library and runtime projects in <code>premake5.lua</code> so the preprocessor includes work before compiling.</p>
<h1 id="some-refinements">Some refinements</h1>
<p>What we have now is probably usable as an internal library for the purpose of iterating on a C++ module that exposes a public interface of variables and functions. By coupling this with enums, interfaces, structs, and classes in a public header, we can pretty quickly imagine how we might integrate this small library into our workflow. There are a number of refinements possibly worth making to the library which I’ll mention briefly in this section.</p>
<p>First, the library as is will only work on Linux and OSX platforms. The way symbols get mapped and unmapped in memory is operating system dependent, and Windows exposes its own set of functions for doing so: <code>LoadLibrary</code>, <code>GetProcAddress</code>, and <code>FreeLibrary</code>. They are analogous to <code>dlopen</code>, <code>dlsym</code>, and <code>dlclose</code> respectively, and I will leave it as an exercise to the reader to implement this. There are at least two ways to accomplish this. One way is to add a Premake <a href="https://github.com/premake/premake-core/wiki/filter">filter</a> on the platform name and create preprocessor definitions that can be used to ensure the correct function is called. Alternatively, you can split the interface to the operating system in files based on operating system and exclude files that were meant for different platforms in Premake.</p>
<p>A second problem is one of performance. If we are calling <code>Execute</code> or <code>GetVar</code> many times in an inner loop, we have to repeatedly hash the symbol name to do a lookup for the symbol address. To avoid this, we could cache the result of the lookup. Even easier though, is to avoid using the map in the first place and store the symbols in the same order as the symbol names. This might make it harder to change what symbols get loaded between loads, but it’s unlikely that this would be a useful feature anyways.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">  <span class="co">// Before we stored a map</span>
  <span class="co">// std::unordered_map&lt;std::string, void*&gt; m_symbols;</span>
  <span class="co">//</span>
  <span class="co">// Now we&#39;ll use a reference to the array that was passed in</span>
  <span class="kw">using</span> SymbolArray = std::array&lt;std::pair&lt;<span class="dt">const</span> <span class="dt">char</span>*, <span class="dt">void</span>*&gt;&gt;;
  SymbolArray&amp; m_symbols;</code></pre></div>
<p>Also, we’ll change our <code>LoadSymbols</code> function to populate this array:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">  <span class="dt">void</span> LoadSymbols()
  {
    <span class="kw">for</span> (<span class="kw">auto</span>&amp;&amp; symbol : m_symbols)
    {
      symbol.second = dlsym(m_libHandle, symbol.first);
    }
  }</code></pre></div>
<p>Note the <code>auto&amp;&amp;</code> here which shorthand for saying the variable <code>symbol</code> can bind to any type regardless of const-ness or <a href="http://en.cppreference.com/w/cpp/language/value_category">value category</a>. In this case, there is only one possibility of <code>auto&amp;&amp;</code> and the compiler will treat it as a <code>std::pair&lt;const char*, void*&gt;&amp;</code>.</p>
<p>Next, we modify our <code>Execute</code> and <code>GetVar</code> functions to take an index instead of a string name, in addition to adding a constructor which accepts a reference to the symbol array.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">  RePlexModule(SymbolArray&amp; symbols) : m_symbols(symbols) {}

  <span class="kw">template</span> &lt;<span class="kw">typename</span> Ret, <span class="kw">typename</span>... Args&gt;
  Ret Execute(<span class="dt">const</span> <span class="dt">int</span> index, Args... args)
  {
    <span class="kw">auto</span> symbol = m_symbols.at(index);
    <span class="kw">return</span> <span class="kw">reinterpret_cast</span>&lt;Ret(*)(Args...)&gt;(symbol.second)(args...);
  }

  <span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
  T* GetVar(<span class="dt">const</span> <span class="dt">int</span> index)
  {
    <span class="kw">auto</span> symbol = m_symbols.at(index);
    <span class="kw">return</span> <span class="kw">static_cast</span>&lt;T*&gt;(symbol.second);
  }</code></pre></div>
<p>This is now quite a bit simpler than before because we leave it to the method <code>std::array::at</code> to do bounds checking for us. However, is it likely that this index will be dynamically determined at runtime? Not really. Instead, if we made the index a function template parameter, we can enforce that the correct address is retrieved without a bounds check. Doing this for the <code>GetVar</code> function for example:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">  <span class="kw">template</span> &lt;<span class="kw">typename</span> T, size_t index&gt;
  T* GetVar()
  {
    <span class="kw">static_assert</span>(Index &gt;= <span class="dv">0</span> &amp;&amp; Index &lt; NumSymbols, <span class="st">&quot;Out of bounds symbol index&quot;</span>);
    <span class="kw">auto</span> symbol = m_symbols[index];
    <span class="kw">return</span> <span class="kw">static_cast</span>&lt;T*&gt;(symbol.second);
  }</code></pre></div>
<p>Doing <code>m_symbols[index]</code> doesn’t do a bounds check like <code>m_symbols.at(index)</code> does, but we still get the bounds checking via the <code>static_assert</code> which means it’s enforced at compile time instead of runtime. Great! There need to be a few changes to the <code>TestModule</code> to accommodate this new interface:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">std::array&lt;std::pair&lt;<span class="dt">const</span> <span class="dt">char</span>*, <span class="dt">void</span>*&gt;, <span class="dv">2</span>&gt; g_exports = {
  std::make_pair(<span class="st">&quot;foo&quot;</span>, <span class="kw">nullptr</span>),
  std::make_pair(<span class="st">&quot;bar&quot;</span>, <span class="kw">nullptr</span>)
};


<span class="kw">class</span> TestModule : <span class="kw">public</span> RePlexModule&lt;TestModule, g_exports.size()&gt;
{
<span class="kw">public</span>:
  <span class="dt">static</span> <span class="dt">void</span> Foo(<span class="dt">int</span> input)
  {
    GetInstance().Execute&lt;<span class="dv">0</span>, <span class="dt">void</span>&gt;();
  }

  <span class="dt">static</span> <span class="dt">int</span> GetBar()
  {
    <span class="kw">return</span> *GetInstance().GetVar&lt;<span class="dv">1</span>, <span class="kw">decltype</span>(bar)&gt;();
  }

  TestModule() : RePlexModule(g_exports) {}

  <span class="co">// Rest of class identical except GetSymbolNames was removed</span>
};</code></pre></div>
<p>Now, we can expect that <code>Foo</code> and <code>GetBar</code> will be very fast since they no longer require the string based map lookup. At most, they will need an offset from the array address, but it’s likely that the optimizer will even elide that instruction.</p>
<p>This library is far from complete. It’s not thread-safe. It doesn’t protect you from reloading if you’re in the middle of executing a function that might do a symbol lookup shortly after the previous library is unloaded. It requires the programmer to repeat himself or herself with regard to function return types and arguments when binding <code>Execute</code>. It doesn’t handle errors well (library not found, symbol missing, etc). It’s also missing a number of nice features, like automatic reload if the file changes. The goal of this article wasn’t to provide a perfect implementation, but hopefully convey a since of how software like this might be written and structured.</p>
<p>One thing that’s important to understand, is that the template programming we are doing here should not define one’s programming style. In this case, we are using generics simply because we are defining a generic interface, which is where the template really shines. In particular, templates coupled with static assertions can go a long way in enforcing the type safety and correctness of an application. It’s worth noting that all the templating is not exposed to the main runtime executable, who has the luxury of an easy-to-use interface. Indeed, abstracting away common generic behavior can be a good tool to reduce complexity and code duplication if done correctly.</p>
<h1 id="testing-and-publishing">Testing and publishing</h1>
<p>Making manual changes to the library and recompiling it, followed by a keystroke to see if things worked visually is a pretty terrible workflow as far as detecting regressions goes. In this section, we’ll make things a little neater and repeatable. We’ll also discuss the mechanics of publishing our code so others can use it.</p>
<p>For the purposes of this article, we will use <a href="https://github.com/google/googletest">googletest</a> which is a batteries-included test suite which contains the necessities (assertions, test framework) and other amenities like test report generation and an optional <a href="https://github.com/ospector/gtest-gbar">frontend</a>. To make our repository self-contained, let’s add <code>googletest</code> as a git submodule, and also add a Premake project for it.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">git</span> submodule add git@github.com:google/googletest.git</code></pre></div>
<div class="sourceCode"><pre class="sourceCode lua"><code class="sourceCode lua"><span class="ot">//</span> premake5<span class="ot">.</span>lua

<span class="ot">#</span> <span class="ot">...</span>

  project <span class="st">&quot;GoogleTest&quot;</span>
    kind <span class="st">&quot;StaticLib&quot;</span>
    <span class="fu">files</span> <span class="ot">{</span> <span class="st">&quot;googletest/googletest/src/gtest-all.cc&quot;</span> <span class="ot">}</span>
    includedirs <span class="ot">{</span> <span class="st">&quot;googletest/googletest/include&quot;</span><span class="ot">,</span> <span class="st">&quot;googletest/googletest&quot;</span> <span class="ot">}</span>

  project <span class="st">&quot;RePlexRuntime&quot;</span>
    kind <span class="st">&quot;ConsoleApp&quot;</span>
    <span class="fu">files</span> <span class="ot">{</span> <span class="st">&quot;runtime/**.h&quot;</span><span class="ot">,</span> <span class="st">&quot;runtime/**.cpp&quot;</span> <span class="ot">}</span>
    includedirs <span class="ot">{</span> <span class="st">&quot;lib/pub&quot;</span><span class="ot">,</span> <span class="st">&quot;test/pub&quot;</span><span class="ot">,</span> <span class="st">&quot;googletest/googletest/include&quot;</span> <span class="ot">}</span>
    links <span class="ot">{</span> <span class="st">&quot;GoogleTest&quot;</span> <span class="ot">}</span></code></pre></div>
<p>Now, the Google test framework is bundled in the repository and invoking <code>premake5 gmake</code> will compile it and link it to <code>RePlexRuntime</code>. Now to actually author the tests themselves. Let’s first do a simple test to see how this all works.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// runtime/Main.cpp</span>

<span class="ot">#include &lt;gtest/gtest.h&gt;</span>

TEST(SillyTest, IsFourPositive)
{
  EXPECT_GT(<span class="dv">4</span>, <span class="dv">0</span>);
}

TEST(SillyTest, IsFourTimesFourSixteen)
{
  <span class="dt">int</span> x = <span class="dv">4</span>;
  EXPECT_EQ(x * x, <span class="dv">16</span>);
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span>** argv)
{
  <span class="co">// This allows us to call this executable with various command line arguments</span>
  <span class="co">// which get parsed in InitGoogleTest</span>
  ::testing::InitGoogleTest(&amp;argc, argv);
  <span class="kw">return</span> RUN_ALL_TESTS();
}</code></pre></div>
<p>Compiling and invoking <code>RePlexRuntime</code> generates the following output:</p>
<pre><code>./bin/Debug/RePlexRuntime
[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from SillyTest
[ RUN      ] SillyTest.IsFourPositive
[       OK ] SillyTest.IsFourPositive (0 ms)
[ RUN      ] SillyTest.IsFourTimesFourSixteen
[       OK ] SillyTest.IsFourTimesFourSixteen (0 ms)
[----------] 2 tests from SillyTest (0 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran. (0 ms total)
[  PASSED  ] 2 tests.</code></pre>
<p>Great! To learn the feature set of the Google test framework more completely, I recommend reading it’s documentation, starting with the <a href="https://github.com/google/googletest/blob/master/googletest/docs/Primer.md">primer</a>. As an exercise, I recommend recompiling the above with a failing test to see what happens before continuing. What we need is to provide a way for the tests to emit code as text, recompile, and continue at runtime. To do this, we’ll author a fixture class.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// runtime/Main.cpp</span>

<span class="ot">#include &lt;RePlex.h&gt;</span>
<span class="ot">#include &lt;Test.h&gt;</span>
<span class="ot">#include &lt;cstdlib&gt;</span>
<span class="ot">#include &lt;fstream&gt;</span>
<span class="ot">#include &lt;gtest/gtest.h&gt;</span>

<span class="dt">const</span> <span class="dt">char</span>* g_Test_v1 =
  <span class="st">&quot;#include </span><span class="ch">\&quot;</span><span class="st">pub/Test.h</span><span class="ch">\&quot;\n</span><span class="st">&quot;</span>
  <span class="st">&quot;int bar = 3;</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;int foo(int x)</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;{</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;  return x + 5;</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;}&quot;</span>;

<span class="dt">const</span> <span class="dt">char</span>* g_Test_v2 =
  <span class="st">&quot;#include </span><span class="ch">\&quot;</span><span class="st">pub/Test.h</span><span class="ch">\&quot;\n</span><span class="st">&quot;</span>
  <span class="st">&quot;int bar = -2;</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;int foo(int x)</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;{</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;  return x - 5;</span><span class="ch">\n</span><span class="st">&quot;</span>
  <span class="st">&quot;}&quot;</span>;

<span class="kw">class</span> RePlexTest : <span class="kw">public</span> ::testing::Test
{
<span class="kw">public</span>:
  <span class="co">// Called automatically at the start of each test case.</span>
  <span class="kw">virtual</span> <span class="dt">void</span> SetUp()
  {
    WriteFile(<span class="st">&quot;test/Test.cpp&quot;</span>, g_Test_v1);
    Compile(<span class="dv">1</span>);
    TestModule::LoadLibrary();
  }

  <span class="co">// We&#39;ll invoke this function manually in the middle of each test case</span>
  <span class="dt">void</span> ChangeAndReload()
  {
    WriteFile(<span class="st">&quot;test/Test.cpp&quot;</span>, g_Test_v2);
    Compile(<span class="dv">2</span>);
    TestModule::ReloadLibrary();
  }

  <span class="co">// Called automatically at the end of each test case.</span>
  <span class="kw">virtual</span> <span class="dt">void</span> TearDown()
  {
    TestModule::UnloadLibrary();
    WriteFile(<span class="st">&quot;test/Test.cpp&quot;</span>, g_Test_v1);
    Compile(<span class="dv">1</span>);
  }

<span class="kw">private</span>:
  <span class="dt">void</span> WriteFile(<span class="dt">const</span> <span class="dt">char</span>* path, <span class="dt">const</span> <span class="dt">char</span>* text)
  {
    <span class="co">// Open an output filetream, deleting existing contents</span>
    std::ofstream out(path, std::ios_base::trunc | std::ios_base::out);
    out &lt;&lt; text;
  }

  <span class="dt">void</span> Compile(<span class="dt">int</span> version)
  {
    <span class="kw">if</span> (version == m_version)
    {
      <span class="kw">return</span>;
    }

    m_version = version;
    EXPECT_EQ(std::system(<span class="st">&quot;make&quot;</span>), <span class="dv">0</span>);

    <span class="co">// Super unfortunate sleep due to the result of make not being fully flushed</span>
    <span class="co">// by the time the command returns (there are more elegant ways to solve this)</span>
    sleep(<span class="dv">1</span>);
  }

  <span class="dt">int</span> m_version = <span class="dv">1</span>;
};</code></pre></div>
<p>The fixture class should be fairly self explanatory. There are three primary methods for setup, teardown, and reloading the library. We keep track of the currently loaded library in a member variable <code>m_version</code> so we avoid recompiling the library if the one we want is already loaded (note that <code>m_version</code> defaults to 1 at the beginning). We also have two versions of <code>Test.cpp</code> that we will write out and compile at runtime. You’ll have to change the function signatures of <code>Foo</code> in <code>Test.h</code> so things compile properly. To use the fixture, we use the <code>TEST_F</code> macro instead of the <code>TEST</code> macro like so:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">TEST_F(RePlexTest, VariableReload)
{
  EXPECT_EQ(TestModule::GetBar(), <span class="dv">3</span>);
  ChangeAndReload();
  EXPECT_EQ(TestModule::GetBar(), <span class="dv">-2</span>);
}

TEST_F(RePlexTest, FunctionReload)
{
  EXPECT_EQ(TestModule::Foo(<span class="dv">4</span>), <span class="dv">9</span>);
  ChangeAndReload();
  EXPECT_EQ(TestModule::Foo(<span class="dv">4</span>), <span class="dv">-1</span>);
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span>** argv)
{
  ::testing::InitGoogleTest(&amp;argc, argv);
  <span class="kw">return</span> RUN_ALL_TESTS();
}</code></pre></div>
<p>Running this will generate a fair bit of output due to the runtime compilation but we should have all our tests passing. A <em>bad</em> thing we did in order to make this work was the sleep in our <code>Compile</code> function. Even though the <code>system</code> call is synchronous, there is a race condition when reading the file from the disk which is being flushed by the <code>make</code> command. The sleep here is unfortunate because it makes the tests slower, and also makes the test non-deterministic. The proper way to implement these tests is to install a handler for a file change notification. The implementation of this will vary based on the platform, and is left as an exercise to the reader.</p>
<p>At this point, we might decide that the library is good enough for others to use. The only file a 3rd-party user would need to leverage our library is <code>RePlex.h</code> (in other words, this is a “header-only” library). Thus, distribution is just a matter of copying <code>RePlex.h</code> into the include path of the target project. If we had needed to export compiled code in the form of a static or shared library, we have two options. First, we may opt to compile the library for all the various combinations of OS and architecture (x86/x64/etc) we might support. This library would then be distributable as a binary file. Alternatively, we can simply publish the code with the Premake script we authored and let the end user compile the code themselves and link the result to their own library or executable. These are the two primary options at the moment, and sadly, no unified “package manager” has been authored in the C++ community (although the author of this article is very interested in efforts to do so).</p>
<h1 id="notes-on-writing-code">Notes on writing code</h1>
<p>Without getting into editor/IDE battles, I am posting below a survey of the various tools I use. If your favorite tool isn’t listed, it is either because I haven’t tried it, or have reason to use an alternative. This isn’t meant to be exhaustive or definitive. Rather it should be used as a starting point for someone just starting to experiment with the language.</p>
<ul>
<li>Microsoft Visual Studio 2015: The IDE has come quite a long way, and is by and large among the most fully featured IDEs in existence. The debugger, watch windows, conditional breakpoints, immediate window, peek windows, graphics debugger, and performance analyzers are tools I leverage frequently.</li>
<li>Xcode: For developing on OSX. It has a similar feature-set as VS and compiles using the Clang compiler instead (possibly better error messages, stricter warnings).</li>
<li>Eclipse: Open source IDE for use on Linux that I’ve used (disclaimer: on Linux I tend to fall back to text editors and command line debuggers)</li>
<li><a href="https://github.com/danmar/cppcheck">cppcheck</a>: A static analysis tool which can help you catch bugs</li>
<li><a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>: An Emacs distribution with batteries included that uses Vim modal editing as its default mode (this is going to make me popular /s).</li>
<li><a href="https://github.com/unittest-cpp/unittest-cpp">unittest-cpp</a>: A nice lightweight framework for authoring unit tests if you don’t need something as heavy duty as gtest.</li>
<li><a href="https://github.com/google/googletest">googletest</a>: The Google Test framework used in this article.</li>
<li><a href="https://premake.github.io/download.html">Premake</a>: Build configuration tool leveraged throughout this article (alternatives to consider include <a href="http://bazel.io/">bazel</a>, <a href="https://cmake.org/">CMake</a>, <a href="http://www.fastbuild.org/docs/home.html">FastBuild</a>, or <a href="http://www.scons.org/">Scons</a>). Meta-make systems like Premake and CMake have supplanted simple Makefiles for more complex projects, and I personally favor Premake due to its simplicity and modularized architecture (it also helps that it isn’t built on top of a strange DSL).</li>
<li>lldb/gdb: Command line debuggers for quick-and-dirty debugging if the code was compiled with Clang or GCC respectively</li>
<li><a href="http://clang.llvm.org/docs/ClangTools.html">Clang tools</a>: A suite of tools that should be part of any robust build pipeline including formatters, linters, static analysis, and more.</li>
<li><a href="http://en.cppreference.com/w/">cppreference</a>: Invaluable online reference for the C and C++ language and standard library</li>
</ul>
<p>There is also an entire gamut of profilers, heap analyzers, leak detectors, and more which vary based on operating system and task, which I will leave for perhaps another time. My recommendation regarding tools is, pick an IDE and learn it very well (seriously!). Your skills will likely translate to other IDEs. It is a little difficult to recommend using only an editor (unless you have access to a plethora of editor scripts and features) when programming in C++, primarily because on-the-fly static analysis can save a lot of time by detecting compile errors early (e.g. missing symbols, type mismatches, const-correctness violations, etc). In addition, debugging runtime problems like thread deadlocking, memory stomping, and the like are a bit tricky without a robust debugger. Other languages might do away with these types of problems, but they won’t offer as much control either, so it’s a two-way street.</p>
<h1 id="the-wrap-up">The wrap up</h1>
<p>At this point, we have a project that, while not necessarily in its final form, sufficiently accomplishes what we set out to do. We also made three inter-dependent modules, with one providing a shared interface to the other two, and configured it so that the code could be compiled on any platform (with some tweaking). We optimized and streamlined the code a little bit using some new language facilities to make the code faster and less error-prone. Finally, we also used some functionality provided directly by the operating system, and potentially learned something about code gets compiled, loaded, and executed. If you would like to compile the code and run it yourself or make modifications, please visit the project <a href="https://github.com/PlexChat/RePlex">github page</a>. This was intended to be an educational project, but improvements are welcome!</p>
<p>If you are a newcomer to the language, you will find that C++, being a fully multiparadigm language, can be unfriendly at first but is ultimately unopinionated with regards to how you wish to interact with the hardware. With the advent of C++11 and C++14 (both of which are supported by all major compilers), there are now better and easier-to-use abstractions than ever before. Old-timers of the language, stand to improve the style and understandability of their code without sacrificing power. New users will find the language much more accessible compared to previous attempts to learn the language. I recommend the <strong>C++ Primer</strong> (Lippman, Lajoie, Moo), <strong>Effective Modern C++</strong> (Meyers), and <strong>Programming: Principles and Practice Using C++</strong> (Stroustroup), all in their latest incarnations for studying the language.</p>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/cpp/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Jeremy Ong</h3>
    <h4>C++</h4>
    <h3><small> CTO and cofounder of PlexChat</small></h3>
    <p>Jeremy is a full stack engineer, currently working on a <a href='http://plexchat.com'>company</a> specializing in cross-platform real-time coordination and communication. He is a programming language and paradigm polyglot, with professional experience ranging from distributed systems and network protocols, to game engines and renderers for next-gen game consoles.</p>
    <a class="btn btn-primary" href="/posts/cpp/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Erlang</title>
    <link href="http://www.howistart.org/posts/erlang/1/index.html" />
    <id>http://www.howistart.org/posts/erlang/1/index.html</id>
    <published>2015-06-22T00:00:00Z</published>
    <updated>2015-06-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Erlang <small>with Fred Hebert</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <h2 id="intro">Intro</h2>
<p>Erlang releases are a bit like magnets. Everyone who thinks about them shares the same thought: f**king releases, how do they work?</p>
<p>Fortunately, since the years of Emakefiles, reltool and systools, the Erlang community has stood up and improved its tooling continuously.</p>
<p>Rebar has been improving non-stop and keeps getting better for many functions. The newest generation, Rebar3, tries to provide an end-to-end experience to building Erlang projects.</p>
<p>Along with <a href="https://www.erlang-solutions.com/downloads">installing Erlang</a> (version R16B03-1 at least), getting a hold of Rebar3 is all you’re gonna need.</p>
<p>For rebar, just <a href="http://www.rebar3.org/v3.0/docs/getting-started">download it and follow the instructions</a>. Rebar3 will basically generate a self-executable that you can store in your repository, or install globally on your computer. This tutorial expects that you have installed it in your system and made it available in your <code>$PATH</code>.</p>
<p>Once they’re all installed somewhere in your system, arm yourself with the text editor or IDE of your choice (mine is Vim, because I’m a terrible person) and get ready to write a few things.</p>
<h2 id="my-environment">My Environment</h2>
<div class="figure">
<img src="/posts/erlang/1/images/1/env.png" />

</div>
<p>Despite you being free to develop on whatever you want, I’m gonna go through whatever my setup is.</p>
<p>I use zsh with <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, using a <a href="https://gist.github.com/ferd/9905862">custom theme</a> (depends on <a href="https://bitbucket.org/sjl/hg-prompt/src">hg-prompt</a> as a script), and stuck in vi-mode, because vim vim vim.</p>
<p>For vim itself, to work with Erlang, I use these two lines in my .vimrc file:</p>
<pre class="viml"><code>autocmd BufRead,BufNewFile *.erl,*.es.*.hrl,*.yaws,*.xrl set expandtab
au BufNewFile,BufRead *.erl,*.es,*.hrl,*.yaws,*.xrl setf erlang</code></pre>
<p>And I depend on these two plugins:</p>
<ol style="list-style-type: decimal">
<li><a href="https://github.com/jimenezrick/vimerl">vimerl</a></li>
<li><a href="https://github.com/edkolev/erlang-motions.vim">erlang-motions</a></li>
</ol>
<p>I don’t use a lot of material outside of that, and the OS will tend to be my IDE – for projects that I tend to work on a lot, I will use tmux scripts (see <a href="http://blog.htbaa.com/news/tmux-scripting">this blog post for an example</a>) – to get everything going early.</p>
<h2 id="the-project">The Project</h2>
<p>To avoid the usual Hello World stuff, this tutorial will use a somewhat more fun application to get up and running from a basic Erlang app that can be run within a module, to a proper OTP library that can be included by other projects, to a release than can be self-executing and distributed to client’s computer, or on a server.</p>
<p>Our project will be the replication of one of the most well-known software programs in popular history, used in life-critical situations: Homer Simpson’s console in the episode where he’s so fat he can work at home.</p>
<div class="figure">
<img src="/posts/erlang/1/images/1/homer-computer.gif" />

</div>
<p>From this episode we can infer the following about the software:</p>
<ul>
<li>When the program boots, it asks you to press any key.</li>
<li>The program will ask you questions that can be answered by <code>yes/no</code>, but also <code>Y/N</code> or <code>y/n</code></li>
<li>Most questions can be turned into commands. Each assertion is equivalent to answering a given question positively. For example, <code>Vent radioactive gas? Yes/No</code> can be turned into the <code>Vent gas</code> command.</li>
<li>Nothing should go wrong if you keep pressing <code>Y</code> all the time</li>
<li>After a given delay, a new question is asked</li>
<li>Too many times without venting radioactive gas risks exploding everything</li>
<li>Some behaviours aren’t defined by the TV show, so we go somewhat anyway we feel like</li>
</ul>
<p>Out of this, a finite-state machine can be created. The one that follows explains what I understood as possible, but you’ll notice I’m not really good at having a consistent notation for events, states, and so on:</p>
<pre><code>                [press any key]
                       |
                 (key pressed)
                       |
             [check core temperature (first)]
                 \________,________/
                          |
                       (yes/no)
                          |
             [venting radioactive gases (first)]
                |                   |
              (yes)      ,-&lt;-,     (no)
                |        |   |      |
       [gas blows away crop] |  [venting prevents explosions]
                |            |      |           |
                |            &#39;--&lt;-(yes)       (no)
                \                              /
                 \______________,_____________/
                                V
                                |
                       [wait for command]&lt;--------,
                            /       \             |
                      (get data)   (timeout)      |
                           |         |            |
                           |     [ask question]   |
                           |        /      \      |
                           |    (Yes)     (No)    |
                           |     /          |     |
                           +----&#39;           &#39;-----+
                           |                      |
                          [show result] --&gt;-------&#39;</code></pre>
<p>Based on this, we’ll be able to draw up a first prototype with all the required state transitions. I’ve also looked for transcripts of the show and extracted the following questions and consequences:</p>
<ol style="list-style-type: decimal">
<li>Check core temperature. yes/no:</li>
</ol>
<ul>
<li><code>yes</code>: Core temperature normal.</li>
<li><code>no</code>: –</li>
</ul>
<ol start="2" style="list-style-type: decimal">
<li>Vent radioactive gas?</li>
</ol>
<ul>
<li><code>yes</code>: *gas blows away corn crop*</li>
<li><code>no</code>: venting prevents explosion (allow <code>yes</code>, show only the first time?)</li>
</ul>
<ol start="3" style="list-style-type: decimal">
<li>Sound alertness horn?</li>
</ol>
<ul>
<li><code>yes</code>: *horn sounds in the distance*</li>
<li><code>no</code>: –</li>
</ul>
<ol start="4" style="list-style-type: decimal">
<li>Decalcify calcium ducts?</li>
</ol>
<ul>
<li><code>yes</code>: –</li>
<li><code>no</code>: –</li>
</ul>
<ol start="5" style="list-style-type: decimal">
<li>Special case: after denying venting too many times, the valve must be disabled manually.</li>
</ol>
<p>The simplest way to write a basic FSM for this one is to use a bunch of function calls. Given Erlang has last call optimization (a call that happens as a return value does not leave a stack trace, and therefore can happen infinitely many times), this is more than adequate.</p>
<p>The sequence of states <code>a -&gt; b -&gt; c</code> can be programmed as:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">a()</span> <span class="kw">-&gt;</span>
    <span class="fu">b().</span>

<span class="fu">b()</span> <span class="kw">-&gt;</span>
    <span class="fu">c().</span>

<span class="fu">c()</span> <span class="kw">-&gt;</span>
    <span class="ch">done</span><span class="fu">.</span></code></pre></div>
<p>Of course, there’s going to be more data in our case.</p>
<h2 id="the-prototype">The Prototype</h2>
<p>Our glorious application will be called ‘muumuu’. Whenever I don’t exactly know where I’m going, I decide to prototype stuff. And here I stress the importance of <em>prototype</em>. Despite this fact, it will often end up being in production, but yeah – that’s to be avoided.</p>
<p>I decide to start with the basic stuff to prototype, state transitions. I go for them in a fairly simple manner, top-down:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="kw">-module</span><span class="fu">(</span><span class="ch">muumuu_fsm</span><span class="fu">).</span>
<span class="kw">-export</span><span class="fu">([</span><span class="ch">start</span><span class="kw">/</span><span class="dv">0</span><span class="fu">]).</span>

<span class="kw">-define</span><span class="fu">(</span><span class="dt">MAX_NO_VENT</span><span class="fu">,</span> <span class="dv">5</span><span class="fu">).</span>

<span class="fu">start()</span> <span class="kw">-&gt;</span>
    <span class="co">%% Seed PRNG</span>
    <span class="kw">&lt;&lt;</span><span class="dt">A</span><span class="fu">:</span><span class="dv">32</span><span class="fu">,</span> <span class="dt">B</span><span class="fu">:</span><span class="dv">32</span><span class="fu">,</span> <span class="dt">C</span><span class="fu">:</span><span class="dv">32</span><span class="kw">&gt;&gt;</span> <span class="kw">=</span> <span class="fu">crypto:rand_bytes(</span><span class="dv">12</span><span class="fu">),</span>
    <span class="fu">random:seed(</span><span class="dt">A</span><span class="fu">,</span><span class="dt">B</span><span class="fu">,</span><span class="dt">C</span><span class="fu">),</span>
    <span class="fu">wait_any_key().</span>


<span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="co">%%% States and Transitions %%%</span>
<span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="fu">wait_any_key()</span> <span class="kw">-&gt;</span>
    <span class="fu">io:get_line(</span><span class="st">&quot;To Start, Press Any Key.\n&gt; &quot;</span><span class="fu">),</span>
    <span class="fu">first_core_check().</span>

<span class="fu">first_core_check()</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">option(</span><span class="st">&quot;Check core temperature?&quot;</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">yes</span> <span class="kw">-&gt;</span> <span class="fu">core_temperature();</span>
        <span class="ch">no</span> <span class="kw">-&gt;</span> <span class="fu">noop()</span>
    <span class="kw">end</span><span class="fu">,</span>
    <span class="fu">first_gas_vent().</span>

<span class="fu">first_gas_vent()</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">option(</span><span class="st">&quot;Vent radioactive gas?&quot;</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">yes</span> <span class="kw">-&gt;</span> <span class="fu">blow_crops_away();</span>
        <span class="ch">no</span> <span class="kw">-&gt;</span> <span class="fu">venting_prevents_explosions()</span>
    <span class="kw">end</span><span class="fu">,</span>
    <span class="fu">wait_for_command().</span>

<span class="fu">wait_for_command()</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">wait_cmd(</span><span class="dv">10000</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">timeout</span> <span class="kw">-&gt;</span>
            <span class="fu">{</span><span class="dt">Opt</span><span class="fu">,</span> <span class="dt">Yes</span><span class="fu">,</span> <span class="dt">No</span><span class="fu">}</span> <span class="kw">=</span> <span class="fu">random_option(),</span>
            <span class="kw">case</span> <span class="fu">option(</span><span class="dt">Opt</span><span class="fu">)</span> <span class="kw">of</span>
                <span class="ch">yes</span> <span class="kw">-&gt;</span> <span class="dt">Yes</span><span class="fu">();</span>
                <span class="ch">no</span> <span class="kw">-&gt;</span> <span class="dt">No</span><span class="fu">()</span>
            <span class="kw">end</span><span class="fu">;</span>
        <span class="dt">Cmd</span> <span class="kw">-&gt;</span>
            <span class="kw">case</span> <span class="fu">match_option(</span><span class="dt">Cmd</span><span class="fu">)</span> <span class="kw">of</span>
                <span class="fu">{</span><span class="dt">_</span><span class="fu">,</span> <span class="dt">Yes</span><span class="fu">,</span> <span class="dt">_</span><span class="fu">}</span> <span class="kw">-&gt;</span> <span class="dt">Yes</span><span class="fu">();</span>
                <span class="dt">_</span> <span class="kw">-&gt;</span> <span class="ch">noop</span>
            <span class="kw">end</span>
    <span class="kw">end</span><span class="fu">,</span>
    <span class="fu">wait_for_command().</span></code></pre></div>
<p>In this bit of code, we can see our 4 main states:</p>
<ol style="list-style-type: decimal">
<li><code>wait_any_key</code></li>
<li><code>first_core_check</code></li>
<li><code>first_gas_event</code></li>
<li><code>wait_for_command</code></li>
</ol>
<p>The rest of the code is more or less going to be events and input management to check the transitions:</p>
<ul>
<li>printing questions and getting responses (<code>option/1</code>)</li>
<li>eventually waiting for a command (<code>wait_cmd/1</code> and <code>match_option/1</code>)</li>
<li>or, if it takes too long, generate an option randomly (<code>random_option/1</code>)</li>
</ul>
<p>You can look at the code, find whatever you want about it disgusting. So that’s the general idea I want in the code. Time to add all that option management stuff:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="co">%%% Options and Response Handling %%%</span>
<span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="fu">option(</span><span class="dt">Prompt</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">show_option(</span><span class="dt">Prompt</span><span class="fu">),</span>
    <span class="dt">Data</span> <span class="kw">=</span> <span class="fu">io:get_line(</span><span class="st">&quot;&quot;</span><span class="fu">),</span>
    <span class="kw">case</span> <span class="fu">iolist_to_binary(</span><span class="dt">Data</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="kw">&lt;&lt;</span><span class="st">&quot;Y&quot;</span><span class="fu">,</span> <span class="dt">_</span><span class="kw">/</span><span class="ch">binary</span><span class="kw">&gt;&gt;</span> <span class="kw">-&gt;</span> <span class="ch">yes</span><span class="fu">;</span>
        <span class="kw">&lt;&lt;</span><span class="st">&quot;y&quot;</span><span class="fu">,</span> <span class="dt">_</span><span class="kw">/</span><span class="ch">binary</span><span class="kw">&gt;&gt;</span> <span class="kw">-&gt;</span> <span class="ch">yes</span><span class="fu">;</span>
        <span class="kw">&lt;&lt;</span><span class="st">&quot;N&quot;</span><span class="fu">,</span> <span class="dt">_</span><span class="kw">/</span><span class="ch">binary</span><span class="kw">&gt;&gt;</span> <span class="kw">-&gt;</span> <span class="ch">no</span><span class="fu">;</span>
        <span class="kw">&lt;&lt;</span><span class="st">&quot;n&quot;</span><span class="fu">,</span> <span class="dt">_</span><span class="kw">/</span><span class="ch">binary</span><span class="kw">&gt;&gt;</span> <span class="kw">-&gt;</span> <span class="ch">no</span><span class="fu">;</span>
        <span class="dt">_</span> <span class="kw">-&gt;</span> <span class="ch">ambiguous</span>
    <span class="kw">end</span><span class="fu">.</span>

<span class="fu">show_option(</span><span class="dt">Str</span><span class="fu">)</span> <span class="kw">-&gt;</span> <span class="fu">io:format(</span><span class="st">&quot;~s (Y/N)~n&gt; &quot;</span><span class="fu">,</span> <span class="fu">[</span><span class="dt">Str</span><span class="fu">]).</span>

<span class="fu">wait_cmd(</span><span class="dt">Timeout</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="dt">Parent</span> <span class="kw">=</span> <span class="fu">self(),</span>
    <span class="dt">Pid</span> <span class="kw">=</span> <span class="fu">spawn(</span><span class="kw">fun</span><span class="fu">()</span> <span class="kw">-&gt;</span> <span class="dt">Parent</span> <span class="kw">!</span> <span class="fu">io:get_line(</span><span class="st">&quot;&quot;</span><span class="fu">)</span> <span class="kw">end</span><span class="fu">),</span>
    <span class="kw">receive</span>
        <span class="dt">Data</span> <span class="kw">-&gt;</span> <span class="dt">Data</span>
    <span class="kw">after</span> <span class="dt">Timeout</span> <span class="kw">-&gt;</span>
        <span class="fu">exit(</span><span class="dt">Pid</span><span class="fu">,</span> <span class="ch">kill</span><span class="fu">),</span>
        <span class="ch">timeout</span>
    <span class="kw">end</span><span class="fu">.</span>

<span class="fu">random_option()</span> <span class="kw">-&gt;</span>
    <span class="dt">Pos</span> <span class="kw">=</span> <span class="fu">random:uniform(tuple_size(opts())),</span>
    <span class="fu">{</span><span class="dt">_</span><span class="fu">,</span> <span class="dt">Val</span><span class="fu">}</span> <span class="kw">=</span> <span class="fu">element(</span><span class="dt">Pos</span><span class="fu">,</span> <span class="fu">opts()),</span>
    <span class="dt">Val</span><span class="fu">.</span>

<span class="fu">match_option(</span><span class="dt">Data</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">[</span><span class="dt">Vals</span> <span class="fu">||</span> <span class="fu">{</span><span class="dt">Pattern</span><span class="fu">,</span> <span class="dt">Vals</span><span class="fu">}</span> <span class="kw">&lt;-</span> <span class="fu">tuple_to_list(opts()),</span>
                  <span class="ch">nomatch</span> <span class="kw">=/=</span> <span class="fu">re:run(</span><span class="dt">Data</span><span class="fu">,</span> <span class="dt">Pattern</span><span class="fu">,</span> <span class="fu">[</span><span class="ch">caseless</span><span class="fu">])]</span> <span class="kw">of</span>
        <span class="fu">[</span><span class="dt">Opt</span><span class="fu">|</span><span class="dt">_</span><span class="fu">]</span> <span class="kw">-&gt;</span> <span class="dt">Opt</span><span class="fu">;</span>
        <span class="fu">[]</span> <span class="kw">-&gt;</span> <span class="ch">invalid_opt</span>
    <span class="kw">end</span><span class="fu">.</span></code></pre></div>
<p>Cool. Not fantastic looking yet. Basically, an option will only fetch a line of text entered by the user, look at the first response, and return what it is. Showing the options just wraps things up so they look like a prompt.</p>
<p>Interestingly enough, the command has to be waited for in a different process. The problem with this it that Erlang’s standard library doesn’t support a timeout mode for <code>io</code> operations, which would tell us “wait 10 seconds for input or quit”. Therefore, there is a need to move this to a process.</p>
<p>The rest relies on an elusive <code>opts()</code> function that apparently returns all questions and options offered to the user:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="co">%%% Defining Options/Events %%%</span>
<span class="co">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="fu">opts()</span> <span class="kw">-&gt;</span>
    <span class="fu">{{</span><span class="st">&quot;(check|core|temp)&quot;</span><span class="fu">,</span>
      <span class="fu">{</span><span class="st">&quot;Check core temperature?&quot;</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">core_temperature</span><span class="kw">/</span><span class="dv">0</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">noop</span><span class="kw">/</span><span class="dv">0</span><span class="fu">}},</span>
     <span class="fu">{</span><span class="st">&quot;(vent|rad|gas)&quot;</span><span class="fu">,</span>
      <span class="fu">{</span><span class="st">&quot;Vent radioactive gas?&quot;</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">vent_gas</span><span class="kw">/</span><span class="dv">0</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">no_venting</span><span class="kw">/</span><span class="dv">0</span><span class="fu">}},</span>
     <span class="fu">{</span><span class="st">&quot;(sound|alert|horn)&quot;</span><span class="fu">,</span>
      <span class="fu">{</span><span class="st">&quot;Sound alertness horn?&quot;</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">sound_horn</span><span class="kw">/</span><span class="dv">0</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">noop</span><span class="kw">/</span><span class="dv">0</span><span class="fu">}},</span>
     <span class="fu">{</span><span class="st">&quot;(calc|duct)&quot;</span><span class="fu">,</span>
      <span class="fu">{</span><span class="st">&quot;Decalcify calcium ducts?&quot;</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">noop</span><span class="kw">/</span><span class="dv">0</span><span class="fu">,</span>
       <span class="kw">fun</span> <span class="ch">noop</span><span class="kw">/</span><span class="dv">0</span><span class="fu">}}}.</span></code></pre></div>
<p>This basically is a tuple (I use a tuple because it makes random selection with a fixed position more efficient) of all questions, positive and negative response and consequences, paired up with a regular expression that represents fuzzy matching – for example, someone typing it <code>check temperature</code> should match <code>Check core temperature?</code> as a question, and return both options. The code back in <code>wait_for_command/0</code> will only execute the <code>core_temperature/0</code> function.</p>
<p>Finally, all actions and consequences can be implemented:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">noop()</span> <span class="kw">-&gt;</span> <span class="ch">ok</span><span class="fu">.</span>

<span class="fu">venting_prevents_explosions()</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">option(</span><span class="st">&quot;Venting prevents explosion.&quot;</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">yes</span> <span class="kw">-&gt;</span> <span class="fu">blow_crops_away();</span>
        <span class="ch">no</span> <span class="kw">-&gt;</span> <span class="fu">noop()</span>
    <span class="kw">end</span><span class="fu">.</span>

<span class="fu">core_temperature()</span> <span class="kw">-&gt;</span> <span class="fu">io:format(</span><span class="st">&quot;Core temperature normal.~n&quot;</span><span class="fu">).</span>

<span class="fu">blow_crops_away()</span> <span class="kw">-&gt;</span> <span class="fu">io:format(</span><span class="st">&quot;*Gas blows away corn crop*~n&quot;</span><span class="fu">).</span>

<span class="fu">sound_horn()</span> <span class="kw">-&gt;</span> <span class="fu">io:format(</span><span class="st">&quot;*horn sounds in the distance*~n&quot;</span><span class="fu">).</span>

<span class="fu">pressure_too_high()</span> <span class="kw">-&gt;</span> <span class="fu">io:format(</span><span class="st">&quot;Pressure too high. Tank must be shut down manually.~n&quot;</span><span class="fu">).</span>

<span class="fu">vent_gas()</span> <span class="kw">-&gt;</span>
    <span class="co">%% After ?MAX_NO_VENT, pressure has to be shut down</span>
    <span class="co">%% manually -- unsupported in this here program!</span>
    <span class="kw">case</span> <span class="fu">get(</span><span class="ch">missed</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="fu">?</span><span class="dt">MAX_NO_VENT</span> <span class="kw">-&gt;</span>
            <span class="fu">pressure_too_high();</span>
        <span class="dt">_</span> <span class="kw">-&gt;</span>
            <span class="fu">put(</span><span class="ch">missed</span><span class="fu">,</span> <span class="dv">0</span><span class="fu">),</span>
            <span class="fu">blow_crops_away()</span>
    <span class="kw">end</span><span class="fu">.</span>

<span class="fu">no_venting()</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">get(</span><span class="ch">missed</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">undefined</span> <span class="kw">-&gt;</span> <span class="fu">put(</span><span class="ch">missed</span><span class="fu">,</span> <span class="dv">1</span><span class="fu">);</span>
        <span class="dt">N</span> <span class="kw">-&gt;</span> <span class="fu">put(</span><span class="ch">missed</span><span class="fu">,</span> <span class="dt">N</span><span class="kw">+</span><span class="dv">1</span><span class="fu">)</span>
    <span class="kw">end</span><span class="fu">.</span></code></pre></div>
<p>Here the two last functions implement the special last requirement: after denying venting too many times, the valve must be disabled manually.</p>
<p>Here we use a dirty ugly counter for prototyping’s sake. In fact I had forgotten about that requirement at the time and just bolted it on that way. The prototype helped figure that requirement out, and the final version can now be designed with this in mind.</p>
<p>You can run the code and try it from a shell:</p>
<pre><code>λ → erlc src/muumuu_fsm.erl &amp;&amp; erl -s muumuu_fsm -noshell
To Start, Press Any Key.
&gt; .
Check core temperature? (Y/N)
&gt; N
Vent radioactive gas? (Y/N)
&gt; No
Venting prevents explosion. (Y/N)
&gt; yes
*Gas blows away corn crop*
Sound alertness horn? (Y/N)
&gt; Y
*horn sounds in the distance*</code></pre>
<p>That works. Using <code>-s &lt;module&gt;</code> runs the <code>start/0</code> function from that module, and using <code>-noshell</code> makes it so that the Erlang VM won’t fight with all the <code>io</code> calls I’m doing for user input ownership.</p>
<p>Sadly, the implementation is kind of ugly and shouldn’t go in production.</p>
<div class="figure">
<img src="/posts/erlang/1/images/1/muumuu.gif" />

</div>
<h2 id="making-it-a-library">Making it a library</h2>
<p>There are two ways to make something reach production: distributing yourself, or distributing it as a library other Erlang developers can use.</p>
<p>The latter can be a prerequisite for the former, so we’re going to start there. By default, everyone using Erlang in the open source community uses <a href="http://learnyousomeerlang.com/building-otp-applications">OTP applications</a>.</p>
<p>OTP is kind of often treated as a super advanced topic, so what I’m gonna show here is how to take any non-OTP compliant code and turn it into an OTP application. Fun fun.</p>
<p>First, the directory structure:</p>
<pre><code>src/
  - muumuu_fsm.erl</code></pre>
<p>That’s all you need in terms of structure if you have rebar3 installed in your system.</p>
<p>Add a file in <code>src/</code> called <code>muumuu.app.src</code>. This file is basically telling Erlang (and rebar3) what the library is:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">{</span><span class="ch">application</span><span class="fu">,</span> <span class="ch">muumuu</span><span class="fu">,</span> <span class="fu">[</span>
  <span class="fu">{</span><span class="ch">description</span><span class="fu">,</span> <span class="st">&quot;Too fat to go to the power plant app&quot;</span><span class="fu">},</span>
  <span class="fu">{</span><span class="ch">vsn</span><span class="fu">,</span> <span class="st">&quot;0.1.0&quot;</span><span class="fu">},</span>
  <span class="fu">{registered,</span> <span class="fu">[]},</span>
  <span class="fu">{</span><span class="ch">applications</span><span class="fu">,</span> <span class="fu">[</span><span class="ch">kernel</span><span class="fu">,</span> <span class="ch">stdlib</span><span class="fu">,</span> <span class="ch">crypto</span><span class="fu">]},</span>
  <span class="fu">{</span><span class="ch">mod</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">muumuu_app</span><span class="fu">,</span> <span class="fu">[]}},</span>
  <span class="fu">{</span><span class="ch">env</span><span class="fu">,</span> <span class="fu">[]}</span>
<span class="fu">]}.</span></code></pre></div>
<p>The <code>registered</code> entry specifies what processes are going to be globally registered on the node. In this case, none. The <code>applications</code> tuple is a list of all applications we depend on. All applications depend on both <code>kernel</code> and <code>stdlib</code>. These entries have to always be in there. On the other hand, <code>crypto</code> is optional to most apps, but we need it because we use it to seed our pseudo-random number generator in <code>start/0</code>.</p>
<p>The <code>env</code> tuple can contain <a href="http://erlang.org/doc/man/app.html">configuration values</a>, but we need none right now.</p>
<p>The other option considered here is <code>mod</code>. If your library requires no process to be started and you’re just shipping code around, you’re done. In our case however, we’re starting a process (or we want to), and therefore we specify an application module named <code>muumuu_app</code>. This module is also in <code>src/</code>:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="kw">-module</span><span class="fu">(</span><span class="ch">muumuu_app</span><span class="fu">).</span>
<span class="kw">-</span><span class="fu">behaviour(</span><span class="ch">application</span><span class="fu">).</span>
<span class="kw">-export</span><span class="fu">([</span><span class="ch">start</span><span class="kw">/</span><span class="dv">2</span><span class="fu">,</span> <span class="ch">stop</span><span class="kw">/</span><span class="dv">1</span><span class="fu">]).</span>

<span class="fu">start(</span><span class="dt">_Type</span><span class="fu">,</span> <span class="dt">_Args</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">muumuu_sup:start_link().</span>

<span class="fu">stop(</span><span class="dt">_</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="ch">ok</span><span class="fu">.</span></code></pre></div>
<p>That module is basically giving callbacks to the Erlang VM. See it a bit as the <code>main</code> function in C, except you also have to provide a <code>stop</code> function that will clean up once the process exits. In this case we need nothing.</p>
<p>What’s the <code>muumuu_sup</code> module? That’s the final step to be glued in OTP. OTP has a concept called <a href="http://learnyousomeerlang.com/supervisors"><code>supervisors</code></a>. Supervisors are in charge of checking OTP-compliant processes, to start them, stop them, and <a href="http://ferd.ca/it-s-about-the-guarantees.html">provide guarantees regarding their state</a>.</p>
<p>Unfortunately, our process isn’t OTP-compliant. The guys at Ericsson have long ago hit that problem and developed a <a href="http://www.erlang.org/doc/man/supervisor_bridge.html">supervisor bridge</a>, which basically acts as a wrapper. This is what we could use if I were not the kind of person to want my OTP processes done correctly everywhere.</p>
<p>For the time being, I’ll stick with a regular supervisor and will rewrite the FSM right after:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="kw">-module</span><span class="fu">(</span><span class="ch">muumuu_sup</span><span class="fu">).</span>
<span class="kw">-</span><span class="fu">behaviour(</span><span class="ch">supervisor</span><span class="fu">).</span>

<span class="kw">-export</span><span class="fu">([</span><span class="ch">start_link</span><span class="kw">/</span><span class="dv">0</span><span class="fu">]).</span>
<span class="kw">-export</span><span class="fu">([</span><span class="ch">init</span><span class="kw">/</span><span class="dv">1</span><span class="fu">]).</span>

<span class="fu">start_link()</span> <span class="kw">-&gt;</span>
    <span class="fu">supervisor:start_link(?</span><span class="dt">MODULE</span><span class="fu">,</span> <span class="fu">[]).</span>

<span class="fu">init([])</span> <span class="kw">-&gt;</span>
    <span class="fu">{</span><span class="ch">ok</span><span class="fu">,</span> <span class="fu">{{</span><span class="ch">one_for_one</span><span class="fu">,</span> <span class="dv">1</span><span class="fu">,</span> <span class="dv">5</span><span class="fu">},</span>
          <span class="fu">[{</span><span class="ch">console</span><span class="fu">,</span>
            <span class="fu">{</span><span class="ch">muumuu_fsm</span><span class="fu">,</span> <span class="ch">start_link</span><span class="fu">,</span> <span class="fu">[]},</span>
            <span class="ch">permanent</span><span class="fu">,</span> <span class="dv">5000</span><span class="fu">,</span> <span class="ch">worker</span><span class="fu">,</span> <span class="fu">[</span><span class="ch">muumuu_fsm</span><span class="fu">]}]}}.</span></code></pre></div>
<p>This will start <code>muumuu_fsm</code> as a permanent worker that can die once every 5 seconds before the entire system crashes. I don’t have a good way to pick frequencies, but 1 in 5 seconds sounds like something reasonable for someone to mash keys in ways bad enough it causes errors.</p>
<p>So then comes the rewrite from prototype to <a href="http://learnyousomeerlang.com/finite-state-machines"><code>gen_fsm</code></a>. This is stuff that has been covered in multiple tutorials before, so I’m going to skip most of it. You can instead look at books and docs for <code>gen_fsm</code>, follow along the final module, <a href="https://github.com/ferd/howistart-erlang1-code/blob/master/library/src/muumuu_fsm.erl">muumuu_fsm.erl</a>, and see for yourself.</p>
<p>The biggest changes there, outside of providing the <code>gen_fsm</code> callbacks required by the OTP behavior, are related to the general information flow. Rather than being really direct sequences of functions doing whatever they want, the OTP version of the module becomes a lot more declarative.</p>
<p>We no longer enter a state function, ask a question, and wait for the response within the same context. The logic has moved so that an event in a state (say <code>first_gas_vent</code>) causes a question to be asked before transitioning to the state that will handle that response.</p>
<p>This doesn’t make the code particulalry harder to read, just different:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">init([])</span> <span class="kw">-&gt;</span>
    <span class="kw">&lt;&lt;</span><span class="dt">A</span><span class="fu">:</span><span class="dv">32</span><span class="fu">,</span> <span class="dt">B</span><span class="fu">:</span><span class="dv">32</span><span class="fu">,</span> <span class="dt">C</span><span class="fu">:</span><span class="dv">32</span><span class="kw">&gt;&gt;</span> <span class="kw">=</span> <span class="fu">crypto:rand_bytes(</span><span class="dv">12</span><span class="fu">),</span>
    <span class="fu">random:seed(</span><span class="dt">A</span><span class="fu">,</span><span class="dt">B</span><span class="fu">,</span><span class="dt">C</span><span class="fu">),</span>
    <span class="fu">{</span><span class="ch">ok</span><span class="fu">,</span> <span class="ch">wait_any_key</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="ch">wait_any_key</span><span class="fu">,</span> <span class="fu">#</span><span class="ch">state</span><span class="fu">{})}.</span>

<span class="co">%% [...]</span>

<span class="fu">wait_any_key(</span><span class="dt">_</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">{</span><span class="ch">next_state</span><span class="fu">,</span> <span class="ch">first_core_check</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="ch">first_core_check</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)}.</span>

<span class="fu">first_core_check(</span><span class="ch">no</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">{</span><span class="ch">next_state</span><span class="fu">,</span> <span class="ch">first_gas_vent</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="ch">first_gas_vent</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)};</span>
<span class="fu">first_core_check(</span><span class="ch">yes</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">show_core_temperature(),</span>
    <span class="fu">{</span><span class="ch">next_state</span><span class="fu">,</span> <span class="ch">first_gas_vent</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="ch">first_gas_vent</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)}.</span>

<span class="fu">first_gas_vent(</span><span class="ch">no</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="dt">StateName</span> <span class="kw">=</span> <span class="ch">venting_prevents_explosions</span><span class="fu">,</span>
    <span class="fu">{</span><span class="ch">next_state</span><span class="fu">,</span> <span class="dt">StateName</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="dt">StateName</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)};</span>
<span class="fu">first_gas_vent(</span><span class="ch">yes</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">show_blow_crops_away(),</span>
    <span class="fu">{</span><span class="ch">next_state</span><span class="fu">,</span> <span class="ch">wait_for_command</span><span class="fu">,</span> <span class="fu">prompt(</span><span class="ch">wait_for_command</span><span class="fu">,</span> <span class="dt">State</span><span class="fu">),</span> <span class="dv">10000</span><span class="fu">}.</span></code></pre></div>
<p>This form, along with the experience gained in the prototype, allows for simpler state management via the <code>State</code> variable, which allows us to be more transparent about our usage of venting limits, for example. We also instantly benefit from everything OTP gives us in terms of transparency: tracing, logging, statistics, and so on (see <a href="http://www.erlang.org/doc/man/sys.html">the <code>sys</code> module</a>)</p>
<p>With that code in place, we can compile and run the entire application:</p>
<pre><code>λ → rebar3 compile
===&gt; Verifying dependencies...
===&gt; Compiling muumuu</code></pre>
<p>With this compiled we can run it, with a funky command:</p>
<pre><code>λ →  erl -env ERL_LIBS _build/default/lib -eval &#39;application:ensure_all_started(muumuu).&#39; -noshell
To Start, Press Any Key.
&gt; any
Check core temperature? (Y/N)
&gt; y
Core temperature normal.
Vent radioactive gas? (Y/N)
&gt; y
*Gas blows away corn crop*</code></pre>
<p>That’s kind of an ugly command to run the app, but the app is now something other people can use to pull it within their own systems.</p>
<p>In order to run it ourselves and actually ship it to customers, we will need to build a release. In any other case, though, you may want to <a href="http://www.rebar3.org/v3.0/docs/publishing-packages">publish your library as a Hex package</a> with the help of the <a href="http://www.rebar3.org/v3.0/docs/using-available-plugins#hex-package-management">proper rebar3 plugin</a>.</p>
<div class="figure">
<img src="/posts/erlang/1/images/1/y-y-y.gif" />

</div>
<h2 id="releases">Releases</h2>
<p>The directory structure we’ve been using was for an application and turns out looking like:</p>
<pre><code>src/
ebin/</code></pre>
<p>At the simplest level. A release is basically a group of applications put together. For this reason, we’ll change the directory structure a bit:</p>
<pre><code>apps/
    - muumuu/
        - src/
        - ebin/
rebar.config</code></pre>
<p>All applications you need will go into <code>apps/</code>. Here I just moved <code>src/</code> to <code>apps/muumuu/</code>.</p>
<p>The rebar.config file looks like this:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">{</span><span class="ch">relx</span><span class="fu">,</span> <span class="fu">[</span>
    <span class="fu">{</span><span class="ch">release</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">muumuu</span><span class="fu">,</span> <span class="st">&quot;1.0.0&quot;</span><span class="fu">},</span>
     <span class="co">%% list of apps to include</span>
     <span class="fu">[</span><span class="ch">muumuu</span><span class="fu">]},</span>

    <span class="co">%% Don&#39;t ship an Erlang VM by default</span>
    <span class="fu">{</span><span class="ch">include_erts</span><span class="fu">,</span> <span class="ch">false</span><span class="fu">}</span>
<span class="fu">]}.</span>

<span class="fu">{</span><span class="ch">profiles</span><span class="fu">,</span> <span class="fu">[</span>
    <span class="co">%% called as `rebar3 as prod &lt;command&gt;`</span>
    <span class="fu">{</span><span class="ch">prod</span><span class="fu">,</span> <span class="fu">[</span>
        <span class="fu">{</span><span class="ch">relx</span><span class="fu">,</span> <span class="fu">[</span> <span class="co">% override relx specifically</span>
          <span class="fu">{</span><span class="ch">include_src</span><span class="fu">,</span> <span class="ch">false</span><span class="fu">},</span> <span class="co">% don&#39;t include source code</span>
          <span class="fu">{</span><span class="ch">include_erts</span><span class="fu">,</span> <span class="ch">true</span><span class="fu">}</span>  <span class="co">% include the VM in the release</span>
        <span class="fu">]}</span>
    <span class="fu">]}</span>
<span class="fu">]}.</span></code></pre></div>
<p>This basically just tells rebar3 what the release-building tool it includes (relx) should do to give us our release. The release will only include our custom Erlang code, and use the currently installed Erlang VM to run things rather than installing a fully self-contianed program. Then the magic happens:</p>
<pre><code>λ → rebar3 release
===&gt; Verifying dependencies...
===&gt; Compiling muumuu
===&gt; Starting relx build process ...
===&gt; Resolving OTP Applications from directories:
          /Users/ferd/code/self/howistart-erlang1-code/release/_build/default/lib
          /Users/ferd/code/self/howistart-erlang1-code/release/apps
          /Users/ferd/.kerl/builds/17.4/release_17.4/lib
===&gt; Resolved muumuu-1.0.0
===&gt; release successfully created!</code></pre>
<p>And a release is born! To run it:</p>
<pre><code>λ → ./_build/default/rel/muumuu/bin/muumuu -noshell
To Start, Press Any Key.
&gt;</code></pre>
<p>Pretty cool. This can now be shipped and distributed to people.</p>
<p>I want to make the release a bit fancier though. As you’ve just seen, we still need to put the <code>-noshell</code> by hand, which is totally unacceptable.</p>
<p>To fix this, add a <code>config/</code> repository, and I open the <code>vm.args</code> file in vim in there:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># only show the programmed prompt</span>
<span class="kw">-noshell</span>

<span class="co"># for remote access &amp; debugging</span>
<span class="kw">-name</span> nucular_plant@127.0.0.1

<span class="co"># not needed</span>
<span class="kw">-smp</span> disable
<span class="kw">+A</span> 1</code></pre></div>
<p>Arguments in there I merged into one. A good practice for any Erlang system is to give it a name, which will let you connect to it while it’s running. In this case I could go in and debug the console as the user is maintaining the powerplant.</p>
<p>The last arguments (<code>-smp disable +A 1</code>) are basically optimizations for this very app: they remove Erlang parallelism (I’m running a single active process for the thing, so why bother?) and removes the number of asynchronous threads for IO to a single one (for the same reason – one active process, why bother?).</p>
<p>In more serious apps, tweaking your VM options can be worthwhile, but outside of this text’s scope.</p>
<p>The rebar3 config file needs an update too:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">{</span><span class="ch">relx</span><span class="fu">,</span> <span class="fu">[</span>
    <span class="fu">{</span><span class="ch">release</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">muumuu</span><span class="fu">,</span> <span class="st">&quot;1.0.0&quot;</span><span class="fu">},</span>
     <span class="co">%% list of apps to include</span>
     <span class="fu">[</span><span class="ch">muumuu</span><span class="fu">]},</span>

    <span class="co">%% Don&#39;t ship an Erlang VM by default</span>
    <span class="fu">{</span><span class="ch">include_erts</span><span class="fu">,</span> <span class="ch">false</span><span class="fu">},</span>

    <span class="fu">{</span><span class="ch">vm_args</span><span class="fu">,</span> <span class="st">&quot;./config/vm.args&quot;</span><span class="fu">}</span>
<span class="fu">]}.</span>

<span class="fu">{</span><span class="ch">profiles</span><span class="fu">,</span> <span class="fu">[</span>
    <span class="co">%% called as `rebar3 as prod &lt;command&gt;`</span>
    <span class="fu">{</span><span class="ch">prod</span><span class="fu">,</span> <span class="fu">[</span>
        <span class="fu">{</span><span class="ch">relx</span><span class="fu">,</span> <span class="fu">[</span> <span class="co">% override relx specifically</span>
          <span class="fu">{</span><span class="ch">include_src</span><span class="fu">,</span> <span class="ch">false</span><span class="fu">},</span> <span class="co">% don&#39;t include source code</span>
          <span class="fu">{</span><span class="ch">include_erts</span><span class="fu">,</span> <span class="ch">true</span><span class="fu">}</span>  <span class="co">% include the VM in the release</span>
        <span class="fu">]}</span>
    <span class="fu">]}</span>
<span class="fu">]}.</span></code></pre></div>
<p>The last line above the profiles is the new one. Compile again and the arguments should implicitly be passed to the node:</p>
<pre><code>λ → rebar3 release
===&gt; Verifying dependencies...
===&gt; Compiling muumuu
===&gt; Starting relx build process ...
===&gt; Resolving OTP Applications from directories:
          /Users/ferd/code/self/howistart-erlang1-code/release/_build/default/lib
          /Users/ferd/code/self/howistart-erlang1-code/release/apps
          /Users/ferd/.kerl/builds/17.4/release_17.4/lib
          /Users/ferd/code/self/howistart-erlang1-code/release/_build/default/rel
===&gt; Resolved muumuu-1.0.0
===&gt; release successfully created!
λ → ./_build/default/rel/muumuu/bin/muumuu
To Start, Press Any Key.
&gt; &lt;Tab&gt;
Check core temperature? (Y/N)
&gt;</code></pre>
<p>Cool, everything works. I now have a binary executable I can link to from anywhere in the system and will require no magical arguments to work!</p>
<h2 id="tests">Tests</h2>
<p>As much as I like to try and get testing done ahead of time – it’s the only time it’s not super terrible and crappy – I often end up adding it after the fact when I know I’ll have to maintain it.</p>
<p>For this, each app should have its tests, so I’ll have to add a <code>test/</code> directory in <code>apps/muumuu/</code>.</p>
<p>My tool of choice is <a href="http://learnyousomeerlang.com/common-test-for-uncommon-tests">Common Test</a>, which while it is kind of full of annoying overheads for unit testing and is mostly useless for shell output (you gotta deal with HTML files), it scales fairly well for integration and system tests.</p>
<p>The test suite in there is going to be <code>muumuu_SUITE.erl</code>:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="kw">-module</span><span class="fu">(</span><span class="ch">muumuu_SUITE</span><span class="fu">).</span>
<span class="kw">-include</span>_lib<span class="fu">(</span><span class="st">&quot;common_test/include/ct.hrl&quot;</span><span class="fu">).</span>
<span class="kw">-</span><span class="fu">compile(</span><span class="ch">export_all</span><span class="fu">).</span>

<span class="co">%% Copy/pasting from the suite</span>
<span class="kw">-</span><span class="fu">record(</span><span class="ch">state</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">no_vent_count</span><span class="kw">=</span><span class="dv">0</span><span class="fu">,</span>
                <span class="ch">pid</span><span class="fu">,</span>
                <span class="ch">yes</span><span class="fu">,</span>
                <span class="ch">no</span><span class="fu">}).</span>

<span class="fu">all()</span> <span class="kw">-&gt;</span>
    <span class="fu">[</span><span class="ch">demo_session</span><span class="fu">].</span></code></pre></div>
<p>So at first I’m just gonna make one run-through test. Testing <code>muumuu</code> is going to be hard because it’s purely a side-effectful application.</p>
<p>Before going further, I’ll say that the trick to getting this working is to use <code>meck</code>, which is pretty much the best code-mocking application around.</p>
<p>Adding <code>meck</code> can be done by declaring <code>rebar.config</code> dependencies:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">{</span><span class="ch">profiles</span><span class="fu">,</span> <span class="fu">[</span>
    <span class="fu">{</span><span class="ch">test</span><span class="fu">,</span> <span class="fu">[</span>
        <span class="fu">{</span><span class="ch">deps</span><span class="fu">,</span> <span class="fu">[</span>
          <span class="fu">{</span><span class="ch">meck</span><span class="fu">,</span> <span class="st">&quot;0.8.2&quot;</span><span class="fu">}</span>
        <span class="fu">]}</span>
    <span class="fu">]},</span>
    <span class="co">%% called as `rebar3 as prod &lt;command&gt;`</span>
    <span class="fu">{</span><span class="ch">prod</span><span class="fu">,</span> <span class="fu">[</span>
        <span class="fu">...</span>
    <span class="fu">]}</span>
  <span class="fu">]}</span>
<span class="fu">]}.</span></code></pre></div>
<p>Note that rather than having a top-level <code>deps</code> entry as we usually would, we define this one to be into the <code>test</code> profile. This will allow the dependency to only be fetched and used when running tests, and to avoid bundling it when shipping the application.</p>
<p>Rebar3 pulls stuff from a package repository for this one (<a href="http://www.rebar3.org/v3.0/docs/dependencies">github dependencies</a> are also an option). Rebar3 will add it to a lock file when it fetches and compiles it later.</p>
<p>Now back to <code>muumuu_SUITE</code>. Time to set up the state:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">init_per_testcase(</span><span class="ch">demo_session</span><span class="fu">,</span> <span class="dt">Config</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">mock_io(),</span>
    <span class="fu">{</span><span class="ch">ok</span><span class="fu">,</span> <span class="dt">Pid</span><span class="fu">}</span> <span class="kw">=</span> <span class="fu">muumuu_fsm:start_link(),</span>
    <span class="fu">[{</span><span class="ch">pid</span><span class="fu">,</span> <span class="dt">Pid</span><span class="fu">}</span> <span class="fu">|</span> <span class="dt">Config</span><span class="fu">].</span>

<span class="fu">end_per_testcase(</span><span class="dt">_</span><span class="fu">,</span> <span class="dt">Config</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="fu">meck:unload(</span><span class="ch">io</span><span class="fu">),</span>
    <span class="dt">Pid</span> <span class="kw">=</span> <span class="fu">?config(</span><span class="ch">pid</span><span class="fu">,</span> <span class="dt">Config</span><span class="fu">),</span>
    <span class="fu">unlink(</span><span class="dt">Pid</span><span class="fu">),</span>
    <span class="fu">exit(</span><span class="dt">Pid</span><span class="fu">,</span> <span class="ch">shutdown</span><span class="fu">),</span>
    <span class="fu">wait_for_death(</span><span class="dt">Pid</span><span class="fu">).</span></code></pre></div>
<p>Mocking the <code>io</code> system is a fun way to basically take it and make it return messages we can look at. That all takes place in <code>mock_io()</code>, and after that’s in place, we start a <code>muumuu</code> instance directly (no application needed):</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">mock_io()</span> <span class="kw">-&gt;</span>
    <span class="co">%% For this one we mock the IO system so that instead of</span>
    <span class="co">%% printing messages and getting input to and from the user,</span>
    <span class="co">%% we instead have a message-passing interface that will</span>
    <span class="co">%% be inspectable.</span>
    <span class="co">%%</span>
    <span class="co">%% Note that because the `io` module is pre-compiled by the</span>
    <span class="co">%% VM, we have to &#39;unstick&#39; it first, and be careful to keep</span>
    <span class="co">%% it mocked as little as possible.</span>
    <span class="dt">Parent</span> <span class="kw">=</span> <span class="fu">self(),</span>
    <span class="fu">code:unstick_dir(filename:dirname(code:where_is_file(</span><span class="st">&quot;io.beam&quot;</span><span class="fu">))),</span>
    <span class="fu">meck:new(</span><span class="ch">io</span><span class="fu">,</span> <span class="fu">[</span><span class="ch">passthrough</span><span class="fu">,</span> <span class="ch">no_link</span><span class="fu">]),</span>
    <span class="fu">meck:expect(</span><span class="ch">io</span><span class="fu">,</span> <span class="ch">format</span><span class="fu">,</span> <span class="kw">fun</span><span class="fu">(</span><span class="dt">Str</span><span class="fu">)</span> <span class="kw">-&gt;</span>
        <span class="dt">Parent</span> <span class="kw">!</span> <span class="fu">{</span><span class="ch">out</span><span class="fu">,</span> <span class="dt">Str</span><span class="fu">},</span>
        <span class="ch">ok</span>
    <span class="kw">end</span><span class="fu">),</span>
    <span class="fu">meck:expect(</span><span class="ch">io</span><span class="fu">,</span> <span class="ch">format</span><span class="fu">,</span> <span class="kw">fun</span><span class="fu">(</span><span class="dt">Str</span><span class="fu">,</span> <span class="dt">Args</span><span class="fu">)</span> <span class="kw">-&gt;</span>
        <span class="dt">Parent</span> <span class="kw">!</span> <span class="fu">{</span><span class="ch">out</span><span class="fu">,</span> <span class="fu">io_lib:format(</span><span class="dt">Str</span><span class="fu">,</span><span class="dt">Args</span><span class="fu">)},</span>
        <span class="ch">ok</span>
    <span class="kw">end</span><span class="fu">),</span>
    <span class="fu">meck:expect(</span><span class="ch">io</span><span class="fu">,</span> <span class="ch">get_line</span><span class="fu">,</span> <span class="kw">fun</span><span class="fu">(</span><span class="dt">_Prompt</span><span class="fu">)</span> <span class="kw">-&gt;</span>
        <span class="dt">Parent</span> <span class="kw">!</span> <span class="fu">{</span><span class="ch">in</span><span class="fu">,</span> <span class="fu">self()},</span>
        <span class="kw">receive</span> <span class="fu">{</span><span class="dt">Parent</span><span class="fu">,</span> <span class="dt">In</span><span class="fu">}</span> <span class="kw">-&gt;</span> <span class="dt">In</span> <span class="kw">end</span>
    <span class="kw">end</span><span class="fu">).</span></code></pre></div>
<p>Ugly. The first step is unstickying the directory for Erlang code. Most modules don’t require that, only those in Erlang’s standard library. Unstickying allows to load new versions of code at run time, which <code>meck</code> dynamically does.</p>
<p>Here what I’m doing is mocking the functions <code>io:format/1</code>, <code>io:format/2</code> and <code>io:get_line/1</code> to send messages of the form <code>{in, Msg}</code> and <code>{out, Msg}</code> from input and output, respectively. <code>meck:unload(io)</code> will undo that.</p>
<p>We also had the <code>wait_for_death/1</code> call. I’m using these <em>everywhere</em> in tests. Timers are the enemy of good concurrent testing, and if you rely on a <code>timer:sleep(1000)</code> of some sort to make sure everything is clean, you’re doing it wrong.</p>
<p>Here the function polls to return ASAP, with a tiny sleep to not heat up your room too much via the CPU:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="fu">wait_for_death(</span><span class="dt">Pid</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="kw">case</span> <span class="fu">is_process_alive(</span><span class="dt">Pid</span><span class="fu">)</span> <span class="kw">of</span>
        <span class="ch">true</span> <span class="kw">-&gt;</span>
            <span class="fu">timer:sleep(</span><span class="dv">10</span><span class="fu">),</span>
            <span class="fu">wait_for_death(</span><span class="dt">Pid</span><span class="fu">);</span>
        <span class="ch">false</span> <span class="kw">-&gt;</span>
            <span class="ch">ok</span>
    <span class="kw">end</span><span class="fu">.</span></code></pre></div>
<p>With this done, I can start planning more for the test. This here is something I always want to write a library for, and maybe some day I will, but right now I re-do that crap by hand every time:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="co">%%%%%%%%%%%%%%%%%%</span>
<span class="co">%%% TEST CASES %%%</span>
<span class="co">%%%%%%%%%%%%%%%%%%</span>

<span class="co">%% Pressing a given key through the message-passing interface</span>
<span class="co">%% will yield expected output. There should be a prompt waiting</span>
<span class="co">%% for a key.</span>
<span class="co">%% All states can be cycled through using only Y/N answers.</span>
<span class="fu">demo_session(</span><span class="dt">Config</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="dt">Pid</span> <span class="kw">=</span> <span class="fu">?config(</span><span class="ch">pid</span><span class="fu">,</span> <span class="dt">Config</span><span class="fu">),</span>
    <span class="fu">out(</span><span class="st">&quot;press.*any.*key.*&gt;&quot;</span><span class="fu">),</span>
    <span class="fu">in(</span><span class="st">&quot;&lt;tab&gt;&quot;</span><span class="fu">),</span> <span class="co">% the characters shouldn&#39;t matter</span>
    <span class="fu">out(</span><span class="st">&quot;check.*core.*temp.*&gt;&quot;</span><span class="fu">),</span>
    <span class="fu">in(</span><span class="st">&quot;Y&quot;</span><span class="fu">),</span>
    <span class="fu">out(</span><span class="st">&quot;temperature.*normal&quot;</span><span class="fu">),</span>
    <span class="fu">out(</span><span class="st">&quot;vent.*radioactive.*gas.*&gt;&quot;</span><span class="fu">),</span>
    <span class="fu">in(</span><span class="st">&quot;no&quot;</span><span class="fu">),</span>
    <span class="fu">out(</span><span class="st">&quot;venting.*prevents.*explosion.*&gt;&quot;</span><span class="fu">),</span>
    <span class="fu">in(</span><span class="st">&quot;yES&quot;</span><span class="fu">),</span>
    <span class="fu">out(</span><span class="st">&quot;gas.*blows.*crop.*&quot;</span><span class="fu">),</span>
    <span class="fu">gen_fsm:send_event(</span><span class="dt">Pid</span><span class="fu">,</span> <span class="ch">timeout</span><span class="fu">),</span> <span class="co">% force a timeout faster</span>
    <span class="fu">out(</span><span class="st">&quot;.*Y/N.*&gt;&quot;</span><span class="fu">),</span> <span class="co">% some question</span>
    <span class="fu">in(</span><span class="st">&quot;No&quot;</span><span class="fu">),</span> <span class="co">% who cares</span>
    <span class="fu">in(</span><span class="st">&quot;vent gAs&quot;</span><span class="fu">),</span> <span class="co">% force a command</span>
    <span class="fu">out(</span><span class="st">&quot;gas.*blows.*crop.*&quot;</span><span class="fu">).</span></code></pre></div>
<p>I basically just write the test the way I want it to look like. I will start expecting messages that will match the regex <code>&quot;press.*any.*key.*&gt;&quot;</code> being output, after which I’ll insert <code>&lt;tab&gt;</code>. Rinse and repeat.</p>
<p>Here, my desire is pretty much to turn the interactions I’d write in the shell into a bunch of function calls and matches.</p>
<p>That’s why I planned having a message-passing interface. I can now write functions to wrap that functionality:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="co">%%%%%%%%%%%%%%%</span>
<span class="co">%%% HELPERS %%%</span>
<span class="co">%%%%%%%%%%%%%%%</span>

<span class="fu">in(</span><span class="dt">Input</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="kw">receive</span>
        <span class="fu">{</span><span class="ch">in</span><span class="fu">,</span> <span class="dt">Pid</span><span class="fu">}</span> <span class="kw">-&gt;</span> <span class="dt">Pid</span> <span class="kw">!</span> <span class="fu">{self(),</span> <span class="dt">Input</span><span class="fu">}</span>
    <span class="kw">after</span> <span class="dv">1000</span> <span class="kw">-&gt;</span>
        <span class="fu">ct:pal(</span><span class="st">&quot;MBOX: ~p&quot;</span><span class="fu">,</span> <span class="fu">[process_info(self(),</span> <span class="ch">messages</span><span class="fu">)]),</span>
        <span class="fu">error({</span><span class="ch">too_long</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">in</span><span class="fu">,</span> <span class="dt">Input</span><span class="fu">}})</span>
    <span class="kw">end</span><span class="fu">.</span></code></pre></div>
<p>If we look back into the mocked function, the mocked function sends us <code>{in, ProcessThatWaitsForInput}</code>. We take the <code>Input</code> argument, and send it back to the mocked function (which runs in its own process).</p>
<p>If we never receive the <code>in</code> message, we crash, but printing the debugging information. Interestingly here the function I use is <code>ct:pal</code>. It works exactly like <code>io:format</code>, except:</p>
<ol style="list-style-type: decimal">
<li>It outputs to both the shell and HTML logs for Common Test</li>
<li>It’s not gonna be used in production systems and it’s surely never going to be mocked (unlike <code>io</code>).</li>
</ol>
<p>The <code>out/1</code> helper is slightly more complex:</p>
<div class="sourceCode"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span class="co">%% fuzzily match the input string, waiting 1s at most</span>
<span class="fu">out(</span><span class="dt">Expected</span><span class="fu">)</span> <span class="kw">-&gt;</span>
    <span class="kw">receive</span>
        <span class="fu">{</span><span class="ch">out</span><span class="fu">,</span> <span class="dt">Prompt</span><span class="fu">}</span> <span class="kw">-&gt;</span>
            <span class="fu">ct:pal(</span><span class="st">&quot;Expected: ~p~nPrompt: ~p&quot;</span><span class="fu">,</span> <span class="fu">[</span><span class="dt">Expected</span><span class="fu">,</span> <span class="dt">Prompt</span><span class="fu">]),</span>
            <span class="fu">{</span><span class="ch">match</span><span class="fu">,</span> <span class="dt">_</span><span class="fu">}</span> <span class="kw">=</span> <span class="fu">re:run(</span><span class="dt">Prompt</span><span class="fu">,</span> <span class="dt">Expected</span><span class="fu">,</span> <span class="fu">[</span><span class="ch">dotall</span><span class="fu">,</span> <span class="ch">caseless</span><span class="fu">,</span> <span class="ch">global</span><span class="fu">])</span>
    <span class="kw">after</span> <span class="dv">1000</span> <span class="kw">-&gt;</span>
        <span class="fu">ct:pal(</span><span class="st">&quot;MBOX: ~p&quot;</span><span class="fu">,</span> <span class="fu">[process_info(self(),</span> <span class="ch">messages</span><span class="fu">)]),</span>
        <span class="fu">error({</span><span class="ch">too_long</span><span class="fu">,</span> <span class="fu">{</span><span class="ch">out</span><span class="fu">,</span> <span class="dt">Expected</span><span class="fu">}})</span>
    <span class="kw">end</span><span class="fu">.</span></code></pre></div>
<p>That one makes an assertion on a regular expression with <code>re:run/3</code>, and the rest is similar to what we did in <code>in/1</code>. We receive the output, match it, and that’s it.</p>
<p>And there we go, we can run the tests:</p>
<pre><code>λ → rebar3 ct
→ rebar3 ct
===&gt; Verifying dependencies...
===&gt; Fetching meck ({pkg,&lt;&lt;&quot;meck&quot;&gt;&gt;,&lt;&lt;&quot;0.8.2&quot;&gt;&gt;})
===&gt; Compiling meck
===&gt; Compiling muumuu
===&gt; Running Common Test suites...

&lt;test output omitted&gt;

All 1 tests passed.</code></pre>
<p>After this, I check in the rebar lock files into version control, and I go do something else because I’m pretty much done. You can see all the <a href="https://github.com/ferd/howistart-erlang1-code">code here</a>.</p>
<div class="figure">
<img src="/posts/erlang/1/images/1/outdoors.gif" />

</div>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/erlang/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Fred Hebert</h3>
    <h4>Erlang</h4>
    <h3><small> Author of Learn You Some Erlang For Great Good</small></h3>
    <p><a href='https://twitter.com/mononcqc/'>Fred</a> is the author of <a href='http://learnyousomeerlang.com/'>Learn You Some Erlang for Great Good!</a>, a free online (also paid for, on paper) book designed to teach Erlang, as well as <a href='http://www.erlang-in-anger.com/'>Erlang in Anger</a>,  a guide about how to be the Erlang medic in a time of war. He’s worked on writing and teaching training course material for <a href='http://erlang-solutions.com'>Erlang Solutions Ltd</a>, and on Real Time Bidding software for <a href='http://adgear.com/'>AdGear</a>. He has since then moved to Heroku’s routing team, writing and maintaining large scale distributed systems in the cloud.</p>
    <a class="btn btn-primary" href="/posts/erlang/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Clojure</title>
    <link href="http://www.howistart.org/posts/clojure/1/index.html" />
    <id>http://www.howistart.org/posts/clojure/1/index.html</id>
    <published>2015-04-07T00:00:00Z</published>
    <updated>2015-04-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Clojure <small>with Carin Meier</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <p>We are going to explore Clojure by creating a fun project together. In particular, we will create a twitter bot that creates its text based on a mashup of <a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm">Edward Lear’s poetry</a>, and a goodly selection of functional programming text taken from Wikipedia.</p>
<p>Why Edward Lear and Functional Programming? First, because I really enjoy his poetry. I fondly remember reading his poetry to my children. Some of my favorite poems are <a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm#pobble">The Pobble Who Has No Toes</a>, <a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm#quangle">The Quangle Wangle’s Hat</a>, and <a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm#jumblies">The Jumblies</a>. The whimsical nature of his poetry, like his contemporary Lewis Carroll, have great appeal to me. It is only natural that I should want to combine it with my other love, functional programming. In fact, I feel that some of of terms in functional programming like <em>monad</em> and <em>functor</em>, could fit right in with Edward Lear’s <em>Nonsense Songs</em>. This humble bot aims to unite the spheres of functional programming and nonsense poetry.</p>
<p>This tutorial will start with getting started with a basic Clojure project and editor. Then, we’ll build up our tweet generator with a <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov Chain</a>. Finally, we will deploy our code to <a href="https://www.heroku.com/">Heroku</a> and hook it up to a twitter account, where it will live and tweet all on its own.</p>
<p>Since this walk through is geared to explain how I work in particular, we will start my essential ingredient to any coding project … <em>tea</em>. I brew myself a cup of <em>PG Tips</em> tea with a splash of milk, then I sit down and fire up my trusty editor <em>Emacs</em>.</p>
<h2 id="emacs-is-a-lifestyle">Emacs is a lifestyle</h2>
<p>Emacs is more than an editor, it is a lifestyle. I also admit that the learning curve is steep. I actually only know about 4% of Emacs. This is completely normal given that the learning curve for the editor looks like a squiggly curlicue.</p>
<div class="figure">
<img src="http://c4.staticflickr.com/8/7598/16914999852_995b77a811_z.jpg" />

</div>
<p>Nevertheless, once I started using Emacs for Clojure and experienced the interactive nature of the code and the REPL, (Read Eval Print Loop), I was hooked. I use a customized version of <a href="https://github.com/technomancy/emacs-starter-kit">Emacs Starter Kit</a>. I also find the <a href="https://github.com/sellout/emacs-color-theme-solarized">Solarized Color-scheme</a> a must for my eyes. For Clojure code, I use <a href="https://github.com/clojure-emacs/cider">Cider for Emacs</a>, which gives me the incredible interactive code experience that I was mentioning. If you are looking to try out Emacs I would recommend getting the starter kit and grabbing a good tutorial like this <a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/">one</a>.</p>
<p>Now that we have our tea and Emacs editor open, It is time to actually get our Clojure project created. For this I use <a href="http://leiningen.org/">Leiningen</a>.</p>
<h2 id="getting-the-basic-project-setup">Getting the basic project setup</h2>
<p><em>As we go through the walkthrough, feel free to reference the full <a href="https://github.com/gigasquid/markov-elear">source code on github</a>.</em></p>
<p>Leiningen helps you create, manage, and automate your Clojure project. If you don’t already have Leiningen installed, follow the install <a href="http://leiningen.org/">instructions</a> and download it. We are going to call our project <code>markov-elear</code>, so to create a project we just type the <code>lein new</code> command at our prompt:</p>
<pre><code>lein new markov-elear</code></pre>
<p>This will create a basic project skeleton for us to work with. Next, <code>cd</code> into the directory.</p>
<pre><code>cd markov-elear</code></pre>
<p>The default src file that it creates is <em>src/markov_elear/core.clj</em>. This is the first thing to change. We want a more meaningful file name. For our purposes, let’s rename it to <em>src/markov_elear/generator.clj</em>.</p>
<pre><code>mv src/markov_elear/core.clj src/markov_elear/generator.clj</code></pre>
<p>There is also a skeleton test file that is created in <em>test/markov_elear/core_test.clj</em>. We will want to do the same thing to it as well.</p>
<pre><code>mv test/markov_elear/core_test.clj test/markov_elear/generator_test.clj</code></pre>
<p>Next, open up the <em>generator.clj</em> file in Emacs. It has been created with the Leiningen template, so there is code already there that looks like:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.core)

(<span class="kw">defn</span><span class="fu"> foo</span>
  <span class="st">&quot;I don&#39;t do a whole lot.&quot;</span>
  [x]
  (<span class="kw">println</span> x <span class="st">&quot;Hello, World!&quot;</span>))</code></pre></div>
<p>Since we changed our file to be named <em>generator.clj</em>, we also need to change the namespace to match it. Let’s also get rid of the <code>foo</code> function. It should now look like:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator)</code></pre></div>
<p>Go ahead and open up the test file as well <em>test/markov_elear/generator_test.clj</em>. It also has some sample code in it from the Leiningen template. It looks like:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.core-test
  (<span class="kw">:require</span> [clojure.<span class="kw">test</span> <span class="kw">:refer</span> <span class="kw">:all</span>]
            [markov-elear.core <span class="kw">:refer</span> <span class="kw">:all</span>]))

(<span class="kw">deftest</span><span class="fu"> a-test</span>
  (<span class="kw">testing</span> <span class="st">&quot;FIXME, I fail.&quot;</span>
    (<span class="kw">is</span> (<span class="kw">=</span> <span class="dv">0</span> <span class="dv">1</span>))))</code></pre></div>
<p>Change the namespace in the test to match the filename as well as the require to be that of <code>markov-elear-generator</code>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator-test
  (<span class="kw">:require</span> [clojure.<span class="kw">test</span> <span class="kw">:refer</span> <span class="kw">:all</span>]
            [markov-elear.generator <span class="kw">:refer</span> <span class="kw">:all</span>]))

(<span class="kw">deftest</span><span class="fu"> a-test</span>
  (<span class="kw">testing</span> <span class="st">&quot;FIXME, I fail.&quot;</span>
    (<span class="kw">is</span> (<span class="kw">=</span> <span class="dv">0</span> <span class="dv">1</span>))))</code></pre></div>
<p>At this point, we should now be able to run <code>lein test</code> from the command prompt and see our sample test fail.</p>
<pre><code>lein test markov-elear.generator-test

lein test :only markov-elear.generator-test/a-test

FAIL in (a-test) (generator_test.clj:7)
FIXME, I fail.
expected: (= 0 1)
  actual: (not (= 0 1))

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
Tests failed.
</code></pre>
<p>Fantastic. Our project is all set up. We are ready to <em>jack-in</em> with Emacs and Cider and start coding.</p>
<h2 id="cider-jack-in-and-experiment">Cider Jack In and Experiment</h2>
<p>Here is where we start to use the interactive nature of Clojure and Emacs in earnest. With the <em>generator.clj</em> file open in Emacs, type <code>M-x cider-jack-in</code>. This will start a nREPL server for our project, so we can actively start to experiment with our code. This early stage is a bit like playing with putty before sculpting. It allows us to quickly try out different approaches and get a feel for data constructs to use. For example, first put your cursor after the namespace form and hit <code>C-x C-e</code> to evaluate the form.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator)</code></pre></div>
<p>You are now all set to the generator namespace for your evaluation.</p>
<p>Next, type into <code>generator.clj</code> the line:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">+</span> <span class="dv">1</span> <span class="dv">1</span>)</code></pre></div>
<p>At this point, you can put your cursor at the end of the form and again hit <code>C-x C-e</code> you will see the result <code>2</code> appear in the mini-buffer at the bottom of the screen.</p>
<p>Now, we are ready to experiment with Markov Chains. The first thing we need is some small example to play with. Consider the following text.</p>
<pre><code>&quot;And the Golden Grouse And the Pobble who&quot;</code></pre>
<p>To construct a Markov Chain, we need to transform this text into a chain of prefixes and suffixes. In Markov chains, the length of the prefix can vary. The larger the prefix, the more predictable the text becomes, while the smaller the prefix size, the more random. In this case, we are going to use a prefix size of 2. We want to break up the original text into chunks of two words. The suffix is the next word that comes after.</p>
<pre><code>|Prefix        | Suffix
| -------------|-------------
| And the      | Golden
| the Golden   | Grouse
| Grouse And   | the
| And the      | Pobble
| the Pobble   | who
| Pobble who   | nil</code></pre>
<p>This table becomes a guide for us in walking the chain to generate new text. If we start at a random place in the table, we can generate some text by following some simple rules.</p>
<ol style="list-style-type: decimal">
<li>Choose a prefix to start. Your result string starts as this prefix.</li>
<li>Take the suffix that goes with the prefix. Add the suffix to your result string. Also, add the last word of the prefix to the suffix, this is your new prefix.</li>
<li>Look up your new prefix in the table and continue until there is no suffix.</li>
<li>The result string is your generated text.</li>
</ol>
<p>From our table, let’s start with the prefix <em>the Pobble</em>.</p>
<ol style="list-style-type: decimal">
<li>Our starting prefix is <em>the Pobble</em>. Our result string will be initialized to it.</li>
<li>Look up the prefix in the table. The suffix that goes with it is <em>who</em>. Add the suffix to the result string. The new prefix is the last word from the prefix and the suffix. So the new prefix is <em>Pobble who</em>.</li>
<li>Look up up the prefix in the table, the suffix is nil. This means we have reached the end of the chain. Our resulting text is <em>the Pobble who</em>.</li>
</ol>
<p>Things get interesting when there is more than one entry for a prefix. Notice that <em>And the</em> is in the table twice. This means that there is a choice of what entry to use and what suffix. We can randomly choose which one to use in our Markov Chain walk. As a result, our text will be randomly generated. If start with the prefix <em>And the</em> we have different possibilities for the resulting text. It could be</p>
<ul>
<li>And the Pobble who</li>
<li>And the Golden Grouse And the Pobble who</li>
<li>And the Golden Grouse And the Golden Grouse And the Pobble who</li>
<li>And the Golden Grouse And the Golden Grouse And the Golden Grouse And the Pobble who</li>
<li>etc…</li>
</ul>
<p>Since we could get into repeating chains, we should also put a terminating condition of the total length of our resulting text as well.</p>
<p>Now that we know the general idea of what we want to do, let’s start small and start experimenting.</p>
<h3 id="baby-steps">Baby steps</h3>
<p>First, let’s take our example text and put it into code to play with in the REPL.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> example </span><span class="st">&quot;And the Golden Grouse And the Pobble who&quot;</span>)
<span class="co">;; -&gt; #&#39;markov-elear.core/example</span></code></pre></div>
<p>Now, we are going to want to split up this text by spaces. This is a job for <code>clojure.string/split</code>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> words </span>(clojure.string/split example <span class="st">#&quot; &quot;</span>))
words
<span class="co">;; -&gt; [&quot;And&quot; &quot;the&quot; &quot;Golden&quot; &quot;Grouse&quot; &quot;And&quot; &quot;the&quot; &quot;Pobble&quot; &quot;who&quot;]</span></code></pre></div>
<p>We also need to divide up these words in chunks of 3. Clojure’s <code>partition-all</code> will be perfect for this. We are going to partition the word list in chunks of three.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> word-transitions </span>(partition-all <span class="dv">3</span> <span class="dv">1</span> words))
word-transitions
<span class="co">;; -&gt; ((&quot;And&quot; &quot;the&quot; &quot;Golden&quot;)</span>
<span class="co">;;     (&quot;the&quot; &quot;Golden&quot; &quot;Grouse&quot;)</span>
<span class="co">;;     (&quot;Golden&quot; &quot;Grouse&quot; &quot;And&quot;)</span>
<span class="co">;;     (&quot;Grouse&quot; &quot;And&quot; &quot;the&quot;)</span>
<span class="co">;;     (&quot;And&quot; &quot;the&quot; &quot;Pobble&quot;)</span>
<span class="co">;;     (&quot;the&quot; &quot;Pobble&quot; &quot;who&quot;)</span>
<span class="co">;;     (&quot;Pobble&quot; &quot;who&quot;)</span>
<span class="co">;;     (&quot;who&quot;))</span></code></pre></div>
<p>This is nice, but we really need to get it into a word-chain format. Ideally it would a map with the prefixes as the key and then have a set of suffixes to choose from. So that the prefix of <em>And the</em> would look like</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">{[<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>]} #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}</code></pre></div>
<p>A map with the key being the vector of prefix words and the value being the set of suffixes.</p>
<p>We need to map through the list of word-transitions and build this up somehow. Perhaps <code>merge-with</code> will help us out.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">merge-with</span> <span class="kw">concat</span> {<span class="kw">:a</span> [<span class="dv">1</span>]} {<span class="kw">:a</span> [<span class="dv">3</span>]})
<span class="co">;; -&gt; {:a (1 3)}</span></code></pre></div>
<p><code>merge-with</code> will allow us to combine the prefixes with multiple suffixes in a map form, but we really want it in a set. Time to experiment some more.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">merge-with</span> clojure.set/union {<span class="kw">:a</span> #{<span class="dv">1</span>}} {<span class="kw">:a</span> #{<span class="dv">2</span>}})
<span class="co">;; -&gt; {:a #{1 2}}</span></code></pre></div>
<p>Yes, that will do nicely. Let’s try this out in a <code>reduce</code> over the <code>word-transitions</code>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">reduce</span> (<span class="kw">fn</span> [r t] (<span class="kw">merge-with</span> clojure.set/union r
                               (<span class="kw">let</span> [[a b c] t]
                                 {[a b] (<span class="kw">if</span> c #{c} #{})})))
          {}
          word-transitions)
<span class="co">;; {[&quot;who&quot; nil] #{},</span>
<span class="co">;;  [&quot;Pobble&quot; &quot;who&quot;] #{},</span>
<span class="co">;;  [&quot;the&quot; &quot;Pobble&quot;] #{&quot;who&quot;},</span>
<span class="co">;;  [&quot;Grouse&quot; &quot;And&quot;] #{&quot;the&quot;},</span>
<span class="co">;;  [&quot;Golden&quot; &quot;Grouse&quot;] #{&quot;And&quot;},</span>
<span class="co">;;  [&quot;the&quot; &quot;Golden&quot;] #{&quot;Grouse&quot;},</span>
<span class="co">;;  [&quot;And&quot; &quot;the&quot;] #{&quot;Pobble&quot; &quot;Golden&quot;}}</span></code></pre></div>
<h2 id="tangible-turn-to-tests">Tangible turn to tests</h2>
<p>We have been experimenting in the REPL, but now that we have a feel for where we are going it is time to write some tests. I really like to use the <a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refesh plugin</a>. It will continually rerun the tests whenever we change something in our files. I find the feedback loop is much faster then running <code>lein test</code> alone. It also takes care of reloading all the namespaces for you, so I don’t run into problems where my REPL environment gets out of sync with my code. To add it to your project, simply add the following to your <em>project.clj</em> file.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span class="kw">:profiles</span> {<span class="kw">:dev</span> {<span class="kw">:plugins</span> [[com.jakemccrary/lein-test-refresh <span class="st">&quot;0.7.0&quot;</span>]]}}</code></pre></div>
<p>Now, you can start it up from your prompt by running</p>
<pre><code>lein test-refresh</code></pre>
<p>First, let’s get rid of the sample test and replace it with a real one. We want this test to be about the word chain that we were experimenting with.</p>
<h3 id="building-the-word-chain">Building the Word Chain</h3>
<p>Add this to your <em>generator_test.clj</em> file.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator-test
  (<span class="kw">:require</span> [clojure.<span class="kw">test</span> <span class="kw">:refer</span> <span class="kw">:all</span>]
            [markov-elear.generator <span class="kw">:refer</span> <span class="kw">:all</span>]))

(<span class="kw">deftest</span><span class="fu"> test-word-chain</span>
  (<span class="kw">testing</span> <span class="st">&quot;it produces a chain of the possible two step transitions between suffixes and prefixes&quot;</span>
    (<span class="kw">let</span> [example &#39;((<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>)
                    (<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>)
                    (<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>)
                    (<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>))]
      (<span class="kw">is</span> (<span class="kw">=</span> {[<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>}
              [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>}
              [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}
             (word-chain example))))))</code></pre></div>
<p>As you save the file, you will notice the test failing in your <code>lein test-refresh</code> window. This is because we haven’t written the <em>word-chain</em> function yet. After all of our experimentation, we know exactly what we need to do. Add the following function to your <em>generator.clj</em> file.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> word-chain </span>[word-transitions]
  (<span class="kw">reduce</span> (<span class="kw">fn</span> [r t] (<span class="kw">merge-with</span> clojure.set/union r
                               (<span class="kw">let</span> [[a b c] t]
                                 {[a b] (<span class="kw">if</span> c #{c} #{})})))
          {}
          word-transitions))</code></pre></div>
<p>Your test should now pass.</p>
<p>What about generating the word chain from an string of text? When we were experimenting in the REPL, we saw that using <code>parition-all</code> was going to be useful. Let’s add a test for that now in <em>generator_test.clj</em>. We want to parse an input string that has spaces or new lines.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-text-&gt;word-chain</span>
  (<span class="kw">testing</span> <span class="st">&quot;string with spaces and newlines&quot;</span>
    (<span class="kw">let</span> [example <span class="st">&quot;And the Golden Grouse</span>\n<span class="st">And the Pobble who&quot;</span>]
     (<span class="kw">is</span> (<span class="kw">=</span> {[<span class="st">&quot;who&quot;</span> nil] #{}
             [<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>] #{}
             [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>}
             [<span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span>] #{<span class="st">&quot;the&quot;</span>}
             [<span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>] #{<span class="st">&quot;And&quot;</span>}
             [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>}
             [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}
            (text-&gt;word-chain example))))))</code></pre></div>
<p>To make it pass, add the <code>text-&gt;word-chain</code> function in the <em>generator_test.clj</em>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> text-&gt;word-chain </span>[s]
  (<span class="kw">let</span> [words (clojure.string/split s <span class="st">#&quot;[\s|</span>\n<span class="st">]&quot;</span>)
        word-transitions (partition-all <span class="dv">3</span> <span class="dv">1</span> words)]
    (word-chain word-transitions)))</code></pre></div>
<p>Now that we have our word-chain, we are going to need a way to walk the chain, given a beginning prefix, and come up with our resulting text.</p>
<h3 id="random-walking-the-chain">Random Walking the Chain</h3>
<p>Going back to our test file <em>generator_test.clj</em>, add a new test for a <code>walk-chain</code> function that we want:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-walk-chain</span>
  (<span class="kw">let</span> [chain {[<span class="st">&quot;who&quot;</span> nil] #{},
               [<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>] #{},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>},
               [<span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span>] #{<span class="st">&quot;the&quot;</span>},
               [<span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>] #{<span class="st">&quot;And&quot;</span>},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>},
               [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}]
    (<span class="kw">testing</span> <span class="st">&quot;dead end&quot;</span>
      (<span class="kw">let</span> [prefix [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>]]
        (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>]
               (walk-chain prefix chain prefix)))))))</code></pre></div>
<p>Given a the starting prefix of <code>[&quot;the&quot; &quot;Pobble&quot;]</code>, it will walk our chain until it reaches the a dead end of there being no more suffixes. The result should be <code>[&quot;the&quot; &quot;Pobble&quot; &quot;who&quot;]</code>.</p>
<p>Going back to our <em>generator.clj</em> file, we can start constructing a function to do this</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> walk-chain </span>[prefix chain result]
  (<span class="kw">let</span> [suffixes (<span class="kw">get</span> chain prefix)]
    (<span class="kw">if</span> (<span class="kw">empty?</span> suffixes)
      result
      (<span class="kw">let</span> [suffix (<span class="kw">first</span> (shuffle suffixes))
            new-prefix [(<span class="kw">last</span> prefix) suffix]]
        (<span class="kw">recur</span> new-prefix chain (<span class="kw">conj</span> result suffix))))))</code></pre></div>
<p>It takes the prefix and get the suffixes associated with it. If there are no suffixes, it terminates and returns the result. Otherwise, it uses <code>shuffle</code> to pick a random suffix. Then it constructs the new prefix from the last part of the current prefix and the suffix. Finally, it recurs into the function using the <code>new-prefix</code> and adding the suffix to the result.</p>
<p>We have another passing test, but we still need to consider the other walking of the chain where it has a choice. Go ahead and add a test for that now too.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-walk-chain</span>
  (<span class="kw">let</span> [chain {[<span class="st">&quot;who&quot;</span> nil] #{},
               [<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>] #{},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>},
               [<span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span>] #{<span class="st">&quot;the&quot;</span>},
               [<span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>] #{<span class="st">&quot;And&quot;</span>},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>},
               [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}]
    (<span class="kw">testing</span> <span class="st">&quot;dead end&quot;</span>
      (<span class="kw">let</span> [prefix [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>]]
        (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>]
               (walk-chain prefix chain prefix)))))
    (<span class="kw">testing</span> <span class="st">&quot;multiple choices&quot;</span>
      (with-redefs [shuffle (<span class="kw">fn</span> [c] c)]
        (<span class="kw">let</span> [prefix [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>]]
          (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>]
                 (walk-chain prefix chain prefix))))))))</code></pre></div>
<p>Because we have randomness to deal with, we can use <code>with-redefs</code> to redefine <code>shuffle</code> to always return the original collection for us. We also need to deal with repeating chains. We will have to give it another termination condition, like a word or character length for termination. Since our bot is destined for twitter, a 140 char limit seems reasonable.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-walk-chain</span>
  (<span class="kw">let</span> [chain {[<span class="st">&quot;who&quot;</span> nil] #{},
               [<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>] #{},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>},
               [<span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span>] #{<span class="st">&quot;the&quot;</span>},
               [<span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>] #{<span class="st">&quot;And&quot;</span>},
               [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>},
               [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}]
    (<span class="kw">testing</span> <span class="st">&quot;dead end&quot;</span>
      (<span class="kw">let</span> [prefix [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>]]
        (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>]
               (walk-chain prefix chain prefix)))))
    (<span class="kw">testing</span> <span class="st">&quot;multiple choices&quot;</span>
      (with-redefs [shuffle (<span class="kw">fn</span> [c] c)]
        (<span class="kw">let</span> [prefix [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>]]
          (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>]
                 (walk-chain prefix chain prefix))))))
    (<span class="kw">testing</span> <span class="st">&quot;repeating chains&quot;</span>
      (with-redefs [shuffle (<span class="kw">fn</span> [c] (<span class="kw">reverse</span> c))]
        (<span class="kw">let</span> [prefix [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>]]
          (<span class="kw">is</span> (<span class="kw">&gt;</span> <span class="dv">140</span>
                 (<span class="kw">count</span> (<span class="kw">apply</span> <span class="kw">str</span> (walk-chain prefix chain prefix)))))
          (<span class="kw">is</span> (<span class="kw">=</span> [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>]
                 (<span class="kw">take</span> <span class="dv">8</span> (walk-chain prefix chain prefix)))))))))</code></pre></div>
<p><em>Note: The test will actually run forever since it is stuck in an endless loop. You will have to restart your test-refresh session after you implement the solution.</em></p>
<p>Adjusting our <em>generator.clj</em>, we first need a helper function that will turn our result chain into a string with spaces, so that we can count the chars and make sure that they are under the limit. We will call it <code>chain-&gt;text</code>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> chain-&gt;text </span>[chain]
  (<span class="kw">apply</span> <span class="kw">str</span> (<span class="kw">interpose</span> <span class="st">&quot; &quot;</span> chain)))</code></pre></div>
<p>It takes a chain like <code>[&quot;And&quot; &quot;the&quot; &quot;Pobble&quot; &quot;who&quot;]</code> and gives us back the display text.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(chain-&gt;text [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>])
<span class="co">;; -&gt; &quot;And the Pobble who&quot;</span></code></pre></div>
<p>Now we can add the char limit counting to our <code>walk-chain</code> function.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> chain-&gt;text </span>[chain]
  (<span class="kw">apply</span> <span class="kw">str</span> (<span class="kw">interpose</span> <span class="st">&quot; &quot;</span> chain)))

(<span class="kw">defn</span><span class="fu"> walk-chain </span>[prefix chain result]
  (<span class="kw">let</span> [suffixes (<span class="kw">get</span> chain prefix)]
    (<span class="kw">if</span> (<span class="kw">empty?</span> suffixes)
      result
      (<span class="kw">let</span> [suffix (<span class="kw">first</span> (shuffle suffixes))
            new-prefix [(<span class="kw">last</span> prefix) suffix]
            result-with-spaces (chain-&gt;text result)
            result-char-count (<span class="kw">count</span> result-with-spaces)
            suffix-char-count (<span class="kw">inc</span> (<span class="kw">count</span> suffix))
            new-result-char-count (<span class="kw">+</span> result-char-count suffix-char-count)]
        (<span class="kw">if</span> (<span class="kw">&gt;=</span> new-result-char-count <span class="dv">140</span>)
          result
          (<span class="kw">recur</span> new-prefix chain (<span class="kw">conj</span> result suffix)))))))</code></pre></div>
<p>We check the <code>result-char-count</code> and the chosen <code>suffix-char-count</code> before we recur, so that we can ensure that it doesn’t go over 140 chars. If it is going to go over the limit, we return the result and do not <code>recur</code>.</p>
<p>What we need now is another higher level function that, when given a prefix and a word chain, will return the resulting text.</p>
<h3 id="taking-a-start-text-phrase-walking-the-chain-and-returning-text.">Taking A Start Text Phrase, Walking the Chain, and Returning Text.</h3>
<p>Going back to the <em>generator_test.clj</em> file, let’s go ahead and write the test. We will use <code>with-redefs</code> again to control our randomness.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-generate-text</span>
  (with-redefs [shuffle (<span class="kw">fn</span> [c] c)]
    (<span class="kw">let</span> [chain {[<span class="st">&quot;who&quot;</span> nil] #{}
                 [<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;who&quot;</span>] #{}
                 [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Pobble&quot;</span>] #{<span class="st">&quot;who&quot;</span>}
                 [<span class="st">&quot;Grouse&quot;</span> <span class="st">&quot;And&quot;</span>] #{<span class="st">&quot;the&quot;</span>}
                 [<span class="st">&quot;Golden&quot;</span> <span class="st">&quot;Grouse&quot;</span>] #{<span class="st">&quot;And&quot;</span>}
                 [<span class="st">&quot;the&quot;</span> <span class="st">&quot;Golden&quot;</span>] #{<span class="st">&quot;Grouse&quot;</span>}
                 [<span class="st">&quot;And&quot;</span> <span class="st">&quot;the&quot;</span>] #{<span class="st">&quot;Pobble&quot;</span> <span class="st">&quot;Golden&quot;</span>}}]
      (<span class="kw">is</span> (<span class="kw">=</span> <span class="st">&quot;the Pobble who&quot;</span> (generate-text <span class="st">&quot;the Pobble&quot;</span> chain)))
      (<span class="kw">is</span> (<span class="kw">=</span> <span class="st">&quot;And the Pobble who&quot;</span> (generate-text <span class="st">&quot;And the&quot;</span> chain))))))</code></pre></div>
<p>To make the test pass in our <em>generator.clj</em> file, we create the function that will take a start-phrase as a prefix and a word chain. Then it will split the start-phrase by spaces, so that it will match up to our prefix keys. Next, it will use <code>walk-chain</code> to get the resulting text chain. Finally, it will turn the result text chain into plain text with <code>chain-&gt;text</code>.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> generate-text</span>
  [start-phrase word-chain]
  (<span class="kw">let</span> [prefix (clojure.string/split start-phrase <span class="st">#&quot; &quot;</span>)
        result-chain (walk-chain prefix word-chain prefix)
        result-text (chain-&gt;text result-chain)]
    result-text))</code></pre></div>
<p>Taking a moment to recap, this is what we have so far:</p>
<ul>
<li>We can take string, parse it and turn it into a word chain.</li>
<li>We can take an input phrase and word chain and generate some new text by taking a random walk in the chain.</li>
</ul>
<p>What we are missing is a way to <em>train</em> our bot, by reading in some files of text and building out the chain that it will walk.</p>
<h3 id="training-the-bot-by-reading-input-files">Training the bot by reading input files</h3>
<p>To <em>train</em> our bot, we need to be able to give it a text file and have it turn it into a word chain. Our first text selection will be from <a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm#quangle">The Quangle Wangle’s Hat</a>.</p>
<p>Making it easier on ourselves, we will do some slight formatting of the text. Save it in a file called <em>resources/quangle-wangle.txt</em>.</p>
<pre><code>On the top of the Crumpetty Tree
The Quangle Wangle sat,
But his face you could not see,
On account of his Beaver Hat.
For his Hat was a hundred and two feet wide,
With ribbons and bibbons on every side,
And bells, and buttons, and loops, and lace,
So that nobody ever could see the face
Of the Quangle Wangle Quee.
The Quangle Wangle said
To himself on the Crumpetty Tree,
&quot;Jam, and jelly, and bread
Are the best of food for me!
But the longer I live on this Crumpetty Tree
The plainer than ever it seems to me
That very few people come this way
And that life on the whole is far from gay!&quot;
Said the Quangle Wangle Quee.
But there came to the Crumpetty Tree
Mr. and Mrs. Canary;
And they said, &quot;Did ever you see
Any spot so charmingly airy?
May we build a nest on your lovely Hat?
Mr. Quangle Wangle, grant us that!
O please let us come and build a nest
Of whatever material suits you best,
Mr. Quangle Wangle Quee!&quot;
And besides, to the Crumpetty Tree
Came the Stork, the Duck, and the Owl;
The Snail and the Bumble-Bee,
The Frog and the Fimble Fowl
(The Fimble Fowl, with a Corkscrew leg);
And all of them said, &quot;We humbly beg
We may build our homes on your lovely Hat,--
Mr. Quangle Wangle, grant us that!
Mr. Quangle Wangle Quee!&quot;
And the Golden Grouse came there,
And the Pobble who has no toes,
And the small Olympian bear,
And the Dong with a luminous nose.
And the Blue Baboon who played the flute,
And the Orient Calf from the Land of Tute,
And the Attery Squash, and the Bisky Bat,--
All came and built on the lovely Hat
Of the Quangle Wangle Quee.
And the Quangle Wangle said
To himself on the Crumpetty Tree,
&quot;When all these creatures move
What a wonderful noise there&#39;ll be!&quot;
And at night by the light of the Mulberry moon
They danced to the Flute of the Blue Baboon,
On the broad green leaves of the Crumpetty Tree,
And all were as happy as happy could be,
With the Quangle Wangle Quee.</code></pre>
<p>We can now use <code>clojure.java.io/resource</code> to open the file and <code>slurp</code> to turn it into a string. From there, we can simply use our <code>text-&gt;word-chain</code> function to transform it into the word chain that we need. Add the <code>process-file</code> function to the <em>generator.clj</em> file and give it a try in the REPL.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> process-file </span>[fname]
  (text-&gt;word-chain
   (<span class="kw">slurp</span> (clojure.java.io/resource fname))))

(generate-text <span class="st">&quot;And the&quot;</span> (process-file <span class="st">&quot;quangle-wangle.txt&quot;</span>))
<span class="co">;; -&gt; &quot;And the Attery Squash, and the Bumble-Bee,</span>
<span class="co">;;     The Frog and the Bisky Bat,-- All came and built on the</span>
<span class="co">;;     Crumpetty Tree</span>
<span class="co">;;     The plainer than ever it&quot;</span></code></pre></div>
<p>Great! We just need to add some more text files. We will add some more Edward Lear Poems, As well as some text from wikipedia on Functional Programming.</p>
<ul>
<li><a href="http://www.gutenberg.org/files/13650/13650-h/13650-h.htm">The Project Gutenberg eBook, Nonsense Books, by Edward Lear</a></li>
<li>http://en.wikipedia.org/wiki/Monad_(functional_programming)</li>
<li><a href="http://en.wikipedia.org/wiki/Functional_programming" class="uri">http://en.wikipedia.org/wiki/Functional_programming</a></li>
<li><a href="http://en.wikipedia.org/wiki/Clojure" class="uri">http://en.wikipedia.org/wiki/Clojure</a></li>
</ul>
<p>After we have chosen our text selections, we define a list of input files and the final chain that is the result of all the processed text.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> files </span>[<span class="st">&quot;quangle-wangle.txt&quot;</span> <span class="st">&quot;monad.txt&quot;</span> <span class="st">&quot;clojure.txt&quot;</span> <span class="st">&quot;functional.txt&quot;</span>
            <span class="st">&quot;jumblies.txt&quot;</span> <span class="st">&quot;pelican.txt&quot;</span> <span class="st">&quot;pobble.txt&quot;</span>])
(<span class="kw">def</span><span class="fu"> functional-leary </span>(<span class="kw">apply</span> <span class="kw">merge-with</span> clojure.set/union (<span class="kw">map</span> process-file files)))</code></pre></div>
<p>Giving it a try in the REPL.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(generate-text <span class="st">&quot;On the&quot;</span> functional-leary)
<span class="co">;; -&gt; &quot;On the broad green leaves of the list. Under lazy evaluation,</span>
<span class="co">;;    the length function will return a new monadic value.</span>
<span class="co">;;    The bind operation takes&quot;</span></code></pre></div>
<p>Now we are having fun :)</p>
<h2 id="artistic-tweaking">Artistic tweaking</h2>
<p>Here is when it turns to artistic tweaking. I want to hand select a few entry prefixes, so that the text generated will tend to start out sounding like Edward Lear and have functional text mixed in.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> prefix-list </span>[<span class="st">&quot;On the&quot;</span> <span class="st">&quot;They went&quot;</span> <span class="st">&quot;And all&quot;</span> <span class="st">&quot;We think&quot;</span>
                  <span class="st">&quot;For every&quot;</span> <span class="st">&quot;No other&quot;</span> <span class="st">&quot;To a&quot;</span> <span class="st">&quot;And every&quot;</span>
                  <span class="st">&quot;We, too,&quot;</span> <span class="st">&quot;For his&quot;</span> <span class="st">&quot;And the&quot;</span> <span class="st">&quot;But the&quot;</span>
                  <span class="st">&quot;Are the&quot;</span> <span class="st">&quot;The Pobble&quot;</span> <span class="st">&quot;For the&quot;</span> <span class="st">&quot;When we&quot;</span>
                  <span class="st">&quot;In the&quot;</span> <span class="st">&quot;Yet we&quot;</span> <span class="st">&quot;With only&quot;</span> <span class="st">&quot;Are the&quot;</span>
                  <span class="st">&quot;Though the&quot;</span>  <span class="st">&quot;And when&quot;</span>
                  <span class="st">&quot;We sit&quot;</span> <span class="st">&quot;And this&quot;</span> <span class="st">&quot;No other&quot;</span> <span class="st">&quot;With a&quot;</span>
                  <span class="st">&quot;And at&quot;</span> <span class="st">&quot;What a&quot;</span> <span class="st">&quot;Of the&quot;</span>
                  <span class="st">&quot;O please&quot;</span> <span class="st">&quot;So that&quot;</span> <span class="st">&quot;And all&quot;</span> <span class="st">&quot;When they&quot;</span>
                  <span class="st">&quot;But before&quot;</span> <span class="st">&quot;Whoso had&quot;</span> <span class="st">&quot;And nobody&quot;</span> <span class="st">&quot;And it&#39;s&quot;</span>
                  <span class="st">&quot;For any&quot;</span> <span class="st">&quot;For example,&quot;</span> <span class="st">&quot;Also in&quot;</span> <span class="st">&quot;In contrast&quot;</span>])</code></pre></div>
<p>Also, I want to fix a bit of the punctuation of the generated text. In particular, I want to trim the text to the last punctuation in the text. Then, if it ends in a comma, I want to replace it with a period. If there is no punctuation, I want to drop the last word and add a period. I also want to clean up an quotes that get escaped in the text.</p>
<p>Adding a test for that in our <em>generator_test.clj</em> file:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">deftest</span><span class="fu"> test-end-at-last-puntcuation</span>
  (<span class="kw">testing</span> <span class="st">&quot;Ends at the last puncuation&quot;</span>
    (<span class="kw">is</span> (<span class="kw">=</span> <span class="st">&quot;In a tree so happy are we.&quot;</span>
           (end-at-last-punctuation <span class="st">&quot;In a tree so happy are we. So that&quot;</span>)))
    (<span class="kw">testing</span> <span class="st">&quot;Replaces ending comma with a period&quot;</span>
    (<span class="kw">is</span> (<span class="kw">=</span> <span class="st">&quot;In a tree so happy are we.&quot;</span>
           (end-at-last-punctuation <span class="st">&quot;In a tree so happy are we, So that&quot;</span>))))
    (<span class="kw">testing</span> <span class="st">&quot;If there are no previous puncations, just leave it alone and add one at the end&quot;</span>
      (<span class="kw">is</span> ( <span class="kw">=</span> <span class="st">&quot;In the light of the blue moon.&quot;</span>
              (end-at-last-punctuation  <span class="st">&quot;In the light of the blue moon there&quot;</span>))))
    (<span class="kw">testing</span> <span class="st">&quot;works with multiple punctuation&quot;</span>
      (<span class="kw">is</span> ( <span class="kw">=</span> <span class="st">&quot;In the light of the blue moon.  We danced merrily.&quot;</span>
              (end-at-last-punctuation  <span class="st">&quot;In the light of the blue moon.  We danced merrily.  Be&quot;</span>))))))</code></pre></div>
<p>We can make this test pass in our <em>generator.clj</em> file, by using some string and regex functions.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> end-at-last-punctuation </span>[text]
  (<span class="kw">let</span> [trimmed-to-last-punct (<span class="kw">apply</span> <span class="kw">str</span> (<span class="kw">re-seq</span> <span class="st">#&quot;[\s\w]+[^.!?,]*[.!?,]&quot;</span> text))
        trimmed-to-last-word (<span class="kw">apply</span> <span class="kw">str</span> (<span class="kw">re-seq</span> <span class="st">#&quot;.*[^a-zA-Z]+&quot;</span> text))
        result-text (<span class="kw">if</span> (<span class="kw">empty?</span> trimmed-to-last-punct)
                      trimmed-to-last-word
                      trimmed-to-last-punct)
        cleaned-text (clojure.string/replace result-text <span class="st">#&quot;[,| ]$&quot;</span> <span class="st">&quot;.&quot;</span>)]
    (clojure.string/replace cleaned-text <span class="st">#&quot;</span>\&quot;<span class="st">&quot;</span> <span class="st">&quot;&#39;&quot;</span>)))</code></pre></div>
<p>Using this, we can now make a <code>tweet-text</code> function that will randomly choose a prefix from our prefix list and generate our mashup text.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> tweet-text </span>[]
  (<span class="kw">let</span> [text (generate-text (<span class="kw">-&gt;</span> prefix-list shuffle <span class="kw">first</span>) functional-leary)]
    (end-at-last-punctuation text)))

(tweet-text)
<span class="co">;; -&gt; &quot;With a wreath of shrimps in her short white hair.</span>
<span class="co">;;     And before the end of this period Hickey sent an email</span>
<span class="co">;;     announcing the language Hope.&quot;</span></code></pre></div>
<p>Alright, that last one made me smile.</p>
<p>We now have a function that will generate tweets for us. The next step is to hook it up to a Twitter account so that we can share our smiles with the world.</p>
<h2 id="hooking-the-bot-up-to-twitter">Hooking the bot up to Twitter</h2>
<p>To hook up our bot to twitter, you need to create a twitter account. Once you do that, need to do the following:</p>
<ul>
<li>Go to <a href="https://apps.twitter.com/" class="uri">https://apps.twitter.com/</a> to create new twitter application. You will want to set the permission so that it can post to the twitter account. This will give you a <em>Consumer Key (API Key)</em> and a <em>Consumer Secret (API Secret)</em>.</li>
<li>Go to the the <em>Keys and Access Tokens</em> section of the application. On the bottom half there is a button that says <em>Create my access token</em>, click it. It will generate two more key pieces of information for you: <em>Access Token</em> and <em>Access Token Secret</em>.</li>
</ul>
<p>Please note that these setting are sensitive and should not be checked into github or shared publicly. To help make our twitter account access, we are going to need the help of two libraries. The first is <a href="https://github.com/adamwynne/twitter-api">twitter-api</a> that will help us make our api calls. The second is <a href="https://github.com/weavejester/environ">environ</a> that will help us keep our login information safe.</p>
<p>Add both libraries to your <em>project.clj</em></p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure"> [twitter-api <span class="st">&quot;0.7.8&quot;</span>]
 [environ <span class="st">&quot;1.0.0&quot;</span>]</code></pre></div>
<p>Also add the <code>lein-environ</code> plugin to your <em>project.clj</em> as well.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span class="kw">:plugins</span> [[lein-environ <span class="st">&quot;1.0.0&quot;</span>]]</code></pre></div>
<p>The environ plugin allows us to pass configuration information from environment settings or a <em>profiles.clj</em> file that can be ignored and <strong>not checked</strong> in. Let’s go ahead and add a <em>profiles.clj</em> file to the root of our project and put in all our twitter account info.</p>
<p><em>Danger: Do not check in your twitter keys and push to a public repo!</em></p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">{<span class="kw">:dev</span>  {<span class="kw">:env</span> {<span class="kw">:app-consumer-key</span> <span class="st">&quot;foo&quot;</span>
              <span class="kw">:app-consumer-secret</span> <span class="st">&quot;bar&quot;</span>
              <span class="kw">:user-access-token</span> <span class="st">&quot;foo2&quot;</span>
              <span class="kw">:user-access-secret</span> <span class="st">&quot;bar2&quot;</span>}}}</code></pre></div>
<p>Also add both the twitter-api and the environ library to the project namespace in the <em>generator.clj</em> file.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator
  (<span class="kw">:require</span> [twitter.api.restful <span class="kw">:as</span> twitter]
            [twitter.oauth <span class="kw">:as</span> twitter-oauth]
            [environ.core <span class="kw">:refer</span> [env]]))</code></pre></div>
<p>This will allow us to define <code>my-creds</code> that will make our creditionals for our twitter app.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">def</span><span class="fu"> my-creds </span>(twitter-oauth/make-oauth-creds (env <span class="kw">:app-consumer-key</span>)
                                              (env <span class="kw">:app-consumer-secret</span>)
                                              (env <span class="kw">:user-access-token</span>)
                                              (env <span class="kw">:user-access-secret</span>)))</code></pre></div>
<p>Now that we can talk to our twitter account. We can finally write a <code>status-update</code> function that will post our markov chain generated text.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">defn</span><span class="fu"> status-update </span>[]
  (<span class="kw">let</span> [tweet (tweet-text)]
    (<span class="kw">println</span> <span class="st">&quot;generated tweet is :&quot;</span> tweet)
    (<span class="kw">println</span> <span class="st">&quot;char count is:&quot;</span> (<span class="kw">count</span> tweet))
    (<span class="kw">when</span> (<span class="kw">not-empty</span> tweet)
      (<span class="kw">try</span> (twitter/statuses-update <span class="kw">:oauth-creds</span> my-creds
                                    <span class="kw">:params</span> {<span class="kw">:status</span> tweet})
           (<span class="kw">catch</span> Exception <span class="kw">e</span> (<span class="kw">println</span> <span class="st">&quot;Oh no! &quot;</span> (.getMessage <span class="kw">e</span>)))))))</code></pre></div>
<p>Giving it a try:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(status-update)
<span class="co">;; -&gt; {.... :text &quot;For example, the functions doesFileExist and</span>
<span class="co">;;                 removeFile in the 1980s</span>
<span class="co">;;                 in the nights of June.&quot;}}</span></code></pre></div>
<div class="figure">
<img src="http://c4.staticflickr.com/8/7617/16905225975_07da52ac87_b.jpg" />

</div>
<p>Hooray! We are almost there. We next need a way to run this status update on a periodic basis, having it post automatically for us.</p>
<h2 id="automating-our-tweets">Automating our tweets</h2>
<p>To have this run from the command line in an automated fashion, we are going to do two things. The first is to use the <a href="https://github.com/overtone/at-at">Overtone at-at library</a> for scheduling. And the other thing that we need to do is to add a main function to the <em>generator.clj</em> file and to setup up the project so that it can run with <code>lein trampoline run</code>.</p>
<p>So first, modify the <em>project.clj</em> file to have the <em>at-at</em> library, as well as the main function for the namespace.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure"> <span class="kw">:dependencies</span> [[org.clojure/clojure <span class="st">&quot;1.6.0&quot;</span>]
                 [overtone/at-at <span class="st">&quot;1.2.0&quot;</span>]
                 [twitter-api <span class="st">&quot;0.7.8&quot;</span>]
                 [environ <span class="st">&quot;1.0.0&quot;</span>]]
  <span class="kw">:main</span> markov-elear.generator
  <span class="kw">:min-lein-version</span> <span class="st">&quot;2.0.0&quot;</span>
  <span class="kw">:plugins</span> [[lein-environ <span class="st">&quot;1.0.0&quot;</span>]]
  <span class="kw">:profiles</span> {<span class="kw">:dev</span> {<span class="kw">:plugins</span> [[com.jakemccrary/lein-test-refresh <span class="st">&quot;0.7.0&quot;</span>]]}})</code></pre></div>
<p>Then, going back to the <em>generator.clj</em> file, first add the <em>overtone/at-at</em> library to the namespace. Then, define a pool for the scheduling process, and add in a <code>-main</code> function to tweet for us every 8 hours.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> markov-elear.generator
  (<span class="kw">:require</span> [overtone.at-at <span class="kw">:as</span> overtone]
            [twitter.api.restful <span class="kw">:as</span> twitter]
            [twitter.oauth <span class="kw">:as</span> twitter-oauth]
            [environ.core <span class="kw">:refer</span> [env]]))


(<span class="kw">def</span><span class="fu"> my-pool </span>(overtone/mk-pool))

(<span class="kw">defn</span><span class="fu"> -main </span>[&amp; args]
  <span class="co">;; every 8 hours</span>
  (<span class="kw">println</span> <span class="st">&quot;Started up&quot;</span>)
  (<span class="kw">println</span> (tweet-text))
  (overtone/every (<span class="kw">*</span> <span class="dv">1000</span> <span class="dv">60</span> <span class="dv">60</span> <span class="dv">8</span>) #(<span class="kw">println</span> (status-update)) my-pool))</code></pre></div>
<p>Now we should be able to try this from the command line.</p>
<pre><code>lein trampoline run</code></pre>
<p>and see something like the following</p>
<pre><code>Started up
Are the best of food for me!
generated tweet is : With only a beautiful pea-green veil Tied with a flumpy sound.
char count is: 62
{... :text With only a beautiful pea-green veil Tied with a flumpy sound.}</code></pre>
<p>At this point our program is complete. We could happily leave it running locally. It is much better though, to deploy it somewhere. <a href="http://heroku.com/" class="uri">http://heroku.com/</a> is a fantastic place for this. It provides free hosting and has nice Clojure support.</p>
<h2 id="deploying-to-heroku">Deploying to Heroku</h2>
<p>The first thing you will need to do is to create an account on Heroku. It is free of charge. You can create your login at <a href="https://signup.heroku.com/dc" class="uri">https://signup.heroku.com/dc</a>.</p>
<p>Next, you will need the <em>Heroku Toolbelt</em>. This gives you a nice command line tool to configure and deploy applications. You can download it from <a href="https://devcenter.heroku.com/articles/getting-started-with-clojure#set-up" class="uri">https://devcenter.heroku.com/articles/getting-started-with-clojure#set-up</a>.</p>
<p>Once you have downloaded the tool, you will need to configure it with your username and password. You can do this at the command line by typing <code>heroku login</code>. You will be prompted for your email and password.</p>
<pre><code>-&gt; heroku login
Enter your Heroku credentials.
Email:
Password:</code></pre>
<p>Now you are all set to configure your project.</p>
<p>If you haven’t initialized it yet as a git repo, do so with</p>
<pre><code>git init</code></pre>
<p>After that, we need to tell Heroku how to start up our app. We do this with a <em>Procfile</em> in the main project directory. Go ahead and add the file with the following contents.</p>
<pre><code>worker: lein trampoline run</code></pre>
<p>This will tell Heroku to run our program as a background worker, (rather than a web app), and start it up with <code>lein trampoline run</code>.</p>
<p>The next step is to create an app on Heroku for it. This will get Heroku ready to receive your code for deployment. Type <code>heroku create</code> into your command prompt at the root of the project. You will see.</p>
<pre><code>-&gt; heroku create
Creating calm-reaches-2803... done, stack is cedar-14
https://calm-reaches-2803.herokuapp.com/ | https://git.heroku.com/calm-reaches-2803.git
Git remote heroku added</code></pre>
<p>It created a random application name for you, (which you can rename later through the console). It also added a repository called <em>heroku</em> to our git config. Once we push our code here, it will automatically deploy.</p>
<p>You will also need to setup your Twitter creditionals on the Heroku account so it will be able to talk to it. You can do this with <a href="https://devcenter.heroku.com/articles/config-vars">heroku config</a>.</p>
<p>You need to do a command line <code>heroku config</code> for each one of our configurations:</p>
<pre><code>heroku config:set APP_CONSUMER_KEY=foo
heroku config:set APP_CONSUMER_SECRET=bar
heroku config:set USER_ACCESS_TOKEN=foo2
heroku config:set USER_ACCESS_SECRET=bar2</code></pre>
<p>Finally, we can push all of our changes to Heroku with:</p>
<pre><code>git push heroku master</code></pre>
<p>You should see it deploy and tweet for you!</p>
<p>If you need to check the logs, you can do it with <code>heroku logs</code>.</p>
<p>We have successfully created and deployed a markov bot that will tweet for us. Let’s recap what we have done so far.</p>
<h2 id="summary">Summary</h2>
<ul>
<li>Use Emacs REPL integration to play and experiment with the code. This is what I call an early sculpting with code phase, or <em>REPL Driven Development</em>.</li>
<li>As soon as we have a good idea where we are headed, switch into a more Test Driven Development cycle with the <em>lein-test-refresh</em> plugin.</li>
<li>Create the core of our code to generate and walk our Markov Chain.</li>
<li>Create ways to parse input text files to <em>train</em> our bot on.</li>
<li>Artistically select some entry points into our chain using prefixes. Also artistically, fix up the puncuation of the resulting text.</li>
<li>Set up a Twitter account.</li>
<li>Use the <em>environ</em> library to handle our environment specific twitter configuration.</li>
<li>Use the <em>twitter-api</em> library to talk to the twitter account</li>
<li>Use the <em>at-at</em> library to schedule a job periodically to tweet for us.</li>
<li>Deploy the application to Heroku.</li>
</ul>
<p>I hope you have enjoyed our Clojure bot creating journey. The full code for this project can be found at <a href="https://github.com/gigasquid/markov-elear" class="uri">https://github.com/gigasquid/markov-elear</a>. The twitter bot lives at <a href="https://twitter.com/FunctionalELear">functionalELear</a></p>
<p>I encourage you to experiment and create your own <em>art bots</em> and, of course, to continue to explore and enjoy the wonderful world of Clojure.</p>
<p><em>Special thanks to <a href="https://twitter.com/jakemcc">Jake McCrary</a> and <a href="https://twitter.com/p9k">Paul Henrich</a> for reviewing this post and providing wonderful feedback.</em></p>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/clojure/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Carin Meier</h3>
    <h4>Clojure</h4>
    <h3><small> Author of Living Clojure, Engineer, Entrepreneur</small></h3>
    <p><a href='http://gigasquidsoftware.com'>Carin</a> studied physics in college, and ended up as a software developer. Her passions led her to developing home automation and control libraries for drones. She helps lead the <a href='https://cincyfp.wordpress.com/'>Cincinnati Functional Programmers</a> and is a frequent conference speaker, keynoting OSCON and Strange Loop. To top it off Carin is the author of the upcoming book <a href='http://shop.oreilly.com/product/0636920034292.do'>Living Clojure</a> from O'Reilly.</p>
    <a class="btn btn-primary" href="/posts/clojure/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Nim</title>
    <link href="http://www.howistart.org/posts/nim/1/index.html" />
    <id>http://www.howistart.org/posts/nim/1/index.html</id>
    <published>2015-02-09T00:00:00Z</published>
    <updated>2015-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Nim <small>with Dennis Felsing</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <p><a href="http://nim-lang.org/">Nim</a> is a young and exciting imperative programming language that is nearing its 1.0 release. My main motivation for using Nim is its performance / productivity ratio and the joy of programming in Nim. In this guide I’m going to show you how I start a Nim project.</p>
<p>For this purpose we will write a small interpreter for the <a href="https://en.wikipedia.org/wiki/Brainfuck">brainfuck language</a>. While Nim is a practical language with many interesting features, brainfuck is the opposite: It’s impractical to write in and its features consist of 8 single-character commands. Still, brainfuck is great for us, since its extreme simplicity makes it easy to write an interpreter for it. Later we will even write a high-performance compiler that transforms brainfuck programs into Nim at compile time. We will put all of this into a <a href="https://github.com/nim-lang/nimble">nimble</a> package and <a href="https://github.com/def-/nim-brainfuck">publish it online</a>.</p>
<h2 id="installation">Installation</h2>
<p>Installing Nim is straightforward, you can follow the <a href="http://nim-lang.org/download.html">official instructions</a>. Binaries for Windows are provided. On other operating systems you can run the <code>build.sh</code> script to compile the generated C code, which should take less than 1 minute on a modern system.</p>
<p>This brings us to the first interesting fact about Nim: It compiles to C primarily (C++, ObjectiveC and even JavaScript as well) and then uses the highly optimizing C compiler of your choice to generate the actual program. You get to benefit from the mature C ecosystem for free.</p>
<p>If you opt for bootstrapping the <a href="https://github.com/Araq/Nim">Nim compiler</a>, which is written exclusively in Nim itself, you get to witness the compiler build itself with a few simple steps (in less than 2 minutes):</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> clone https://github.com/Araq/Nim
$ <span class="kw">cd</span> Nim
$ <span class="kw">git</span> clone --depth 1 https://github.com/nim-lang/csources
$ <span class="kw">cd</span> csources <span class="kw">&amp;&amp;</span> <span class="kw">sh</span> build.sh
$ <span class="kw">cd</span> ..
$ <span class="kw">bin/nim</span> c koch
$ <span class="kw">./koch</span> boot -d:release</code></pre></div>
<p>This way you get a development version of Nim. To keep it up to date these two steps should be enough:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> pull
$ <span class="kw">./koch</span> boot -d:release</code></pre></div>
<p>If you haven’t done so already, now is a good time to install <code>git</code> as well. Most nimble packages are available on github, so we will need <code>git</code> to get them. On a Debian based distribution (like Ubuntu) we can install it like this:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">sudo</span> apt-get install git</code></pre></div>
<p>After you’ve finished the installation, you should add the <code>nim</code> binary to your path. If you use bash, this is what to do:</p>
<pre><code>$ echo &#39;export PATH=$PATH:$your_install_dir/bin&#39; &gt;&gt; ~/.profile
$ source ~/.profile
$ nim
Nim Compiler Version 0.10.2 (2014-12-29) [Linux: amd64]
Copyright (c) 2006-2014 by Andreas Rumpf
::

    nim command [options] [projectfile] [arguments]

Command:
  compile, c                compile project with default code generator (C)
  doc                       generate the documentation for inputfile
  doc2                      generate the documentation for the whole project
  i                         start Nim in interactive mode (limited)
...</code></pre>
<p>If <code>nim</code> reports its version and usage, we’re good to continue. Now the modules from <a href="http://nim-lang.org/lib.html">Nim’s standard library</a> are just an import away. All other packages can be retrieved with <a href="https://github.com/nim-lang/nimble">nimble</a>, Nim’s package manager. Let’s follow the <a href="https://github.com/nim-lang/nimble#nimble">simple installation instructions</a>. Again, for Windows a <a href="https://github.com/nim-lang/nimble/releases">prebuilt archive</a> is available, while building from source is quite comfortable as well:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> clone https://github.com/nim-lang/nimble
$ <span class="kw">cd</span> nimble
$ <span class="kw">nim</span> c -r src/nimble install</code></pre></div>
<p>Nimble’s binary directory wants to be added to your path as well:</p>
<pre><code>$ echo &#39;export PATH=$PATH:$HOME/.nimble/bin&#39; &gt;&gt; ~/.profile
$ source ~/.profile
$ nimble update
Downloading package list from https://github.com/nim-lang/packages/raw/master/packages.json
Done.</code></pre>
<p>Now we can browse the available <a href="http://nim-lang.org/lib.html#nimble">nimble packages</a> or search for them on the command line:</p>
<pre><code>$ nimble search docopt
docopt:
  url:         git://github.com/docopt/docopt.nim (git)
  tags:        commandline, arguments, parsing, library
  description: Command-line args parser based on Usage message
  license:     MIT
  website:     https://github.com/docopt/docopt.nim</code></pre>
<p>Let’s install this nice <a href="https://github.com/docopt/docopt.nim">docopt library</a> we found, maybe we’ll need it later:</p>
<pre><code>$ nimble install docopt
...
docopt installed successfully.</code></pre>
<p>Notice how quickly the library is installed (less than 1 second for me). This is another nice effect of Nim. Basically the source code of the library is just downloaded, nothing resembling a shared library is compiled. Instead the library will simply be compiled statically into our program once we use it.</p>
<p>There is <a href="https://github.com/Araq/Nim/wiki/Editor-Support">Nim editor support</a> for most of the popular editors out there, like Emacs (<a href="https://github.com/reactormonk/nim-mode">nim-mode</a>), Vim (<a href="https://github.com/zah/nimrod.vim/">nimrod.vim</a>, my choice) and Sublime (<a href="https://github.com/Varriount/NimLime">NimLime</a>). For the scope of this guide any text editor will do.</p>
<h2 id="project-setup">Project Setup</h2>
<p>Now we’re ready to get our project started:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">mkdir</span> brainfuck
$ <span class="kw">cd</span> brainfuck</code></pre></div>
<p>First step: To get <code>Hello World</code> on the terminal, we create a <code>hello.nim</code> with the following content:</p>
<pre class="nimrod"><code>echo &quot;Hello World&quot;</code></pre>
<p>We compile the code and run it, first in two separate steps:</p>
<pre><code>$ nim c hello
$ ./hello
Hello World</code></pre>
<p>Then in a single step, by instructing the Nim compiler to conveniently run the resulting binary immediately after creating it:</p>
<pre><code>$ nim c -r hello
Hello World</code></pre>
<p>Let’s make our code do something slightly more complicated, that should take a bit longer to run:</p>
<pre class="nimrod"><code>var x = 0
for i in 1 .. 100_000_000:
  inc x # increase x, this is a comment btw

echo &quot;Hello World &quot;, x</code></pre>
<p>Now we’re initializing the variable <code>x</code> to 0 and increase it by 1 a whole 100 million times. Try to compile and run it again. Notice how long it takes to run now. Is Nim’s performance that abysmal? Of course not, quite the opposite! We’re just currently building the binary in full debug mode, adding checks for integer overflows, array out of bounds and much more, as well as not optimizing the binary at all. The <code>-d:release</code> option allows us to switch into release mode, giving us full speed:</p>
<pre><code>$ nim c hello
$ time ./hello
Hello World 100000000
./hello  2.01s user 0.00s system 99% cpu 2.013 total
$ nim -d:release c hello
$ time ./hello
Hello World 100000000
./hello  0.00s user 0.00s system 74% cpu 0.002 total</code></pre>
<p>That’s a bit too fast actually. The C compiler optimized away the entire <code>for</code> loop. Oops.</p>
<p>To start a new project <code>nimble init</code> can generate a basic package config file:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">nimble</span> init brainfuck</code></pre></div>
<p>The newly created <code>brainfuck.nimble</code> should look like this:</p>
<pre><code>[Package]
name          = &quot;brainfuck&quot;
version       = &quot;0.1.0&quot;
author        = &quot;Anonymous&quot;
description   = &quot;New Nimble project for Nim&quot;
license       = &quot;BSD&quot;

[Deps]
Requires: &quot;nim &gt;= 0.10.0&quot;</code></pre>
<p>Let’s add the actual author, a description, as well as the requirement for docopt, as described in <a href="https://github.com/nim-lang/nimble/blob/master/developers.markdown">nimble’s developers info</a>. Most importantly, let’s set the binary we want to create:</p>
<pre><code>[Package]
name          = &quot;brainfuck&quot;
version       = &quot;0.1.0&quot;
author        = &quot;The &#39;How I Start Nim&#39; Team&quot;
description   = &quot;A brainfuck interpreter&quot;
license       = &quot;MIT&quot;

bin           = &quot;brainfuck&quot;

[Deps]
Requires: &quot;nim &gt;= 0.10.0, docopt &gt;= 0.1.0&quot;</code></pre>
<p>Since we have git installed already, we’ll want to keep revisions of our source code and may want to publish them online at some point, let’s initialize a git repository:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> init
$ <span class="kw">git</span> add hello.nim brainfuck.nimble .gitignore</code></pre></div>
<p>Where I just initialized the <code>.gitignore</code> file to this:</p>
<pre><code>nimcache/
*.swp</code></pre>
<p>We tell git to ignore vim’s swap files, as well as <code>nimcache</code> directories that contain the generated C code for our project. Check it out if you’re curious how Nim compiles to C.</p>
<p>To see what nimble can do, let’s initialize <code>brainfuck.nim</code>, our main program:</p>
<pre class="nimrod"><code>echo &quot;Welcome to brainfuck&quot;</code></pre>
<p>We could compile it as we did before for <code>hello.nim</code>, but since we already set our package up to include the <code>brainfuck</code> binary, let’s make <code>nimble</code> do the work:</p>
<pre><code>$ nimble build
Looking for docopt (&gt;= 0.1.0)...
Dependency already satisfied.
Building brainfuck/brainfuck using c backend...
...
$ ./brainfuck
Welcome to brainfuck</code></pre>
<p><code>nimble install</code> can be used to install the binary on our system, so that we can run it from anywhere:</p>
<pre><code>$ nimble install
...
brainfuck installed successfully.
$ brainfuck
Welcome to brainfuck</code></pre>
<p>This is great for when the program works, but <code>nimble build</code> actually does a release build for us. That takes a bit longer than a debug build, and leaves out the checks which are so important during development, so <code>nim c -r brainfuck</code> will be a better fit for now. Feel free to execute our program quite often during development to get a feeling for how everything works.</p>
<h2 id="coding">Coding</h2>
<p>While programming Nim’s <a href="http://nim-lang.org/documentation.html">documentation</a> comes in handy. If you don’t know where to find what yet, there’s a <a href="http://nim-lang.org/theindex.html">documentation index</a>, in which you can search.</p>
<p>Let’s start developing our interpreter by changing the <code>brainfuck.nim</code> file:</p>
<pre class="nimrod"><code>import os</code></pre>
<p>First we import the <a href="http://nim-lang.org/os.html">os module</a>, so that we can read command line arguments.</p>
<pre class="nimrod"><code>let code = if paramCount() &gt; 0: readFile paramStr(1)
           else: readAll stdin</code></pre>
<p><code>paramCount()</code> tells us about the number of command line arguments passed to the application. If we get a command line argument, we assume it’s a filename, and read it in directly with <code>readFile paramStr(1)</code>. Otherwise we read everything from the standard input. In both cases, the result is stored in the <code>code</code> variable, which has been declared immutable with the <code>let</code> keyword.</p>
<p>To see if this works, we can <code>echo</code> the <code>code</code>:</p>
<pre class="nimrod"><code>echo code</code></pre>
<p>And try it out:</p>
<pre><code>$ nim c -r brainfuck
...
Welcome to brainfuck
I&#39;m entering something here and it is printed back later!
I&#39;m entering something here and it is printed back later!</code></pre>
<p>After you’ve entered your “code” finish up with a newline and ctrl-d. Or you can pass in a filename, everything after <code>nim c -r brainfuck</code> is passed as command line arguments to the resulting binary:</p>
<pre><code>$ nim c -r brainfuck .gitignore
...
Welcome to brainfuck
nimcache/
*.swp</code></pre>
<p>On we go:</p>
<pre class="nimrod"><code>var
  tape = newSeq[char]()
  codePos = 0
  tapePos = 0</code></pre>
<p>We declare a few variables that we’ll need. We have to remember our current position in the <code>code</code> string (<code>codePos</code>) as well as on the <code>tape</code> (<code>tapePos</code>). Brainfuck works on an infinitely growing <code>tape</code>, which we represent as a <code>seq</code> of <code>char</code>s. Sequences are Nim’s dynamic length arrays, other than with <code>newSeq</code> they can also be initialized using <code>var x = @[1, 2, 3]</code>.</p>
<p>Let’s take a moment to appreciate that we don’t have to specify the type of our variables, it is automatically inferred. If we wanted to be more explicit, we could do so:</p>
<pre class="nimrod"><code>var
  tape: seq[char] = newSeq[char]()
  codePos: int = 0
  tapePos: int = 0</code></pre>
<p>Next we write a small procedure, and call it immediately afterwards:</p>
<pre class="nimrod"><code>proc run(skip = false): bool =
  echo &quot;codePos: &quot;, codePos, &quot; tapePos: &quot;, tapePos

discard run()</code></pre>
<p>There are a few things to note here:</p>
<ul>
<li>We pass a <code>skip</code> parameter, initialized to <code>false</code>.</li>
<li>Obviously the parameter must be of type <code>bool</code> then.</li>
<li>The return type is <code>bool</code> as well, but we return nothing? Every result is initialized to binary 0 by default, meaning we return <code>false</code>.</li>
<li>We can use the implicit <code>result</code> variable in every proc with a result and set <code>result = true</code>.</li>
<li>Control flow can be changed by using <code>return true</code> to return immediately.</li>
<li>We have to explicitly <code>discard</code> the returned bool value when calling <code>run()</code>. Otherwise the compiler complains with <code>brainfuck.nim(16, 3) Error: value of   type 'bool' has to be discarded</code>. This is to prevent us from forgetting to handle the result.</li>
</ul>
<p>Before we continue, let’s think about the way brainfuck works. Some of this may look familiar if you’ve encountered Turing machines before. We have an input string <code>code</code> and a <code>tape</code> of <code>char</code>s that can grow infinitely in one direction. These are the 8 commands that can occur in the input string, every other character is ignored:</p>
<table>
<thead>
<tr class="header">
<th align="center">Op</th>
<th align="left">Meaning</th>
<th align="left">Nim equivalent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="center"><code>&gt;</code></td>
<td align="left">move right on tape</td>
<td align="left"><code>inc tapePos</code></td>
</tr>
<tr class="even">
<td align="center"><code>&lt;</code></td>
<td align="left">move left on tape</td>
<td align="left"><code>dec tapePos</code></td>
</tr>
<tr class="odd">
<td align="center"><code>+</code></td>
<td align="left">increment value on tape</td>
<td align="left"><code>inc tape[tapePos]</code></td>
</tr>
<tr class="even">
<td align="center"><code>-</code></td>
<td align="left">decrement value on tape</td>
<td align="left"><code>dec tape[tapePos]</code></td>
</tr>
<tr class="odd">
<td align="center"><code>.</code></td>
<td align="left">output value on tape</td>
<td align="left"><code>stdout.write tape[tapePos]</code></td>
</tr>
<tr class="even">
<td align="center"><code>,</code></td>
<td align="left">input value to tape</td>
<td align="left"><code>tape[tapePos] = stdin.readChar</code></td>
</tr>
<tr class="odd">
<td align="center"><code>[</code></td>
<td align="left">if value on tape is <code>\0</code>, jump forward to command after matching <code>]</code></td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="center"><code>]</code></td>
<td align="left">if value on tape is not <code>\0</code>, jump back to command after matching <code>[</code></td>
<td align="left"></td>
</tr>
</tbody>
</table>
<p>With this alone, brainfuck is one of the simplest Turing complete programming languages.</p>
<p>The first 6 commands can easily be converted into a case distinction in Nim:</p>
<pre class="nimrod"><code>proc run(skip = false): bool =
  case code[codePos]
  of &#39;+&#39;: inc tape[tapePos]
  of &#39;-&#39;: dec tape[tapePos]
  of &#39;&gt;&#39;: inc tapePos
  of &#39;&lt;&#39;: dec tapePos
  of &#39;.&#39;: stdout.write tape[tapePos]
  of &#39;,&#39;: tape[tapePos] = stdin.readChar
  else: discard</code></pre>
<p>We are handling a single character from the input so far, let’s make this a loop to handle them all:</p>
<pre class="nimrod"><code>proc run(skip = false): bool =
  while tapePos &gt;= 0 and codePos &lt; code.len:
    case code[codePos]
    of &#39;+&#39;: inc tape[tapePos]
    of &#39;-&#39;: dec tape[tapePos]
    of &#39;&gt;&#39;: inc tapePos
    of &#39;&lt;&#39;: dec tapePos
    of &#39;.&#39;: stdout.write tape[tapePos]
    of &#39;,&#39;: tape[tapePos] = stdin.readChar
    else: discard

    inc codePos</code></pre>
<p>Let’s try a simple program, like this:</p>
<pre><code>$ echo &quot;&gt;+&quot; | nim -r c brainfuck
Welcome to brainfuck
Traceback (most recent call last)
brainfuck.nim(26)        brainfuck
brainfuck.nim(16)        run
Error: unhandled exception: index out of bounds [IndexError]
Error: execution of an external program failed</code></pre>
<p>What a shocking result, our code crashes! What did we do wrong? The tape is supposed to grow infinitely, but we haven’t increased its size at all! That’s an easy fix right above the <code>case</code>:</p>
<pre class="nimrod"><code>    if tapePos &gt;= tape.len:
      tape.add &#39;\0&#39;</code></pre>
<p>The last 2 commands, <code>[</code> and <code>]</code> form a simple loop. We can encode them into our code as well:</p>
<pre class="nimrod"><code>proc run(skip = false): bool =
  while tapePos &gt;= 0 and codePos &lt; code.len:
    if tapePos &gt;= tape.len:
      tape.add &#39;\0&#39;

    if code[codePos] == &#39;[&#39;:
      inc codePos
      let oldPos = codePos
      while run(tape[tapePos] == &#39;\0&#39;):
        codePos = oldPos
    elif code[codePos] == &#39;]&#39;:
      return tape[tapePos] != &#39;\0&#39;
    elif not skip:
      case code[codePos]
      of &#39;+&#39;: inc tape[tapePos]
      of &#39;-&#39;: dec tape[tapePos]
      of &#39;&gt;&#39;: inc tapePos
      of &#39;&lt;&#39;: dec tapePos
      of &#39;.&#39;: stdout.write tape[tapePos]
      of &#39;,&#39;: tape[tapePos] = stdin.readChar
      else: discard

    inc codePos</code></pre>
<p>If we encounter a <code>[</code> we recursively call the <code>run</code> function itself, looping until the corresponding <code>]</code> lands on a <code>tapePos</code> that doesn’t have <code>\0</code> on the tape.</p>
<p>If you’re on Nim 0.11 or a newer version, you’ll run into another problem: The <code>inc</code> and <code>dec</code> procs for <code>char</code>s have overflow (and underflow) checks. This means that when we have the character <code>\0</code> and decrement it, we end up with a runtime error! Instead, in brainfuck, we want to wrap around and get <code>\255</code> instead. We cold use a <code>uint8</code> instead of a <code>char</code>, because unsigned ints wrap around in Nim. But then we have to convert that <code>uint8</code> to a <code>char</code> sometimes and the other way around. A more convenient way is to define our own, non-overflow-checking <code>xinc</code> and <code>xdec</code> procs:</p>
<pre class="nimrod"><code>{.push overflowchecks: off.}
proc xinc(c: var char) = inc c
proc xdec(c: var char) = dec c
{.pop.}</code></pre>
<p>We use Nim’s pragma system to disable overflow checks just for this part of the code, not touching the settings for the rest of the program. Now of course two cases have to change:</p>
<pre class="nimrod"><code>      of &#39;+&#39;: xinc tape[tapePos]
      of &#39;-&#39;: xdec tape[tapePos]</code></pre>
<p>And that’s it. We have a working brainfuck interpreter now. To test it, we create an <code>examples</code> directory containing these 3 files: <a href="/posts/nim/1/examples/helloworld.b">helloworld.b</a>, <a href="/posts/nim/1/examples/rot13.b">rot13.b</a>, <a href="/posts/nim/1/examples/mandelbrot.b">mandelbrot.b</a>.</p>
<pre><code>$ nim -r c brainfuck examples/helloworld.b
Welcome to brainfuck
Hello World!
$ ./brainfuck examples/rot13.b
Welcome to brainfuck
You can enter anything here!
Lbh pna ragre nalguvat urer!
ctrl-d
$ ./brainfuck examples/mandelbrot.b</code></pre>
<div class="figure">
<img src="/posts/nim/1/images/mandelbrot.png" />

</div>
<p>With the last one you will notice how slow our interpreter is. Compiling with <code>-d:release</code> gives a nice speedup, but still takes about 90 seconds on my machine to draw the Mandelbrot set. To achieve a great speedup, later on we will compile brainfuck to Nim instead of interpreting it. Nim’s metaprogramming capabilities are perfect for this.</p>
<p>But let’s keep it simple for now. Our interpreter is working, now we can turn our work into a reusable library. All we have to do is surround our code with a big <code>proc</code>:</p>
<pre class="nimrod"><code>proc interpret*(code: string) =
  var
    tape = newSeq[char]()
    codePos = 0
    tapePos = 0

  proc run(skip = false): bool =
    ...

  discard run()

when isMainModule:
  import os

  echo &quot;Welcome to brainfuck&quot;

  let code = if paramCount() &gt; 0: readFile paramStr(1)
             else: readAll stdin

  interpret code</code></pre>
<p>Note that we also added a <code>*</code> to the proc, which indicates that it is exported and can be accessed from outside of our module. Everything else is hidden.</p>
<p>At the end of the file we still kept the code for our binary. <code>when isMainModule</code> ensures that this code is only compiled when this module is the main one. After a quick <code>nimble install</code> our brainfuck library can be used from anywhere on your system, just like this:</p>
<pre class="nimrod"><code>import brainfuck
interpret &quot;++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.&quot;</code></pre>
<p>Looking good! At this point we could share the code with others already, but let’s add some documentation first:</p>
<pre class="nimrod"><code>proc interpret*(code: string) =
  ## Interprets the brainfuck `code` string, reading from stdin and writing to
  ## stdout.
  ...</code></pre>
<p><code>nim doc brainfuck</code> builds the documentation, which you can <a href="http://hookrace.net/nim-brainfuck/brainfuck.html">see online</a> in its full glory.</p>
<h2 id="metaprogramming">Metaprogramming</h2>
<p>As I said before, our interpreter is still pretty slow for the mandelbrot program. Let’s write a procedure that creates <a href="http://nim-lang.org/docs/macros.html">Nim code AST</a> at compile time instead:</p>
<pre class="nimrod"><code>import macros

proc compile(code: string): PNimrodNode {.compiletime.} =
  var stmts = @[newStmtList()]

  template addStmt(text): stmt =
    stmts[stmts.high].add parseStmt(text)

  addStmt &quot;var tape: array[1_000_000, char]&quot;
  addStmt &quot;var tapePos = 0&quot;

  for c in code:
    case c
    of &#39;+&#39;: addStmt &quot;xinc tape[tapePos]&quot;
    of &#39;-&#39;: addStmt &quot;xdec tape[tapePos]&quot;
    of &#39;&gt;&#39;: addStmt &quot;inc tapePos&quot;
    of &#39;&lt;&#39;: addStmt &quot;dec tapePos&quot;
    of &#39;.&#39;: addStmt &quot;stdout.write tape[tapePos]&quot;
    of &#39;,&#39;: addStmt &quot;tape[tapePos] = stdin.readChar&quot;
    of &#39;[&#39;: stmts.add newStmtList()
    of &#39;]&#39;:
      var loop = newNimNode(nnkWhileStmt)
      loop.add parseExpr(&quot;tape[tapePos] != &#39;\\0&#39;&quot;)
      loop.add stmts.pop
      stmts[stmts.high].add loop
    else: discard

  result = stmts[0]
  echo result.repr</code></pre>
<p>The template <code>addStmt</code> is just there to reduce boilerplate. We could also explicitly write the same operation at each position that currently uses <code>addStmt</code>. (And that’s exactly what a template does!) <code>parseStmt</code> turns a piece of Nim code from a string into its corresponding AST, which we store in a list.</p>
<p>Most of the code is similar to the interpreter, except we’re not executing the code now, but generating it, and adding it to a list of statements. <code>[</code> and <code>]</code> are more complicated: They get translated into a while loop surrounding the code inbetween.</p>
<p>We’re cheating a bit here because we use a fixed size <code>tape</code> now and don’t check for under- and overflows anymore. This is mainly for the sake of simplicity. To see what this code does, the last line, namely <code>echo result.repr</code> prints the Nim code we generated.</p>
<p>Try it out by calling it inside a <code>static</code> block, which forces execution at compile time:</p>
<pre class="nimrod"><code>static:
  discard compile &quot;+&gt;+[-]&gt;,.&quot;</code></pre>
<p>During compilation the generated code is printed:</p>
<pre class="nimrod"><code>var tape: array[1000000, char]
var codePos = 0
var tapePos = 0
xinc tape[tapePos]
inc tapePos
xinc tape[tapePos]
while tape[tapePos] != &#39;\0&#39;:
  xdec tape[tapePos]
inc tapePos
tape[tapePos] = stdin.readChar
stdout.write tape[tapePos]</code></pre>
<p>Generally useful for writing macros is the <code>dumpTree</code> macro, which prints the AST of a piece of code (actual one, not as a string), for example:</p>
<pre class="nimrod"><code>import macros

dumpTree:
  while tape[tapePos] != &#39;\0&#39;:
    inc tapePos</code></pre>
<p>This shows us the following Tree:</p>
<pre><code>StmtList
  WhileStmt
    Infix
      Ident !&quot;!=&quot;
      BracketExpr
        Ident !&quot;tape&quot;
        Ident !&quot;tapePos&quot;
      CharLit 0
    StmtList
      Command
        Ident !&quot;inc&quot;
        Ident !&quot;tapePos&quot;</code></pre>
<p>That’s how I knew that we would need a <code>StmtList</code>, for example. When you do metaprogramming in Nim, it’s generally a good idea to use <code>dumpTree</code> and print out the AST of the code you want to generate.</p>
<p>Macros can be used to insert the generated code into a program directly:</p>
<pre class="nimrod"><code>macro compileString*(code: string): stmt =
  ## Compiles the brainfuck `code` string into Nim code that reads from stdin
  ## and writes to stdout.
  compile code.strval

macro compileFile*(filename: string): stmt =
  ## Compiles the brainfuck code read from `filename` at compile time into Nim
  ## code that reads from stdin and writes to stdout.
  compile staticRead(filename.strval)</code></pre>
<p>We can now compile the mandelbrot program into Nim easily:</p>
<pre class="nimrod"><code>proc mandelbrot = compileFile &quot;examples/mandelbrot.b&quot;

mandelbrot()</code></pre>
<p>Compiling with full optimizations takes quite long now (about 4 seconds), because the mandelbrot program is huge and GCC needs some time to optimize it. In return the program runs in just 1 second:</p>
<pre><code>$ nim -d:release c brainfuck
$ ./brainfuck</code></pre>
<h2 id="compiler-settings">Compiler settings</h2>
<p>By default Nim compiles its intermediate C code with GCC, but clang usually compiles faster and may even yield more efficient code. It’s always worth a try. To compile once with clang, use <code>nim -d:release --cc:clang c hello</code>. If you want to keep compiling <code>hello.nim</code> with clang, create a <code>hello.nim.cfg</code> file with the content <code>cc = clang</code>. To change the default backend compiler, edit <code>config/nim.cfg</code> in Nim’s directory.</p>
<p>While we’re talking about changing default compiler options. The Nim compiler is quite talky at times, which can be disabled by setting <code>hints = off</code> in the Nim compiler’s <code>config/nim.cfg</code>. One of the more unexpected compiler warnings even warns you if you use <code>l</code> (lowercase <code>L</code>) as an identifier, because it may look similar to <code>1</code> (one):</p>
<pre><code>a.nim(1, 4) Warning: &#39;l&#39; should not be used as an identifier; may look like &#39;1&#39; (one) [SmallLshouldNotBeUsed]</code></pre>
<p>If you’re not a fan of this, a simple <code>warning[SmallLshouldNotBeUsed] = off</code> suffices to make the compiler shut up.</p>
<p>Another advantage of Nim is that we can use debuggers with C support, like GDB. Simply compile your program with <code>nim c --linedir:on --debuginfo c hello</code> and <code>gdb ./hello</code> can be used to debug your program.</p>
<h2 id="command-line-argument-parsing">Command line argument parsing</h2>
<p>So far we’ve been parsing the command line argument by hand. Since we already installed the <a href="https://github.com/docopt/docopt.nim">docopt.nim</a> library before, we can use it now:</p>
<pre class="nimrod"><code>when isMainModule:
  import docopt, tables, strutils

  proc mandelbrot = compileFile(&quot;examples/mandelbrot.b&quot;)

  let doc = &quot;&quot;&quot;
brainfuck

Usage:
  brainfuck mandelbrot
  brainfuck interpret [&lt;file.b&gt;]
  brainfuck (-h | --help)
  brainfuck (-v | --version)

Options:
  -h --help     Show this screen.
  -v --version  Show version.
&quot;&quot;&quot;

  let args = docopt(doc, version = &quot;brainfuck 1.0&quot;)

  if args[&quot;mandelbrot&quot;]:
    mandelbrot()

  elif args[&quot;interpret&quot;]:
    let code = if args[&quot;&lt;file.b&gt;&quot;]: readFile($args[&quot;&lt;file.b&gt;&quot;])
               else: readAll stdin

    interpret(code)</code></pre>
<p>The nice thing about docopt is that the documentation functions as the specification. Pretty simple to use:</p>
<pre><code>$ nimble install
...
brainfuck installed successfully.
$ brainfuck -h
brainfuck

Usage:
  brainfuck mandelbrot
  brainfuck interpret [&lt;file.b&gt;]
  brainfuck (-h | --help)
  brainfuck (-v | --version)

Options:
  -h --help     Show this screen.
  -v --version  Show version.
$ brainfuck interpret examples/helloworld.b
Hello World!</code></pre>
<h2 id="refactoring">Refactoring</h2>
<p>Since our project is growing, we move the main source code into a <code>src</code> directory and add a <code>tests</code> directory, which we will soon need, resulting in a final directory structure like this:</p>
<pre><code>$ tree
.
├── brainfuck.nimble
├── examples
│   ├── helloworld.b
│   ├── mandelbrot.b
│   └── rot13.b
├── license.txt
├── readme.md
├── src
│   └── brainfuck.nim
└── tests
    ├── all.nim
    ├── compile.nim
    ├── interpret.nim
    └── nim.cfg</code></pre>
<p>This also requires us to change the nimble file:</p>
<pre><code>srcDir = &quot;src&quot;
bin    = &quot;brainfuck&quot;</code></pre>
<p>To improve reusability of our code, we turn to refactoring it. The main concern is that we always read from stdin and write to stdout.</p>
<p>Instead of accepting just a <code>code: string</code> as its parameter, we extend the <code>interpret</code> procedure to also receive an input and output stream. This uses the <a href="http://nim-lang.org/streams.html">streams module</a> that provides <code>FileStream</code>s and <code>StringStream</code>s:</p>
<pre class="nimrod"><code>## :Author: Dennis Felsing
##
## This module implements an interpreter for the brainfuck programming language
## as well as a compiler of brainfuck into efficient Nim code.
##
## Example:
##
## .. code:: nim
##   import brainfuck, streams
##
##   interpret(&quot;++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.&quot;)
##   # Prints &quot;Hello World!&quot;
##
##   proc mandelbrot = compileFile(&quot;examples/mandelbrot.b&quot;)
##   mandelbrot() # Draws a mandelbrot set

import streams

proc interpret*(code: string; input, output: Stream) =
  ## Interprets the brainfuck `code` string, reading from `input` and writing
  ## to `output`.
  ##
  ## Example:
  ##
  ## .. code:: nim
  ##   var inpStream = newStringStream(&quot;Hello World!\n&quot;)
  ##   var outStream = newFileStream(stdout)
  ##   interpret(readFile(&quot;examples/rot13.b&quot;), inpStream, outStream)</code></pre>
<p>I’ve also added some module wide documentation, including example code for how our library can be used. Take a look at the <a href="http://hookrace.net/nim-brainfuck/brainfuck.html">resulting documentation</a>.</p>
<p>Most of the code stays the same, except the handling of brainfuck operations <code>.</code> and <code>,</code>, which now use <code>output</code> instead of <code>stdout</code> and <code>input</code> instead of <code>stdin</code>:</p>
<pre class="nimrod"><code>        of &#39;.&#39;: output.write tape[tapePos]
        of &#39;,&#39;: tape[tapePos] = input.readCharEOF</code></pre>
<p>What is this strange <code>readCharEOF</code> doing there instead of <code>readChar</code>? On many systems <code>EOF</code> (end of file) means <code>-1</code>. Our brainfuck programs actively use this. This means our brainfuck programs might actually not run on all systems. Meanwhile the streams module strives to be platform independent, so it returns a <code>0</code> if we have reached <code>EOF</code>. We use <code>readCharEOF</code> to convert this into a <code>-1</code> for brainfuck explicitly:</p>
<pre class="nimrod"><code>proc readCharEOF*(input: Stream): char =
  result = input.readChar
  if result == &#39;\0&#39;: # Streams return 0 for EOF
    result = &#39;\255&#39;  # BF assumes EOF to be -1</code></pre>
<p>At this point you may notice that the order of identifier declarations matters in Nim. If you declare <code>readCharEOF</code> below <code>interpret</code>, you can not use it in <code>interpret</code>. I personally try to adhere to this, as it creates a hierarchy from simple code to more complex code in each module. If you still want to circumvent this , split declaration and definition of <code>readCharEOF</code> by adding this declaration above <code>interpret</code>:</p>
<pre class="nimrod"><code>proc readCharEOF*(input: Stream): char</code></pre>
<p>The code to use the interpreter as conveniently as before is pretty simple:</p>
<pre class="nimrod"><code>proc interpret*(code, input: string): string =
  ## Interprets the brainfuck `code` string, reading from `input` and returning
  ## the result directly.
  var outStream = newStringStream()
  interpret(code, input.newStringStream, outStream)
  result = outStream.data

proc interpret*(code: string) =
  ## Interprets the brainfuck `code` string, reading from stdin and writing to
  ## stdout.
  interpret(code, stdin.newFileStream, stdout.newFileStream)</code></pre>
<p>Now the <code>interpret</code> procedure can be used to return a string. This will be important for testing later:</p>
<pre class="nimrod"><code>let res = interpret(readFile(&quot;examples/rot13.b&quot;), &quot;Hello World!\n&quot;)
interpret(readFile(&quot;examples/rot13.b&quot;)) # with stdout</code></pre>
<p>For the compiler the cleanup is a bit more complicated. First we have to take the <code>input</code> and <code>output</code> as strings, so that the user of this proc can use any stream they want:</p>
<pre class="nimrod"><code>proc compile(code, input, output: string): PNimrodNode {.compiletime.} =</code></pre>
<p>Two additional statements are necessary to initialize the input and output streams to the passed strings:</p>
<pre class="nimrod"><code>  addStmt &quot;var inpStream = &quot; &amp; input
  addStmt &quot;var outStream = &quot; &amp; output</code></pre>
<p>Of course now we have to use <code>outStream</code> and <code>inpStream</code> instead of stdout and stdin, as well as <code>readCharEOF</code> instead of <code>readChar</code>. Note that we can directly reuse the <code>readCharEOF</code> procedure from the interpreter, no need to duplicate code:</p>
<pre class="nimrod"><code>    of &#39;.&#39;: addStmt &quot;outStream.write tape[tapePos]&quot;
    of &#39;,&#39;: addStmt &quot;tape[tapePos] = inpStream.readCharEOF&quot;</code></pre>
<p>We also add a statement that will abort compilation with a nice error message if the user of our library uses it wrongly:</p>
<pre class="nimrod"><code>  addStmt &quot;&quot;&quot;
    when not compiles(newStringStream()):
      static:
        quit(&quot;Error: Import the streams module to compile brainfuck code&quot;, 1)
  &quot;&quot;&quot;</code></pre>
<p>To connect the new <code>compile</code> procedure to a <code>compileFile</code> macro that uses stdout and stdin again, we can write:</p>
<pre class="nimrod"><code>macro compileFile*(filename: string): stmt =
  compile(staticRead(filename.strval),
    &quot;stdin.newFileStream&quot;, &quot;stdout.newFileStream&quot;)</code></pre>
<p>To read from an input string and write back to an output string:</p>
<pre class="nimrod"><code>macro compileFile*(filename: string; input, output: expr): stmt =
  result = compile(staticRead(filename.strval),
    &quot;newStringStream(&quot; &amp; $input &amp; &quot;)&quot;, &quot;newStringStream()&quot;)
  result.add parseStmt($output &amp; &quot; = outStream.data&quot;)</code></pre>
<p>This unwieldy code allows us to write a compiled <code>rot13</code> procedure like this, connecting <code>input</code> string and <code>result</code> to the compiled program:</p>
<pre class="nimrod"><code>proc rot13(input: string): string =
  compileFile(&quot;../examples/rot13.b&quot;, input, result)
echo rot13(&quot;Hello World!\n&quot;)</code></pre>
<p>I did the same for <code>compileString</code> for convenience. You can check out the full code of <code>brainfuck.nim</code> <a href="https://github.com/def-/nim-brainfuck/blob/master/src/brainfuck.nim">on Github</a>.</p>
<h2 id="testing">Testing</h2>
<p>There are two main ways of testing code in Nim that you will run across. For small pieces of code you can simply use <code>assert</code>s inside a <code>when isMainModule</code> block at the end of the file. This ensures that the testing code will not be executed when the module is used as a library.</p>
<p>Regular assertions can be turned off in Nim with <code>--assertions:off</code>, which is automatically set when we compile a release build. For this reason instead of <code>assert</code> we use <code>doAssert</code>, which will not be optimized away even in release builds. You will find tests like this at the end of many of the standard library’s modules:</p>
<pre class="nimrod"><code>when isMainModule:
  doAssert align(&quot;abc&quot;, 4) == &quot; abc&quot;
  doAssert align(&quot;a&quot;, 0) == &quot;a&quot;
  doAssert align(&quot;1232&quot;, 6) == &quot; 1232&quot;
  doAssert align(&quot;1232&quot;, 6, &#39;#&#39;) == &quot;##1232&quot;</code></pre>
<p>For a bigger project the <a href="http://nim-lang.org/unittest.html">unittest module</a> comes in handy.</p>
<p>We split up the tests into 3 files in the <code>tests/</code> directory:</p>
<p><code>tests/interpret.nim</code> tests the interpreter. We define a new test suite, containing two testers, each checking the resulting strings:</p>
<pre class="nimrod"><code>import unittest, brainfuck

suite &quot;brainfuck interpreter&quot;:
  test &quot;interpret helloworld&quot;:
    let helloworld = readFile(&quot;examples/helloworld.b&quot;)
    check interpret(helloworld, input = &quot;&quot;) == &quot;Hello World!\n&quot;

  test &quot;interpret rot13&quot;:
    let rot13 = readFile(&quot;examples/rot13.b&quot;)
    let conv = interpret(rot13, &quot;How I Start\n&quot;)
    check conv == &quot;Ubj V Fgneg\n&quot;
    check interpret(rot13, conv) == &quot;How I Start\n&quot;</code></pre>
<p>Similarly for <code>tests/compile.nim</code> to test our compiler:</p>
<pre class="nimrod"><code>import unittest, brainfuck, streams

suite &quot;brainfuck compiler&quot;:
  test &quot;compile helloworld&quot;:
    proc helloworld: string =
      compileFile(&quot;../examples/helloworld.b&quot;, &quot;&quot;, result)
    check helloworld() == &quot;Hello World!\n&quot;

  test &quot;compile rot13&quot;:
    proc rot13(input: string): string =
      compileFile(&quot;../examples/rot13.b&quot;, input, result)
    let conv = rot13(&quot;How I Start\n&quot;)
    check conv == &quot;Ubj V Fgneg\n&quot;
    check rot13(conv) == &quot;How I Start\n&quot;</code></pre>
<p>Note how we have to read the examples from <code>../examples/</code> with the compiler, instead of <code>examples/</code> with the interpreter. The reason for this is that the compiler’s <code>staticRead</code> opens the files relative to the location of our file, which resides in <code>tests/</code>.</p>
<p>To combine both tests we create a <code>tests/all.nim</code> that only imports and thereby automatically runs all available test suites:</p>
<pre class="nimrod"><code>import interpret, compile</code></pre>
<p>For convenience we also create a <code>tests/nim.cfg</code> that sets some reasonable compiler options for testing and debugging:</p>
<pre class="cfg"><code># $projectPath is tests/
path = &quot;$projectPath/../src&quot;
hints = off
linedir = on
debuginfo
stacktrace = on
linetrace = on</code></pre>
<p>Finally, to compile and run our tests:</p>
<pre><code>$ nim c -r tests/all
[OK] interpret helloworld
[OK] interpret rot13
[OK] compile helloworld
[OK] compile rot13</code></pre>
<p>Great success, our library works! With this we have a fully fledged library, binary and testing framework.</p>
<p>Time to publish <a href="https://github.com/def-/nim-brainfuck">everything on Github</a> and submit a pull request to have <code>brainfuck</code> included in the <a href="https://github.com/nim-lang/packages">nimble packages</a>. Once the package is accepted you can find it in the <a href="http://nim-lang.org/lib.html#nimble">official list</a> and use nimble to search for it and install it:</p>
<pre><code>$ nimble search brainfuck
brainfuck:
  url:         https://github.com/def-/nim-brainfuck.git (git)
  tags:        library, binary, app, interpreter, compiler, language
  description: A brainfuck interpreter and compiler
  license:     MIT
  website:     https://github.com/def-/nim-brainfuck
$ nimble install brainfuck</code></pre>
<h2 id="continuous-integration">Continuous Integration</h2>
<p><a href="https://circleci.com/">CircleCI</a> can be used with Nim for continuous integration, so that our tests are compiled and run whenever a new commit is pushed to Github. Since CircleCI does not know about Nim itself, we have to teach it how to bootstrap the compiler:</p>
<div class="sourceCode"><pre class="sourceCode markdown"><code class="sourceCode markdown">dependencies:
  pre:
<span class="bn">    - |</span>
<span class="bn">        if [ ! -x ~/nim/bin/nim ]; then</span>
<span class="bn">          git clone -b devel --depth 1 git://github.com/araq/nim ~/nim/</span>
<span class="bn">          git clone -b devel --depth 1 git://github.com/nim-lang/csources ~/nim/csources/</span>
<span class="bn">          cd ~/nim/csources; sh build.sh; cd ..; rm -rf csources</span>
<span class="bn">          bin/nim c koch; ./koch boot -d:release</span>
<span class="bn">          ln -fs ~/nim/bin/nim ~/bin/nim</span>
<span class="bn">        else</span>
<span class="bn">          cd ~/nim; git fetch origin</span>
<span class="bn">          git merge FETCH_HEAD | grep &quot;Already up-to-date&quot; || (bin/nim c koch; ./koch boot -d:release)</span>
<span class="bn">        fi</span>

  cache_directories:
<span class="bn">    - &quot;~/bin/&quot;</span>
<span class="bn">    - &quot;~/nim/&quot;</span></code></pre></div>
<p>This automatically keeps the compiler up to date. If you want to use the most recently released version of Nim instead of the development build, use the <code>master</code> branch instead of <code>devel</code> in the two <code>git clone</code> calls. Running the tests is straightfoward now:</p>
<div class="sourceCode"><pre class="sourceCode markdown"><code class="sourceCode markdown">test:
  override:
<span class="bn">    - nim c -r tests/all</span></code></pre></div>
<p>If your project just needs to compile and run <code>tests/all</code>, then you can drop in <a href="https://github.com/def-/nim-brainfuck/blob/master/circle.yml">this circle.yml</a> directly. Otherwise, the <code>test:</code> section is the only part you will need to change.</p>
<p>The build status badge <a href="https://circleci.com/gh/def-/nim-brainfuck"><img src="https://circleci.com/gh/def-/nim-brainfuck.png" alt="Build Status" /></a> can be added to the <code>readme.md</code> like this:</p>
<div class="sourceCode"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span class="fu"># Brainfuck for Nim [![Build Status](https://circleci.com/gh/def-/nim-brainfuck.png)](https://circleci.com/gh/def-/nim-brainfuck)</span></code></pre></div>
<p>See the <a href="https://github.com/def-/nim-brainfuck">Github page</a> again for the final result and the <a href="https://circleci.com/gh/def-/nim-brainfuck">CircleCI page</a> for the <a href="https://circleci.com/gh/def-/nim-brainfuck/27">actual builds</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This is the end of our tour through the Nim ecosystem, I hope you enjoyed it and found it as interesting as it was for me to write it.</p>
<p>If you still want to learn more about Nim, I have recently written about <a href="http://hookrace.net/blog/what-is-special-about-nim/">what is special about Nim</a> and <a href="http://hookrace.net/blog/what-makes-nim-practical/">what makes Nim practical</a>, and have an <a href="https://github.com/def-/nim-unsorted">extensive collection of small programs</a>.</p>
<p>If you’re interested in a more traditional start into Nim, the <a href="http://nim-lang.org/tut1.html">official tutorial</a> and <a href="https://nim-by-example.github.io/">Nim by Example</a> can guide you.</p>
<p>The <a href="http://nim-lang.org/community.html">Nim community</a> is very welcoming and helpful. Thanks to everyone who had suggestions and found bugs in this document, especially Flaviu Tamas, Andreas Rumpf and Dominik Picheta.</p>
<link href="/css/github.css" rel="stylesheet">
<script src="/js/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/nim/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Dennis Felsing</h3>
    <h4>Nim</h4>
    <h3><small> Active Nim contributor and Master's candidate at KIT</small></h3>
    <p><a href='http://felsin9.de/nnis/'>Dennis</a> is an active contributor to the <a href='http://nim-lang.org'>Nim</a> language while working on his Master's thesis at KIT. There he worked on research developing a new method for <a href='http://felsin9.de/nnis/teaching-research/#automating-regression-verification'>Regression Verification</a> and teaching programming paradigms (Haskell, lambda calculus, type inference, Prolog, Scala, etc.). He also develops and runs <a href='http://ddnet.tw'>DDNet</a>, a unique cooperative 2D game.</p>
    <a class="btn btn-primary" href="/posts/nim/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell</title>
    <link href="http://www.howistart.org/posts/haskell/1/index.html" />
    <id>http://www.howistart.org/posts/haskell/1/index.html</id>
    <published>2014-11-16T00:00:00Z</published>
    <updated>2014-11-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Haskell <small>with Chris Allen</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <p>My name is Chris. I teach Haskell to people that are new to programming and as well as long-time coders. Haskell is a general purpose programming language that is most useful to mere mortals.</p>
<p>I’m going to show you how to write a package in Haskell and interact with the code inside of it.</p>
<h2 id="installing-tools-for-writing-haskell-code">Installing tools for writing Haskell code</h2>
<p>We’re going to use Stack to manage our project dependencies, compiler, building our code, and running our tests. Start by <a href="http://docs.haskellstack.org/en/stable/install_and_upgrade/">getting Stack installed</a>.</p>
<p>After you’ve finished the install instructions, <code>stack</code> should all be in your path. <code>ghci</code> is the REPL (read-eval-print loop) for Haskell, though as often as not, you’ll use <code>stack ghci</code> to invoke a REPL that is aware of your project and its dependencies.</p>
<h2 id="what-were-going-to-make">What we’re going to make</h2>
<p>We’re going to write a little csv parser for some baseball data. I don’t care a whit about baseball, but it was the best example of free data I could find.</p>
<h2 id="project-layout">Project layout</h2>
<p>There’s not a prescribed project layout, but there are a few guidelines I would advise following.</p>
<p>One is that <a href="https://github.com/ekmett/lens">Edward Kmett’s lens library</a> is not only a fantastic library in its own right, but is also a great resource for people wanting to see how to structure a Haskell project, write and generate <code>Haddock</code> documentation, and organize your namespaces. Kmett’s library follows <a href="http://hackage.haskell.org/packages/">Hackage guidelines</a> on what namespaces and categories to use for his libraries.</p>
<p>There is an alternative namespacing pattern demonstrated by <a href="http://hackage.haskell.org/package/pipes">Pipes, a streaming library</a>. It uses a top-level eponymous namespace. For an example of another popular project you could also look at <a href="https://github.com/jgm/pandoc/">Pandoc</a> for examples of how to organize non-trivial Haskell projects.</p>
<p>Once we’ve finished laying out our project, it’s going to look like this:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">tree</span>
<span class="kw">.</span>
├── <span class="kw">LICENSE</span>
├── <span class="kw">Setup.hs</span>
├── <span class="kw">bassbull.cabal</span>
├── <span class="kw">src</span>
│   ├── <span class="kw">Main.hs</span>
├── <span class="kw">stack.yaml</span>
<span class="kw">4</span> directories, 7 files</code></pre></div>
<p>Ordinarily I’d structure things a little more, but there isn’t a lot to this project. Onward!</p>
<h2 id="getting-your-project-started">Getting your project started</h2>
<p>We’ll use <code>Stack</code>, our GHC Haskell dependency manager and build tool, to create some initial files for us.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> new bassbull simple</code></pre></div>
<p>Here <code>bassbull</code> is the name of our project and <code>simple</code> is the project template we’re using. Now we’re going to download our test data while inside the directory of our <code>bassbull</code> project.</p>
<p>You can download the data from <a href="https://raw.githubusercontent.com/bitemyapp/csvtest/master/batting.csv">here</a>. If you want to download it via the terminal on a Unix-alike (Mac, Linux, BSD, etc) you can do so via:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">curl</span> -0 https://raw.githubusercontent.com/bitemyapp/csvtest/master/batting.csv <span class="kw">&gt;</span> batting.csv</code></pre></div>
<p>It should be about 2.3 MB when it’s all said and done.</p>
<p>Before we start making changes, I’m going to init my version control (git, for me) so I can track my changes and not lose any work.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cd</span> bassbull
$ <span class="kw">git</span> init
$ <span class="kw">git</span> add .
$ <span class="kw">git</span> commit -am <span class="st">&quot;Initial commit&quot;</span></code></pre></div>
<p>I’m also going to add the gitignore from Github’s gitignore repository plus some additions for Haskell so we don’t accidentally check in unnecessary build artifacts or other things inessential to the project.</p>
<p>This should go into a file named <code>.gitignore</code> at the top level of your bassbull project.</p>
<pre><code>dist
dist-*
cabal-dev
*.o
*.hi
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
*.eventlog
.stack-work/</code></pre>
<h2 id="editing-the-cabal-file">Editing the Cabal file</h2>
<p>First we need to fix up our <code>cabal</code> file a bit. Mine is named <code>bassbull.cabal</code> and is in the top level directory of the project.</p>
<p>Here’s what I changed my <code>cabal</code> file to:</p>
<pre><code>name:                bassbull
version:             0.1.0.0
synopsis:            Processing some csv data
description:         Baseball data analysis
homepage:            bitemyapp.com
license:             BSD3
license-file:        LICENSE
author:              Chris Allen
maintainer:          cma@bitemyapp.com
copyright:           2016, Chris Allen
category:            Data
build-type:          Simple
cabal-version:       &gt;=1.10

executable bassbull
  ghc-options:         -Wall
  hs-source-dirs:      src
  main-is:             Main.hs
  build-depends:       base &gt;= 4.7 &amp;&amp; &lt;5,
                       bytestring,
                       vector,
                       cassava
  default-language:    Haskell2010</code></pre>
<p>A few things to note:</p>
<ul>
<li>The description tells people what the package is about.</li>
<li>The <code>hs-source-dirs</code> includes <code>src</code> so Cabal knows where my modules are.</li>
<li>An executable stanza with the name bassbull is in the Cabal file so we can build a binary by that name and run it.</li>
<li><code>main-is</code> is set to <code>Main.hs</code> in the executable stanza so the compiler knows which file contains the Main module and main function.</li>
<li>We have <code>ghc-options</code> with <code>-Wall</code> so we get the <em>rather</em> handy warnings GHC offers on top of the usual type checking.</li>
<li>We included the libraries our project will use in <code>build-depends</code>.</li>
</ul>
<h2 id="building-and-interacting-with-your-program">Building and interacting with your program</h2>
<p>The contents of <code>src/Main.hs</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

main <span class="fu">=</span> putStrLn <span class="st">&quot;hello&quot;</span></code></pre></div>
<p>One thing to note is that for a module to work as a <code>main-is</code> target for GHC, it must have a function named <code>main</code> and itself be named <code>Main</code>. Most people make little wrapper <code>Main</code> modules to satisfy this, sometimes with argument parsing and handling done via libraries like <a href="https://github.com/pcapriotti/optparse-applicative">optparse-applicative</a>.</p>
<p>For now, we’ve left Main very simple, making it just a <code>putStrLn</code> of the string <code>&quot;Hello&quot;</code>. To validate that everything is working, let’s build and run this program.</p>
<p>Then we install our dependencies by building our project. This can take some time on the first run, but Stack will cache and share dependencies across your projects automatically.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> setup
$ <span class="kw">stack</span> build</code></pre></div>
<p>We did the <code>stack setup</code> just in case you didn’t already have GHC installed. Note that you’ll only have to do this once for a particular version of GHC. If this succeeds, we should get a binary named <code>bassbull</code>. To run this, do the following.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> exec bassbull
<span class="kw">hello</span></code></pre></div>
<p>If everything is in place, let’s move onto writing a little csv processor.</p>
<h2 id="writing-a-program-to-process-csv-data">Writing a program to process csv data</h2>
<p>One thing to note before we begin is that you can fire up a project-aware Haskell REPL using Stack’s GHCi command. The benefit of doing so is that you can write and type-check code interactively as you explore new and unfamiliar libraries or just to refresh your memory about existing code.</p>
<p>You can do so by running it in your shell like so:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> ghci</code></pre></div>
<p>If you do, you should see a bunch of stuff about loading packages installed for the project and then a <code>Prelude Main&gt;</code> prompt.</p>
<pre><code>[1 of 1] Compiling Main             ( Main.hs, interpreted )
Ok, modules loaded: Main.
Prelude Main&gt;</code></pre>
<p>Now we can load our <code>src/Main.hs</code> in the REPL.</p>
<pre><code>$ stack ghci
Preprocessing executable &#39;bassbull&#39; for bassbull-0.1.0.0...
GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Loading package array-0.5.0.0 ... linking ... done.
Loading package deepseq-1.3.0.2 ... linking ... done.
Loading package bytestring-0.10.4.0 ... linking ... done.
Loading package containers-0.5.5.1 ... linking ... done.
Loading package text-1.2.0.0 ... linking ... done.
Loading package hashable-1.2.2.0 ... linking ... done.
Loading package scientific-0.3.3.2 ... linking ... done.
Loading package attoparsec-0.12.1.2 ... linking ... done.
Loading package blaze-builder-0.3.3.4 ... linking ... done.
Loading package unordered-containers-0.2.5.1 ... linking ... done.
Loading package primitive-0.5.4.0 ... linking ... done.
Loading package vector-0.10.12.1 ... linking ... done.
Loading package cassava-0.4.2.0 ... linking ... done.
[1 of 1] Compiling Main             ( src/Main.hs, interpreted )

src/Main.hs:3:1: Warning:
    Top-level binding with no type signature: main :: IO ()
Ok, modules loaded: Main.
*Main&gt; :load src/Main.hs
[1 of 1] Compiling Main             ( src/Main.hs, interpreted )

src/Main.hs:3:1: Warning:
    Top-level binding with no type signature: main :: IO ()
Ok, modules loaded: Main.
*Main&gt;</code></pre>
<p>Becoming comfortable with the REPL can be a serious boon to productivity. There is editor integration for those that want it as well.</p>
<p>Now we’re going to update our <code>src/Main.hs</code>. Our goal is to read a CSV file into a <code>ByteString</code> (basically a byte vector), parse the <code>ByteString</code> into a <code>Vector</code> of tuples, and sum up the “at bats” column.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Vector</span> <span class="kw">as</span> <span class="dt">V</span>
<span class="co">-- from cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv</span>

<span class="co">-- a simple type alias for data</span>
<span class="kw">type</span> <span class="dt">BaseballStats</span> <span class="fu">=</span> (<span class="dt">BL.ByteString</span>, <span class="dt">Int</span>, <span class="dt">BL.ByteString</span>, <span class="dt">Int</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  csvData <span class="ot">&lt;-</span> BL.readFile <span class="st">&quot;batting.csv&quot;</span>
  <span class="kw">let</span> v <span class="fu">=</span> decode <span class="dt">NoHeader</span><span class="ot"> csvData ::</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">V.Vector</span> <span class="dt">BaseballStats</span>)
  <span class="kw">let</span> summed <span class="fu">=</span> fmap (V.foldr summer <span class="dv">0</span>) v
  putStrLn <span class="fu">$</span> <span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed)
  <span class="kw">where</span> summer (name, year, team, atBats) n <span class="fu">=</span> n <span class="fu">+</span> atBats</code></pre></div>
<p>Let’s break down this code.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Vector</span> <span class="kw">as</span> <span class="dt">V</span>
<span class="co">-- from cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv</span></code></pre></div>
<p>First, we’re importing our dependencies. Qualified imports let us give names to the namespaces we’re importing and use those names as a prefix, such as <code>BL.ByteString</code>. This is used to refer to values and type constructors alike. In the case of <code>import Data.Csv</code> where we didn’t qualify the import (with <code>qualified</code>), we’re bringing everything from that module into scope. This should be done only with modules that have names of things that won’t conflict with anything else. Other modules like <code>Data.ByteString</code> and <code>Data.Vector</code> have a bunch of functions that are named identically to functions in the <code>Prelude</code> and should be qualified.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- a simple type alias for data</span>
<span class="kw">type</span> <span class="dt">BaseballStats</span> <span class="fu">=</span> (<span class="dt">BL.ByteString</span>, <span class="dt">Int</span>, <span class="dt">BL.ByteString</span>, <span class="dt">Int</span>)</code></pre></div>
<p>Here we’re creating a type alias for <code>BaseballStats</code>. I made it a type alias for a few reasons. One is so I could put off talking about algebraic data types! I made it a type alias of the 4-tuple specifically because the Cassava library already understands how to translate CSV rows into tuples and our type here will “just work” as long as the columns that we say are <code>Int</code> actually are parseable as integral numbers. Haskell tuples are allowed to have heterogenous types and are defined primarily by their length. The parentheses and commas are used to signify them. For example, <code>(a, b)</code> would be both a valid value and type constructor for referring to 2-tuples, <code>(a, b, c)</code> for 3-tuples, and so forth.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  csvData <span class="ot">&lt;-</span> BL.readFile <span class="st">&quot;batting.csv&quot;</span></code></pre></div>
<p>We need to read in a file so we can parse our CSV data. We called the lazy <code>ByteString</code> namespace <code>BL</code> using the <code>qualified</code> keyword in the import. From that namespace we used <code>BL.readFile</code> which has type <code>FilePath -&gt; IO ByteString</code>. You can read this in English as <code>I take a FilePath as an argument and I return a ByteString after performing some side effects</code>.</p>
<p>You can see <a href="http://hackage.haskell.org/package/bytestring-0.10.4.0/docs/Data-ByteString-Lazy.html#v:readFile">the type of <code>BL.readFile</code> here</a>.</p>
<p>We’re binding over the <code>IO ByteString</code> that <code>BL.readFile &quot;batting.csv&quot;</code> returns. <code>csvData</code> has type <code>ByteString</code> due to binding over <code>IO</code>. Remember our tuples that we signified with parentheses earlier? Well, <code>()</code> is a sort of tuple too, but it’s the 0-tuple! In Haskell we usually call it unit. It can’t contain anything; it’s a type that has a single value - <code>()</code>, that’s it. It’s often used to signify we don’t return anything. Since there’s usually no point in executing functions that don’t return anything, <code>()</code> is often wrapped in <code>IO</code>. Printing strings are a good example of the result type <code>IO ()</code> as they do their work and return nothing. In Haskell you can’t actually “return nothing;” the concept doesn’t even make sense. Thus we use <code>()</code> as the idiomatic “I got nothin’ for ya” type and value. Usually if something returns <code>()</code> you won’t even bother to bind to a name, you’ll just ignore it.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">let</span> v <span class="fu">=</span> decode <span class="dt">NoHeader</span><span class="ot"> csvData ::</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">V.Vector</span> <span class="dt">BaseballStats</span>)</code></pre></div>
<p><code>v</code> has the type you see at the right with the type assignment operator <code>::</code> I’m assigning the type to dispatch the typeclass that <code>decode</code> uses to parse csv data. See more about <a href="http://hackage.haskell.org/package/cassava-0.4.2.0/docs/Data-Csv.html#t:FromRecord">the typeclass cassava uses for parsing csv data here</a>.</p>
<p>In this case, because I defined a <code>type</code> alias of a tuple for my record, I get my parsing code for free (already defined for tuples, <code>bytestring</code>, and <code>Int</code>).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">let</span> summed <span class="fu">=</span> fmap (V.foldr summer <span class="dv">0</span>) v</code></pre></div>
<p>Here we’re using a <code>let</code> expression to bind the expression <code>fmap (V.foldr summer 0) v</code> to the name <code>summed</code> so that the expressions that follow it can refer to <code>summed</code> without repeating all the same code.</p>
<p>First we fmap over the <code>Either String (V.Vector BaseballStats)</code>. This lets us apply <code>(V.foldr summer 0)</code> to <code>V.Vector BaseballStats</code>. We partially applied the <code>Vector</code> folding function <code>foldr</code> to the summing function and the number <code>0</code>. The number <code>0</code> here is our “start” value for the fold. Generally in Haskell we don’t use recursion directly. Instead in Haskell we use higher order functions and abstractions, giving names to common things programmers do in a way that lets us be more productive. One of those very common things is folding data. You’re going to see examples of folding and the use <code>fmap</code> from <code>Functor</code> in a bit.</p>
<p>We say <code>V.foldr</code> is partially applied because we haven’t applied all of the arguments yet. Haskell has something called currying built into all functions by default which lets us avoid some tedious work that would require a “Builder” pattern in languages like Java. Unlike previous code samples, these examples are using my interactive <code>ghci</code> REPL.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Person is a product/record, if that</span>
<span class="co">-- is confusing think &quot;struct&quot; but better.</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span> <span class="dt">String</span> <span class="dt">Int</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">Person</span>
<span class="dt">Person</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Person</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t <span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span>
<span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Person</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t <span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span>
<span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span><span class="ot"> ::</span> <span class="dt">Person</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> namedChris <span class="fu">=</span> <span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> namedChris <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span>
<span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span>
<span class="dt">Person</span> <span class="st">&quot;Chris&quot;</span> <span class="dv">415</span> <span class="st">&quot;Allen&quot;</span></code></pre></div>
<p>This lets us apply some, but not all, of the arguments to a function and pass around the result as a function expecting the rest of the arguments.</p>
<p>Fully explaining the <code>fmap</code> in <code>let summed = fmap (V.foldr summer 0) v</code> would require explaining <code>Functor</code>. I don’t want to belabor specific concepts <em>too</em> much, but I think a quick demonstration of <code>fmap</code> and <code>foldr</code> would help here. This is also a transcript from my interactive <code>ghci</code> REPL. I’ll explain Either, Right, and Left after the REPL sample. The <code>:type</code> or <code>:t</code> command is a command to my <code>ghci</code> REPL, not part of the Haskell language. It’s a way to request the type of an expression.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> v <span class="fu">=</span> <span class="dt">Right</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> <span class="dt">Left</span> <span class="st">&quot;blah&quot;</span><span class="ot"> ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t v
<span class="ot">v ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t x
<span class="ot">x ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> addOne x <span class="fu">=</span> x <span class="fu">+</span> <span class="dv">1</span>
<span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">4</span><span class="fu">:</span><span class="dv">12</span><span class="fu">:</span> <span class="dt">Warning</span><span class="fu">:</span>
    <span class="dt">This</span> binding for ‘x’ shadows the existing binding
      defined at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">3</span><span class="fu">:</span><span class="dv">5</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> addOne <span class="dv">2</span>
<span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">5</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> <span class="dt">Warning</span><span class="fu">:</span>
    <span class="dt">Defaulting</span> the following constraint(s) to <span class="kw">type</span> ‘<span class="dt">Integer</span>’
      (<span class="dt">Show</span> a0) arising from a use <span class="kw">of</span> ‘print’ at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">5</span><span class="fu">:</span><span class="dv">1</span><span class="fu">-</span><span class="dv">8</span>
      (<span class="dt">Num</span> a0) arising from a use <span class="kw">of</span> ‘it’ at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">5</span><span class="fu">:</span><span class="dv">1</span><span class="fu">-</span><span class="dv">8</span>
    <span class="dt">In</span> a stmt <span class="kw">of</span> an interactive <span class="dt">GHCi</span> command<span class="fu">:</span> print it
<span class="dv">3</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> fmap addOne v
<span class="dt">Right</span> <span class="dv">2</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> fmap addOne x
<span class="dt">Left</span> <span class="st">&quot;blah&quot;</span></code></pre></div>
<p><code>Either</code> in Haskell is used to signify cases where we might get values of one of two possible types. <code>Either String Int</code> is a way of saying, “you’ll get either a <code>String</code> or an <code>Int</code>”. This is an example of sum types. You can think of them as a way to say <code>or</code> in your type, where a <code>struct</code> or <code>class</code> would let you say <code>and</code>. <code>Either</code> has two constructors, <code>Right</code> and <code>Left</code>. Culturally in Haskell <code>Left</code> signifies an “error” case. This is partly why the <code>Functor</code> instance for <code>Either</code> maps over the <code>Right</code> constructor but not the <code>Left</code>. If you have an error value, you can’t keep applying your happy path functions. In the case of <code>Either String Int</code>, <code>String</code> would be our error value in a <code>Left</code> constructor and <code>Int</code> would be the happy-path “yep, we’re good” value in the <code>Right</code> constructor. Also, Haskell has type inference. You don’t have to declare types explicitly like I did in the example from my REPL transcript - I did so for the sake of explicitness.</p>
<p><code>Either</code> isn’t the only type we can map over.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> myList <span class="fu">=</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]<span class="ot"> ::</span> [<span class="dt">Int</span>]
<span class="dt">Prelude</span><span class="fu">&gt;</span> fmap addOne myList
[<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> multTwo x <span class="fu">=</span> x <span class="fu">*</span> <span class="dv">2</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> fmap multTwo myList
[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>]</code></pre></div>
<p>Here we have the list type, signified using the <code>[]</code> brackets and whatever type is inside in our list, in this case <code>Int</code>. With <code>Either</code> we have two possible types and <code>Functor</code> only lets us map over one of them, so the <code>Functor</code> instance for <code>Either</code> only applies our function over the happy path values. With the type <code>[a]</code> there’s only one type inside of it, so it’ll get applied regardless…or will it? What if I have an empty list?</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> fmap multTwo []
[]
<span class="dt">Prelude</span><span class="fu">&gt;</span> fmap addOne []
[]</code></pre></div>
<p>Conveniently not only does <code>fmap</code> let us avoid manually pattern matching the <code>Left</code> and <code>Right</code> cases of <code>Either</code>, but it lets us not bother to manually recurse our list or pattern-match the empty list case. This helps us prevent mistakes as well as clean up and abstract our code. In a less happy alternate universe, we would’ve had to write the following code, written in typical code file style rather than for the REPL this time:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">addOne ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
addOne x <span class="fu">=</span> x <span class="fu">+</span> <span class="dv">1</span> <span class="co">-- at least we can abstract this out</span>

<span class="ot">incrementEither ::</span> <span class="dt">Either</span> e <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> e <span class="dt">Int</span>
incrementEither (<span class="dt">Right</span> numberWeWanted) <span class="fu">=</span> <span class="dt">Right</span> (addOne numberWeWanted)
incrementEither (<span class="dt">Left</span> errorString) <span class="fu">=</span> <span class="dt">Left</span> errorString</code></pre></div>
<p>We use parens on the left-hand side here to pattern match at the function declaration level on whether our <code>Either e Int</code> is <code>Right</code> or <code>Left</code>. Parentheses wrap <code>(addOne numberWeWanted)</code> so we don’t try to erroneously pass two arguments to <code>Right</code> when we mean to pass the result of applying <code>addOne</code> to <code>numberWeWanted</code>, to <code>Right</code>. If our value is <code>Right 1</code> this is returning <code>Right (addOne 1)</code> which reduces to <code>Right 2</code>.</p>
<p>As we process the CSV data we’re going to be doing so by <em>folding</em> the data. This is a general model for understanding how you process data that extends beyond specific programming languages. You might have seen <code>fold</code> called <code>reduce</code>. Here are some examples of folds and list/string concatenation in Haskell. We’re switching back to REPL demonstration again.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t foldr
foldr<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b

<span class="dt">Prelude</span><span class="fu">&gt;</span> foldr (<span class="fu">+</span>) <span class="dv">0</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]
<span class="dv">6</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> foldr (<span class="fu">+</span>) <span class="dv">1</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]
<span class="dv">7</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> foldr (<span class="fu">+</span>) <span class="dv">2</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]
<span class="dv">8</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> foldr (<span class="fu">+</span>) <span class="dv">2</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>]
<span class="dv">12</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t (<span class="fu">++</span>)
<span class="ot">(++) ::</span> [a] <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]

<span class="dt">Prelude</span><span class="fu">&gt;</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>] <span class="fu">++</span> [<span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>]
[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="st">&quot;hello, &quot;</span> <span class="fu">++</span> <span class="st">&quot;world!&quot;</span>
<span class="st">&quot;hello, world!&quot;</span></code></pre></div>
<p>Okay, enough of the REPL jazz session.</p>
<hr>
<p>Now back to the CSV processing code!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  putStrLn <span class="fu">$</span> <span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed)</code></pre></div>
<p>Last, we stringify the summed up count using <code>show</code>, then concatenate that with a string to describe what we’re printing, then print the whole shebang using <code>putStrLn</code>. The <code>$</code> is just so everything to the right of the <code>$</code> gets evaluated before whatever is to the left. To see why I did that remove the <code>$</code> and build the code. Alternatively, I could’ve used parentheses in the usual fashion. That would look like the following.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  putStrLn (<span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed))</code></pre></div>
<p><code>show</code> is a function from the typeclass <code>Show</code>. Here’s how you can find out about it in your REPL:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span><span class="kw">type</span> show
show<span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>

<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>info <span class="dt">Show</span>
<span class="kw">class</span> <span class="dt">Show</span> a <span class="kw">where</span>
<span class="ot">  showsPrec ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ShowS</span>
<span class="ot">  show ::</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>
<span class="ot">  showList ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">ShowS</span>
<span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> (<span class="dt">Show</span> a, <span class="dt">Show</span> b) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">Either</span> a b)
<span class="co">-- Defined in ‘Data.Either’</span>
<span class="kw">instance</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Show</span> [a] <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Ordering</span> <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">Maybe</span> a) <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Integer</span> <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Int</span> <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Char</span> <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Bool</span> <span class="co">-- Defined in ‘GHC.Show’</span>
<span class="fu">...</span></code></pre></div>
<p>What <code>instance Show Integer</code> is telling us is that <code>Integer</code> has implemented <code>Show</code>. This means we should be able to use <code>show</code> on something with that type. We can specialize the type of <code>show</code> to <code>Integer</code> in a few passes.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">show<span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>
show<span class="ot"> ::</span> <span class="dt">Show</span> <span class="dt">Integer</span> <span class="ot">=&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span class="co">-- you can just drop Show Integer =&gt;, the typeclass</span>
<span class="co">-- instances associated with a specific type are</span>
<span class="co">-- a given.</span>
show<span class="ot"> ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre></div>
<p>In fact, we can even make a pointless version of show pre-specialized to <code>Integer</code>. Here’s an example from my REPL:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t show
show<span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t show myInteger
show<span class="ot"> myInteger ::</span> <span class="dt">String</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> integerShow <span class="fu">=</span><span class="ot"> show ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> integerShow <span class="dv">1</span>
<span class="st">&quot;1&quot;</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> integerShow (<span class="st">&quot;blah&quot;</span>, ())

<span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">11</span><span class="fu">:</span><span class="dv">13</span><span class="fu">:</span>
    <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span> ‘<span class="dt">Integer</span>’
                with actual <span class="kw">type</span> ‘([<span class="dt">Char</span>], ())’
    <span class="dt">In</span> the first argument <span class="kw">of</span> ‘integerShow’, namely ‘(<span class="st">&quot;blah&quot;</span>, ())’
    <span class="dt">In</span> the expression<span class="fu">:</span> integerShow (<span class="st">&quot;blah&quot;</span>, ())
    <span class="dt">In</span> an equation for ‘it’<span class="fu">:</span> it <span class="fu">=</span> integerShow (<span class="st">&quot;blah&quot;</span>, ())
<span class="dt">Prelude</span><span class="fu">&gt;</span> show (<span class="st">&quot;blah&quot;</span>, ())
<span class="st">&quot;(\&quot;blah\&quot;,())&quot;</span></code></pre></div>
<p>Next we’ll look at <code>summer</code>. <code>summer</code> is the function we are folding our <code>Vector</code> with. You can hang <code>where</code> clauses off of functions which are a bit like <code>let</code> but they come last. <code>where</code> clauses are more common in Haskell than <code>let</code> clauses, but there’s nothing wrong with using both.</p>
<p>Our folding function here takes two arguments: the tuple record (we’ll have many of those in the vector of records), and the sum of our data so far.</p>
<p>Here <code>n</code> is the sum we’re carrying along as fold the <code>Vector</code> of <code>BaseballStats</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">where</span> summer (name, year, team, atBats) n <span class="fu">=</span> n <span class="fu">+</span> atBats</code></pre></div>
<h2 id="building-and-running-our-csv-parsing-program">Building and running our csv parsing program</h2>
<p>First we’re going to rebuild the project.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> build</code></pre></div>
<p>Then, assuming we have the <code>batting.csv</code> I mentioned earlier in our current directory, we can run our program and get the results.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> exec bassbull
<span class="kw">Total</span> atBats was: Right 4858210
$</code></pre></div>
<h2 id="refactoring-our-code-a-bit">Refactoring our code a bit</h2>
<p>Splitting out logic into independent functions is a common method for making Haskell code more composable and easy to read.</p>
<p>To that end, we’ll clean up our example a bit.</p>
<p>First, we don’t care about <code>name</code>, <code>year</code>, and <code>team</code> for our folding code.</p>
<p>So we’re going to use the Haskell idiom of bindings things we don’t care about to <code>_</code>.</p>
<p>This changes our fold from this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer (name, year, team, atBats) sum <span class="fu">=</span> sum <span class="fu">+</span> atBats</code></pre></div>
<p>To this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer (_, _, _, atBats) sum <span class="fu">=</span> sum <span class="fu">+</span> atBats</code></pre></div>
<p>Next we’ll make our extraction of the ‘at bats’ from the tuple more compositional. If you’d like to play with this further, consider rewriting our example program at the end of this article into using a Haskell record instead of a tuple. I used a tuple here because Cassava already understands how to parse them, sparing me having to write that code.</p>
<p>First we’ll add <code>fourth</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fourth ::</span> (a, b, c, d) <span class="ot">-&gt;</span> d
fourth (_, _, _, d) <span class="fu">=</span> d</code></pre></div>
<p>Then we’ll rewrite our folding function again from:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer (_, _, _, atBats) n <span class="fu">=</span> n <span class="fu">+</span> atBats</code></pre></div>
<p>Into:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer r n <span class="fu">=</span> n <span class="fu">+</span> fourth r</code></pre></div>
<p>Here we can use something called <em>eta reduction</em> to remove the explicit record and sum values to make it point-free. Since our function is really just about composing the extraction of the fourth value from the tuple and summing that value with the summed up <code>atBat</code> values so far, this makes the code quite concise.</p>
<p>You can read more about this in <a href="https://www.haskell.org/haskellwiki/Pointfree">the article on pointfree programming in Haskell</a>.</p>
<p>To that end, we go from:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer r n <span class="fu">=</span> n <span class="fu">+</span> fourth r</code></pre></div>
<p>to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">where</span> summer <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">.</span> fourth</code></pre></div>
<p><code>.</code> is how we compose functions in Haskell. The entire definition of <code>.</code> is:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(f <span class="fu">.</span> g) x <span class="fu">=</span> f (g x)</code></pre></div>
<p>So, for example, if we <code>multiplyByTwo . addOne</code> we’re adding one, then passing that result to the <code>multiplyByTwo</code> function. In the csv parser code, first <code>fourth</code> gets applied to the <code>r</code> argument, then <code>(+)</code> is composed so that it is applied to the result of <code>fourth r</code> and the value <code>n</code>.</p>
<p>We should also split out our decoding of <code>BaseballStats</code> from CSV data.</p>
<p>We’re going to move this code:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> v <span class="fu">=</span> decode <span class="dt">NoHeader</span><span class="ot"> csvData ::</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">V.Vector</span> <span class="dt">BaseballStats</span>)</code></pre></div>
<p>Into an independent function:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">baseballStats ::</span> <span class="dt">BL.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">V.Vector</span> <span class="dt">BaseballStats</span>)
baseballStats <span class="fu">=</span> decode <span class="dt">NoHeader</span></code></pre></div>
<p>Then <code>summed</code> becomes:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> summed <span class="fu">=</span> fmap (V.foldr summer <span class="dv">0</span>) (baseballStats csvData)</code></pre></div>
<p>With that bit of tidying done, we should have:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Vector</span> <span class="kw">as</span> <span class="dt">V</span>
<span class="co">-- cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv</span>

<span class="kw">type</span> <span class="dt">BaseballStats</span> <span class="fu">=</span> (<span class="dt">BL.ByteString</span>, <span class="dt">Int</span>, <span class="dt">BL.ByteString</span>, <span class="dt">Int</span>)

<span class="ot">fourth ::</span> (a, b, c, d) <span class="ot">-&gt;</span> d
fourth (_, _, _, d) <span class="fu">=</span> d

<span class="ot">baseballStats ::</span> <span class="dt">BL.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">V.Vector</span> <span class="dt">BaseballStats</span>)
baseballStats <span class="fu">=</span> decode <span class="dt">NoHeader</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  csvData <span class="ot">&lt;-</span> BL.readFile <span class="st">&quot;batting.csv&quot;</span>
  <span class="kw">let</span> summed <span class="fu">=</span> fmap (V.foldr summer <span class="dv">0</span>) (baseballStats csvData)
  putStrLn <span class="fu">$</span> <span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed)
  <span class="kw">where</span> summer <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">.</span> fourth</code></pre></div>
<p>Now we’re going to double-check that our code is working:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> build
<span class="kw">...</span>(stuff happens)<span class="kw">...</span>
$ <span class="kw">stack</span> exec bassbull
<span class="kw">Total</span> atBats was: Right 4858210</code></pre></div>
<h2 id="streaming">Streaming</h2>
<p>We can improve upon what we have here. Currently we’re going to use as much memory as it takes to store the entirety of the csv file in memory, but we don’t really have to do that to sum up the records!</p>
<p>Since we’re just adding the current records’ “at bats” with the sum we’ve accumulated so far, we only really need to read one record into memory at a time. By default Cassava will load the csv into a <code>Vector</code> for convenience, but fortunately it has a streaming module so we can stream the data incrementally and fold our result without loading the entire dataset at once.</p>
<p>First, we’re going to drop Cassava’s default module for the streaming module.</p>
<p>Changing from this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv</span></code></pre></div>
<p>To this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv.Streaming</span></code></pre></div>
<p>Next, since we won’t have a <code>Vector</code> anymore (we’re streaming, not using in-memory collections), we can drop:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import qualified</span> <span class="dt">Data.Vector</span> <span class="kw">as</span> <span class="dt">V</span></code></pre></div>
<p>In favor using the <code>Foldable</code> typeclass Cassava offers for use with its streaming API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import qualified</span> <span class="dt">Data.Foldable</span> <span class="kw">as</span> <span class="dt">F</span></code></pre></div>
<p>Then in order to use the streaming API we just change the definition of our <code>summed</code> from:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> summed <span class="fu">=</span> fmap (V.foldr summer <span class="dv">0</span>) (baseballStats csvData)</code></pre></div>
<p>To:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> summed <span class="fu">=</span> F.foldr summer <span class="dv">0</span> (baseballStats csvData)</code></pre></div>
<p>We are incrementally processing the results, not loading the entire dataset into a Vector.</p>
<p>The final result should look like:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Foldable</span> <span class="kw">as</span> <span class="dt">F</span>
<span class="co">-- cassava</span>
<span class="kw">import </span><span class="dt">Data.Csv.Streaming</span>

<span class="kw">type</span> <span class="dt">BaseballStats</span> <span class="fu">=</span> (<span class="dt">BL.ByteString</span>, <span class="dt">Int</span>, <span class="dt">BL.ByteString</span>, <span class="dt">Int</span>)

<span class="ot">fourth ::</span> (a, b, c, d) <span class="ot">-&gt;</span> d
fourth (_, _, _, d) <span class="fu">=</span> d

<span class="ot">baseballStats ::</span> <span class="dt">BL.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Records</span> <span class="dt">BaseballStats</span>
baseballStats <span class="fu">=</span> decode <span class="dt">NoHeader</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  csvData <span class="ot">&lt;-</span> BL.readFile <span class="st">&quot;batting.csv&quot;</span>
  <span class="kw">let</span> summed <span class="fu">=</span> F.foldr summer <span class="dv">0</span> (baseballStats csvData)
  putStrLn <span class="fu">$</span> <span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed)
  <span class="kw">where</span> summer <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">.</span> fourth</code></pre></div>
<p>The core here is the <code>Records</code> datatype <code>Cassava</code> gives us via the Streaming module. You can read more about the <code>Records</code> datatype <a href="http://hackage.haskell.org/package/cassava-0.4.2.0/docs/Data-Csv-Streaming.html#t:Records">on hackage</a>. <code>Records</code> is a sum type, you could read out in English like so:</p>
<ul>
<li><p><code>data Records a</code> -&gt; Records is a datatype that takes a type variable <code>a</code></p></li>
<li><p><code>Cons (...) | Nil (...)</code> -&gt; It is a sum type of two possible constructors, <code>Cons</code> or <code>Nil</code> (note the list-like nomenclature). This is way of saying a <code>Record a</code> is always either <code>Cons</code> or <code>Nil</code>.</p></li>
<li><p><code>Cons (Either String a) (Record a)</code> -&gt; the <code>Cons</code> data constructor is a product of <code>Either String a</code> and <code>Record a</code>. We’re saying <code>Cons</code> is always <code>Either String a</code> <em>and</em> <code>Record a</code>. Also, this <code>Cons</code> resembles the cons-cells in Lisp, Haskell, ML, etc. The library has the following comment about it: “A record or an error message, followed by more records.”</p></li>
<li><p><code>Nil (Maybe String) BL.ByteString</code> -&gt; the <code>Nil</code> data constructor is a product of <code>Maybe String</code> and <code>BL.ByteString</code>. The library has the following comment: “End of stream, potentially due to a parse error. If a parse error occured, the first field contains the error message. The second field contains any unconsumed input.”</p></li>
</ul>
<p>What the Records type is doing for us is letting us process the records like a lazy list, but with a little extra context in the <code>Nil</code> case.</p>
<p>Because Haskell has abstractions like the <code>Foldable</code> typeclass, we can talk about folding a dataset without caring about the underlying implementation! We could’ve used the <code>foldr</code> from <code>Foldable</code> on our <code>Vector</code>, a <code>List</code>, a <code>Tree</code>, a <code>Map</code> - not just Cassava’s streaming API. <code>foldr</code> from <code>Foldable</code> has the type: <code>Foldable t =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</code>. Note the similarity with the <code>foldr</code> for the list type, <code>(a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code>. What we’ve done is abstracted the specific type out and made it into a generic interface.</p>
<p>In case you’re wondering what the <code>Foldable</code> instance is doing under the hood:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- | Skips records that failed to convert.</span>
<span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">Records</span> <span class="kw">where</span>
    foldr <span class="fu">=</span> foldrRecords

<span class="ot">foldrRecords ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Records</span> a <span class="ot">-&gt;</span> b
foldrRecords f <span class="fu">=</span> go
  <span class="kw">where</span>
    go z (<span class="dt">Cons</span> (<span class="dt">Right</span> x) rs) <span class="fu">=</span> f x (go z rs)
    go z _ <span class="fu">=</span> z
<span class="ot">{-# INLINE foldrRecords #-}</span></code></pre></div>
<h2 id="adding-tests">Adding tests</h2>
<p>Now we’re going to add tests to our package. First we are going to add a test suite to our <code>bassbull.cabal</code> file. The name of our test suite will just be <code>tests</code>.</p>
<pre><code>test-suite tests
  ghc-options:         -Wall
  type:                exitcode-stdio-1.0
  main-is:             Tests.hs
  hs-source-dirs:      tests
  build-depends:       base,
                       bassbull,
                       hspec
  default-language:    Haskell2010</code></pre>
<p>We’re also going to add a library and shift over some code so that our package is exposed as a proper library rather than only working as an executable. We’re exposing a single module named <code>Bassbull</code>. With an <code>hs-source-dirs</code> of <code>src</code> and an exposed module named <code>Bassbull</code>, Cabal will expect a file to exist at <code>src/Bassbull.hs</code>.</p>
<pre><code>library
  ghc-options:         -Wall
  exposed-modules:     Bassbull
  build-depends:       base &gt;= 4.7 &amp;&amp; &lt;5,
                       bytestring,
                       vector,
                       cassava
  hs-source-dirs:      src
  default-language:    Haskell2010</code></pre>
<p>We need to change our executable in the Cabal file so that it depends on our library. No point duplicating the code!</p>
<pre><code>executable bassbull
  main-is:             Main.hs
  ghc-options:         -rtsopts -O2
  build-depends:       base,
                       bassbull,
                       bytestring,
                       cassava
  hs-source-dirs:      src
  default-language:    Haskell2010</code></pre>
<p>Next we’re going to create a file named <code>src/Bassbull.hs</code> and shift code from <code>src/Main.hs</code> over to it. Note we’ve also refactored our <code>main</code> function so it takes an argument of what csv file to process.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- src/Bassbull.hs</span>

<span class="kw">module</span> <span class="dt">Bassbull</span> <span class="kw">where</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Foldable</span> <span class="kw">as</span> <span class="dt">F</span>
<span class="kw">import </span><span class="dt">Data.Csv.Streaming</span>

<span class="kw">type</span> <span class="dt">BaseballStats</span> <span class="fu">=</span> (<span class="dt">BL.ByteString</span>, <span class="dt">Int</span>, <span class="dt">BL.ByteString</span>, <span class="dt">Int</span>)

<span class="ot">baseballStats ::</span> <span class="dt">BL.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Records</span> <span class="dt">BaseballStats</span>
baseballStats <span class="fu">=</span> decode <span class="dt">NoHeader</span>

<span class="ot">fourth ::</span> (a, b, c, d) <span class="ot">-&gt;</span> d
fourth (_, _, _, d) <span class="fu">=</span> d

<span class="ot">summer ::</span> (a, b, c, <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
summer <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">.</span> fourth

<span class="co">-- FilePath is just an alias for String</span>
<span class="ot">getAtBatsSum ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span>
getAtBatsSum battingCsv <span class="fu">=</span> <span class="kw">do</span>
  csvData <span class="ot">&lt;-</span> BL.readFile battingCsv
  return <span class="fu">$</span> F.foldr summer <span class="dv">0</span> (baseballStats csvData)</code></pre></div>
<p>And here’s our defrocked <code>src/Main.hs</code> which is now only responsible for fronting the executable.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Bassbull</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  summed <span class="ot">&lt;-</span> getAtBatsSum <span class="st">&quot;batting.csv&quot;</span>
  putStrLn <span class="fu">$</span> <span class="st">&quot;Total atBats was: &quot;</span> <span class="fu">++</span> (show summed)</code></pre></div>
<p>Next we’ll create a directory named <code>tests</code> and add a file named <code>Tests.hs</code> to it.</p>
<p>For our tests, we’re going to use <a href="http://hspec.github.io/">HSpec</a> because the library is easy to use, the syntax is clean, and the author <a href="https://github.com/sol">Simon Hengel</a> is one of the most responsive and helpful I’ve run into in open source.</p>
<p>Here’s our <code>tests/Tests.hs</code> file</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Bassbull</span>
<span class="kw">import </span><span class="dt">Test.Hspec</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> hspec <span class="fu">$</span> <span class="kw">do</span>
  describe <span class="st">&quot;Verify that bassbull outputs the correct data&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
    it <span class="st">&quot;equals zero&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
      theSum <span class="ot">&lt;-</span> getAtBatsSum <span class="st">&quot;batting.csv&quot;</span>
      theSum <span class="ot">`shouldBe`</span> <span class="dv">4858210</span></code></pre></div>
<p>There’s not too much here. We’re importing <code>Bassbull</code>, which is the library module we’ve exposed. This is also a <code>Main</code> module with its own <code>main</code> file because we execute our test suite as a binary just like we do with executables.</p>
<p>With all that in place, we’ll build and run the actual tests.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> test</code></pre></div>
<p><code>stack test</code> is just a shortcut for building <code>tests</code> specifically, then running the executable produced to see test output.</p>
<p>You aren’t limited to building the <code>tests</code> binary and running your tests in that manner. You can also pass <code>stack ghci</code> an argument to make it load your tests. This can be faster as the REPL uses an interpreter and can reload your code very quickly - much more quickly than doing a full build &amp; execution run.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">stack</span> ghci bassbull:tests</code></pre></div>
<p>The above will then give you a REPL which can see anything the build in your Cabal named <code>tests</code> can see. You can then run the <code>main</code> function or individual test suites - if you bother to split them out.</p>
<p>Tests are useful and important in Haskell, although I often find I need <em>much</em> fewer of them. Often my process for working on an existing Haskell project will involve working on the code I’m changing with Emacs and a REPL instantiated via <code>stack ghci</code>. As my code starts passing the type-checker, I start running the tests as another layer of assurance that I’m doing the right thing.</p>
<p>I like having a lot of feedback and help from my computer when writing code!</p>
<h2 id="making-your-haskell-packages-available-to-the-haskell-community">Making your Haskell packages available to the Haskell community</h2>
<p><a href="https://hackage.haskell.org/">Hackage</a> is the main community repository of Haskell packages and will usually be where you look to find libraries you need.</p>
<p>Mostly you’ll find libraries and the occasional executable utility, but utilities should <em>also</em> be exposing library APIs that make their functionality accessible via Haskell code. This is not only more useful to other people but enforces good practices and more modular projects.</p>
<p>Haskell users are accustomed to documentation that is accessible via the Hackage website directly <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Data-Functor.html">such as you might find for the base library that comes with GHC</a>. The tool that builds this documentation is called <a href="https://www.haskell.org/haddock/">Haddock</a>.</p>
<p>I strongly recommend you look at well-established libraries like <a href="github.com/ekmett/lens">lens</a> for examples of how to <a href="https://github.com/ekmett/lens/blob/master/scripts/hackage-docs.sh">build your documentation</a> and <a href="https://github.com/ekmett/lens/blob/master/.travis.yml">use continuous integration</a> with your Haskell projects.</p>
<p>To learn more and for more information on building a package for uploading to Hackage see <a href="https://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program">this tutorial</a>.</p>
<h2 id="how-i-work">How I work</h2>
<p>When I’m working with Haskell code, I interact with my code in a few ways. One is that I’m writing the code itself in Emacs. I’ll also have a terminal with a REPL open, usually via <code>stack ghci</code> as I am almost always working on a specific project.</p>
<p>My Emacs config is pretty sundry, it’s just <code>haskell-mode</code> and <code>flycheck</code>.</p>
<p>My basic happy-path event-loop for writing Haskell is:</p>
<ol style="list-style-type: decimal">
<li><p>Import module I’m working on in the REPL before I’ve changed anything</p></li>
<li><p>Change/add/delete code</p></li>
<li><p><code>:reload</code> in the REPL. <code>flycheck</code> will give me type errors, but I sometimes like to see them in the REPL too.</p></li>
<li><p>Sometimes I’ll use eta-reduction to refactor code. You can see an example of this <a href="http://codereview.stackexchange.com/questions/57843/update-map-in-haskell/57850#57850">in this code review on StackExchange</a>. Making code point-free makes the most sense when it’s primarily about <em>composing</em> functions rather than about applying them.</p></li>
<li><p>If code still type-checks after some cleaning, I’ll run the tests. If tests pass, I move on unless I’m suspicious about test coverage. If tests break or I want more coverage, I write more tests until I’m satisfied. When that’s done, I return to step #1 in this loop for the next unit of work I want to perform.</p></li>
</ol>
<p>My diagnosis process when something <em>isn’t</em> working:</p>
<ol style="list-style-type: decimal">
<li><p>If I can’t get something to type-check, I’ll break down sub-expression, query the types of those sub-expressions and make certain they were what I expected.</p></li>
<li><p>If have expressions I am trying to combine and I trying to make the types thereof make sense, but I haven’t implemented them yet I will use <code>undefined</code> and work with only application, composition, and monadic variations thereof to figure out how I need to get to where I’m going before I’ve implemented anything. You can see a good <a href="https://gist.github.com/ifesdjeen/4be994aea5846aa1c2fe">example of this in this Github gist</a>. I wrote the solution <span class="citation">@ifesdjeen</span> displays in his final comment.</p></li>
<li><p>If I have a function expecting arguments I can’t figure out how to satisfy, I will sometimes use <a href="https://www.haskell.org/haskellwiki/GHC/Typed_holes">typed holes</a> or a similar trick with implicit parameters to see what type I need to provide.</p></li>
<li><p>Since Haskell functions are pure and lazy, I can replace references to functions with their contents with a high degree of confidence that it will not change the semantics of my program. To that end, sometimes it’s easier to understand what’s going on by inlining the code by hand and seeing what your code turns into.</p></li>
<li><p>If something type-checks but doesn’t work, I’ll run the tests. If the coverage isn’t catching it, I add it. This is less common for me in Haskell than you’d think. If I can frame the test as an assertion about some <em>property</em> the code should satisfy like with <a href="http://hackage.haskell.org/package/QuickCheck">QuickCheck</a> I will do so. You can learn more about using QuickCheck in <a href="http://book.realworldhaskell.org/read/testing-and-quality-assurance.html">Real World Haskell</a>.</p></li>
</ol>
<h3 id="emacs">Emacs</h3>
<ul>
<li><a href="https://www.haskell.org/haskellwiki/Emacs">Haskell wiki section on Emacs</a></li>
</ul>
<h3 id="vim">vim</h3>
<ul>
<li><a href="https://github.com/eagletmt/ghcmod-vim">vim plugin Github repository</a></li>
</ul>
<h3 id="sublime-text-23">Sublime Text 2/3</h3>
<ul>
<li><a href="https://github.com/SublimeHaskell/SublimeHaskell">The SublimeHaskell plugin</a></li>
</ul>
<h3 id="my-personal-dotfiles">My personal dotfiles</h3>
<ul>
<li><a href="https://github.com/bitemyapp/dotfiles">My dotfiles on Github</a></li>
</ul>
<h2 id="wrapping-up">Wrapping up</h2>
<p>This is the end of our little journey in playing around with Haskell to process CSV data. Learning how to use abstractions like <code>Foldable</code>, <code>Functor</code> or use techniques like <em>eta reduction</em> takes practice! I have <a href="https://github.com/bitemyapp/learnhaskell">a guide</a> for learning Haskell which has been compiled based on my experiences learning and teaching Haskell with many people over the last year or so.</p>
<p>If you are curious and want to learn more, I strongly recommend you do a course of basic exercises first and then explore the way Haskell enables you think about your programs in terms of abstractions. Once you have the basics down, this can be done in a variety of ways. Some people like to attack practical problems, some like to follow along with white papers, some like to hammer out abstractions from scratch in focused exercises &amp; examples.</p>
<p>Things to do after finishing this article:</p>
<ul>
<li><a href="https://haskell.org">Check out the Haskell community website</a></li>
<li><a href="https://github.com/kazu-yamamoto/unit-test-example/blob/master/markdown/en/tutorial.md">Learn about (unit|spec|property) testing Haskell software with Kazu Yamamoto’s tutorial</a></li>
<li><a href="http://haskell.org/hoogle">Search for code by <em>type</em> structurally with Hoogle</a></li>
<li><a href="https://www.haskell.org/haddock/">Learn about Haddock, the Haskell source documentation tool</a> and look at the many <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Data-Functor.html">examples</a> of Haskell package <a href="http://hackage.haskell.org/package/pipes-4.1.3/docs/Pipes-Tutorial.html">documentation</a>.</li>
</ul>
<p>More than anything else, my greatest wish would be that you develop a richer and more rewarding relationship with learning. Haskell has been a big part of this in my life.</p>
<p>Special thanks to <a href="https://twitter.com/danielwithmusic">Daniel Compton</a> and <a href="https://twitter.com/argumatronic">Julie Moronuki</a> for helping me test &amp; edit this article. I couldn’t have gotten it together without their help.</p>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/haskell/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Chris Allen</h3>
    <h4>Haskell</h4>
    <h3><small> Coder, Teacher, Author</small></h3>
    <p><a href='http://bitemyapp.com'>Chris</a> is a long time FP and Lisp user who discovered a love of learning and types when he found <a href='http://www.haskell.org'>Haskell</a>. Aside from releasing multiple Haskell project, such as <a href='https://github.com/bitemyapp/bloodhound'>Bloodhound</a> and <a href='https://github.com/bitemyapp/blacktip'>Blacktip</a> he took to teaching Haskell to spread the love and creating the <a href='https://github.com/bitemyapp/learnhaskell'>Learn Haskell</a> guide which he is turning into a <a href='http://haskellbook.com/'>book</a>.</p>
    <a class="btn btn-primary" href="/posts/haskell/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Go</title>
    <link href="http://www.howistart.org/posts/go/1/index.html" />
    <id>http://www.howistart.org/posts/go/1/index.html</id>
    <published>2014-09-01T00:00:00Z</published>
    <updated>2014-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Go <small>with Peter Bourgon</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <p>Go is a lovely little programming language designed by <a href="http://en.wikipedia.org/wiki/Go_(programming_language)#History">smart people you can trust</a> and continuously improved by <a href="https://groups.google.com/forum/#!forum/golang-nuts">a large and growing open-source community</a>.</p>
<p>Go is meant to be simple, but sometimes the conventions can be a little hard to grasp. I’d like to show you how I start all of my Go projects, and how to use Go’s idioms. Let’s build a backend service for a web app.</p>
<ol style="list-style-type: decimal">
<li><a href="#setting-up-your-environment">Setting up your environment</a></li>
<li><a href="#a-new-project">A new project</a></li>
<li><a href="#making-a-web-server">Making a web server</a></li>
<li><a href="#adding-more-routes">Adding more routes</a></li>
<li><a href="#querying-multiple-apis">Querying multiple APIs</a></li>
<li><a href="#make-it-concurrent">Make it concurrent</a></li>
<li><a href="#simplicity">Simplicity</a></li>
<li><a href="#further-exercises">Further exercises</a></li>
</ol>
<h2 id="setting-up-your-environment">Setting up your environment</h2>
<p>The first step is, of course, to install Go. You can use <a href="http://golang.org/doc/install">the binary distribution for your operating system</a> from the official site. If you use Homebrew on Mac, <code>brew install go</code> works well. When you’re done, this should work:</p>
<pre><code>$ go version
go version go 1.3.1 darwin/amd64</code></pre>
<p>Once installed, the only other thing to do is to set your GOPATH. This is the root directory that will hold all of your Go code and built artifacts. The Go tooling will create 3 subdirectories in your GOPATH: bin, pkg, and src. Some people set it to something like <code>$HOME/go</code>, but I prefer plain <code>$HOME</code>. Make sure it gets exported to your environment. If you use bash, something like this should work:</p>
<pre><code>$ echo &#39;export GOPATH=$HOME&#39; &gt;&gt; $HOME/.profile
$ source $HOME/.profile
$ go env | grep GOPATH
GOPATH=&quot;/Users/peter&quot;</code></pre>
<p>There are a lot of editors and plugins available for Go. I’m personally a huge fan of Sublime Text and the excellent <a href="https://github.com/DisposaBoy/GoSublime">GoSublime</a> plugin. But the language is straightforward enough, especially for a small project, that a plain text editor is more than sufficient. I work with professional, full-time Go developers who still use vanilla vim, without even syntax highlighting. You definitely don’t need more than that to get started. As always, simplicity is king.</p>
<h2 id="a-new-project">A new project</h2>
<p>With a functioning environment, we’ll make a new directory for the project. The Go toolchain expects all source code to exist within $GOPATH/src, so we always work there. The toolchain can also directly import and interact with projects hosted on sites like GitHub or Bitbucket, assuming they live in the right place.</p>
<p>For this example, create a new, empty repository on GitHub. I’ll assume it’s called “hello”. Then, make a home for it in your $GOPATH.</p>
<pre><code>$ mkdir -p $GOPATH/src/github.com/your-username
$ cd $GOPATH/src/github.com/your-username
$ git clone git@github.com:your-username/hello
$ cd hello</code></pre>
<p>Great. Create <code>main.go</code>, which will be our absolute-minimum Go program.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">package</span> main

<span class="kw">func</span> main() {
    <span class="fu">println</span>(<span class="st">&quot;hello!&quot;</span>)
}</code></pre></div>
<p>Invoke <code>go build</code> to compile everything in the current directory. It’ll produce a binary with the same name as the directory.</p>
<pre><code>$ go build
$ ./hello
hello!</code></pre>
<p>Easy! Even after several years of writing Go, I still start all of my new projects like this. An empty git repo, a <code>main.go</code>, and a little bit of typing.</p>
<p>Since we took care to follow the common conventions, your application is automatically <code>go get</code>-able. If you commit and push this single file to GitHub, anyone with a working Go installation should be able to do this:</p>
<pre><code>$ go get github.com/your-username/hello
$ $GOPATH/bin/hello
hello!</code></pre>
<h2 id="making-a-web-server">Making a web server</h2>
<p>Let’s turn our hello, world into a web server. Here’s the full program.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">package</span> main

<span class="kw">import</span> <span class="st">&quot;net/http&quot;</span>

<span class="kw">func</span> main() {
    http.HandleFunc(<span class="st">&quot;/&quot;</span>, hello)
    http.ListenAndServe(<span class="st">&quot;:8080&quot;</span>, <span class="ot">nil</span>)
}

<span class="kw">func</span> hello(w http.ResponseWriter, r *http.Request) {
    w.Write([]<span class="dt">byte</span>(<span class="st">&quot;hello!&quot;</span>))
}</code></pre></div>
<p>There’s a little bit to unpack. First, we need to import the <a href="http://golang.org/pkg/net/http">net/http</a> package from the standard library.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">import</span> <span class="st">&quot;net/http&quot;</span></code></pre></div>
<p>Then, in the main function, we install a handler function at the root path of our webserver. <a href="http://golang.org/pkg/net/http/#HandleFunc">http.HandleFunc</a> operates on the default HTTP router, officially called a <a href="http://golang.org/pkg/net/http/#ServeMux">ServeMux</a>.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go">http.HandleFunc(<span class="st">&quot;/&quot;</span>, hello)</code></pre></div>
<p>The function hello is an <a href="http://golang.org/pkg/net/http/#HandlerFunc">http.HandlerFunc</a>, which means it has a specific type signature, and can be passed as an argument to HandleFunc. Every time a new request comes into the HTTP server matching the root path, the server will spawn a new goroutine executing the hello function. And the hello function simply uses the <a href="http://golang.org/pkg/net/http/#ResponseWriter">http.ResponseWriter</a> to write a response to the client. Since http.ResponseWriter.Write takes the more general <code>[]byte</code>, or byte-slice, as a parameter, we do a simple type conversion of our string.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">func</span> hello(w http.ResponseWriter, r *http.Request) {
    w.Write([]<span class="dt">byte</span>(<span class="st">&quot;hello!&quot;</span>))
}</code></pre></div>
<p>Finally, we start the HTTP server on port 8080 and with the default ServeMux via <a href="http://golang.org/pkg/net/http/#ListenAndServe">http.ListenAndServe</a>. That’s a synchronous, or blocking, call, which will keep the program alive until interrupted. Compile and run just as before.</p>
<pre><code>$ go build
./hello</code></pre>
<p>And in another terminal, or your browser, make an HTTP request.</p>
<pre><code>$ curl http://localhost:8080
hello!</code></pre>
<p>Easy! No frameworks to install, no dependencies to download, no project skeletons to create. Even the binary itself is native code, statically linked, with no runtime dependencies. Plus, the standard library’s HTTP server is production-grade, with defenses against common attacks. It can serve requests directly from the live internet—no intermediary required.</p>
<h2 id="adding-more-routes">Adding more routes</h2>
<p>We can do something more interesting than just say hello. Let’s take a city as input, call out to a weather API, and forward a response with the temperature. The <a href="http://openweathermap.org/">OpenWeatherMap</a> provides a <a href="http://openweathermap.org/api">simple and free API</a> for <a href="http://openweathermap.org/current">current forecast info</a>. <a href="http://home.openweathermap.org/users/sign_up">Register</a> for a free account to get an API key. OpenWeatherMap’s API can be <a href="http://api.openweathermap.org/data/2.5/weather?APPID=YOUR_API_KEY&amp;q=Tokyo">queried by city</a>. It returns responses like this (partially redacted):</p>
<div class="sourceCode"><pre class="sourceCode json"><code class="sourceCode json"><span class="fu">{</span>
    <span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;Tokyo&quot;</span><span class="fu">,</span>
    <span class="dt">&quot;coord&quot;</span><span class="fu">:</span> <span class="fu">{</span>
        <span class="dt">&quot;lon&quot;</span><span class="fu">:</span> <span class="fl">139.69</span><span class="fu">,</span>
        <span class="dt">&quot;lat&quot;</span><span class="fu">:</span> <span class="fl">35.69</span>
    <span class="fu">},</span>
    <span class="dt">&quot;weather&quot;</span><span class="fu">:</span> <span class="ot">[</span>
        <span class="fu">{</span>
            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">803</span><span class="fu">,</span>
            <span class="dt">&quot;main&quot;</span><span class="fu">:</span> <span class="st">&quot;Clouds&quot;</span><span class="fu">,</span>
            <span class="dt">&quot;description&quot;</span><span class="fu">:</span> <span class="st">&quot;broken clouds&quot;</span><span class="fu">,</span>
            <span class="dt">&quot;icon&quot;</span><span class="fu">:</span> <span class="st">&quot;04n&quot;</span>
        <span class="fu">}</span>
    <span class="ot">]</span><span class="fu">,</span>
    <span class="dt">&quot;main&quot;</span><span class="fu">:</span> <span class="fu">{</span>
        <span class="dt">&quot;temp&quot;</span><span class="fu">:</span> <span class="fl">296.69</span><span class="fu">,</span>
        <span class="dt">&quot;pressure&quot;</span><span class="fu">:</span> <span class="dv">1014</span><span class="fu">,</span>
        <span class="dt">&quot;humidity&quot;</span><span class="fu">:</span> <span class="dv">83</span><span class="fu">,</span>
        <span class="dt">&quot;temp_min&quot;</span><span class="fu">:</span> <span class="fl">295.37</span><span class="fu">,</span>
        <span class="dt">&quot;temp_max&quot;</span><span class="fu">:</span> <span class="fl">298.15</span>
    <span class="fu">}</span>
<span class="fu">}</span></code></pre></div>
<p>Go is a statically-typed language, so we should create a structure that mirrors this response format. We don’t need to capture every piece of information, just the stuff we care about. For now, let’s just get the city name and temperature, which is (hilariously) returned in Kelvin. We’ll define a struct to represent the data we need returned by the weather API.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> weatherData <span class="kw">struct</span> {
    Name <span class="dt">string</span> <span class="st">`json:&quot;name&quot;`</span>
    Main <span class="kw">struct</span> {
        Kelvin <span class="dt">float64</span> <span class="st">`json:&quot;temp&quot;`</span>
    } <span class="st">`json:&quot;main&quot;`</span>
}</code></pre></div>
<p>The <code>type</code> keyword defines a new type, which we call <code>weatherData</code>, and declare as a struct. Each field in the struct has a name (e.g. <code>Name</code>, <code>Main</code>), a type (<code>string</code>, another anonymous <code>struct</code>), and what’s known as a tag. Tags are like metadata, and allow us to use the <a href="http://golang.org/pkg/encoding/json">encoding/json</a> package to directly unmarshal the API’s response into our struct. It’s a bit more typing compared to dynamic languages like Python or Ruby, but it gets us the highly desirable property of type safety. For more about JSON and Go, see <a href="http://blog.golang.org/json-and-go">this blog post</a>, or <a href="https://gobyexample.com/json">this example code</a>.</p>
<p>We’ve defined the structure, and now we need to define a way to populate it. Let’s write a function to do that.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">func</span> query(city <span class="dt">string</span>) (weatherData, <span class="dt">error</span>) {
    resp, err := http.Get(<span class="st">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=YOUR_API_KEY&amp;q=&quot;</span> + city)
    <span class="kw">if</span> err != <span class="ot">nil</span> {
        <span class="kw">return</span> weatherData{}, err
    }

    <span class="kw">defer</span> resp.Body.Close()

    <span class="kw">var</span> d weatherData

    <span class="kw">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;d); err != <span class="ot">nil</span> {
        <span class="kw">return</span> weatherData{}, err
    }

    <span class="kw">return</span> d, <span class="ot">nil</span>
}</code></pre></div>
<p>The function takes a string representing the city, and returns a weatherData struct and an error. This is the fundamental error-handling idiom in Go. Functions encode behavior, and behaviors typically can fail. For us, the GET request against OpenWeatherMap can fail for any number of reasons, and the data returned might not be what we expect. In either case, we return a non-nil error to the client, who’s expected to deal it in a way that makes sense in the calling context.</p>
<p>If the <a href="http://golang.org/pkg/net/http/#Get">http.Get</a> succeeds, we <a href="http://golang.org/doc/effective_go.html#defer">defer</a> a call to close the response body, which will execute when we leave the function scope (when we return from the query function) and is an elegant form of resource management. Meanwhile, we allocate a weatherData struct, and use a <a href="http://golang.org/pkg/encoding/json/#Decoder">json.Decoder</a> to unmarshal from the response body directly into our struct.</p>
<p>As an aside, the <a href="http://golang.org/pkg/encoding/json/#NewDecoder">json.NewDecoder</a> leverages an elegant feature of Go, which are <a href="http://go-book.appspot.com/interfaces.html">interfaces</a>. The Decoder doesn’t take a concrete HTTP response body; rather, it takes an <a href="http://golang.org/pkg/io/#Reader">io.Reader</a> interface, which the <a href="http://golang.org/pkg/net/http/#Response">http.Response.Body</a> happens to satisfy. The Decoder supplies a behavior (Decode) which works just by invoking methods on types that satisfy other behaviors (Read). In Go, we tend to implement behavior in terms of functions operating on interfaces. It gives us a clean separation of data and control planes, easy testability with mocks, and code that’s a lot easier to reason about.</p>
<p>Finally, if the decode succeeds, we return the weatherData to the caller, with a nil error to indicate success. Now let’s wire that function up to a request handler.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go">http.HandleFunc(<span class="st">&quot;/weather/&quot;</span>, <span class="kw">func</span>(w http.ResponseWriter, r *http.Request) {
    city := strings.SplitN(r.URL.Path, <span class="st">&quot;/&quot;</span>, <span class="dv">3</span>)[<span class="dv">2</span>]

    data, err := query(city)
    <span class="kw">if</span> err != <span class="ot">nil</span> {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        <span class="kw">return</span>
    }

    w.Header().Set(<span class="st">&quot;Content-Type&quot;</span>, <span class="st">&quot;application/json; charset=utf-8&quot;</span>)
    json.NewEncoder(w).Encode(data)
})</code></pre></div>
<p>Here, we’re definining the handler inline, rather than as a separate function. We use <a href="http://golang.org/pkg/strings/#SplitN">strings.SplitN</a> to take everything in the path after <code>/weather/</code> and treat it as the city. We make our query, and if there’s an error, we report it to the client with the <a href="http://golang.org/pkg/net/http/#Error">http.Error</a> helper function. We need to return at that point, so the HTTP request is completed. Otherwise, we tell our client that we’re going to send them JSON data, and use <a href="http://golang.org/pkg/encoding/json/#NewEncoder">json.NewEncoder</a> to JSON-encode the weatherData directly.</p>
<p>The code so far is nice and procedural, and easy to understand. No opportunity for misinterpretation, and no way to miss the common errors. If we move the “hello, world” handler to <code>/hello</code>, and make the necessary imports, we have our complete program:</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">package</span> main

<span class="kw">import</span> (
    <span class="st">&quot;encoding/json&quot;</span>
    <span class="st">&quot;net/http&quot;</span>
    <span class="st">&quot;strings&quot;</span>
)

<span class="kw">func</span> main() {
    http.HandleFunc(<span class="st">&quot;/hello&quot;</span>, hello)

    http.HandleFunc(<span class="st">&quot;/weather/&quot;</span>, <span class="kw">func</span>(w http.ResponseWriter, r *http.Request) {
        city := strings.SplitN(r.URL.Path, <span class="st">&quot;/&quot;</span>, <span class="dv">3</span>)[<span class="dv">2</span>]

        data, err := query(city)
        <span class="kw">if</span> err != <span class="ot">nil</span> {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            <span class="kw">return</span>
        }

        w.Header().Set(<span class="st">&quot;Content-Type&quot;</span>, <span class="st">&quot;application/json; charset=utf-8&quot;</span>)
        json.NewEncoder(w).Encode(data)
    })

    http.ListenAndServe(<span class="st">&quot;:8080&quot;</span>, <span class="ot">nil</span>)
}

<span class="kw">func</span> hello(w http.ResponseWriter, r *http.Request) {
    w.Write([]<span class="dt">byte</span>(<span class="st">&quot;hello!&quot;</span>))
}

<span class="kw">func</span> query(city <span class="dt">string</span>) (weatherData, <span class="dt">error</span>) {
    resp, err := http.Get(<span class="st">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=YOUR_API_KEY&amp;q=&quot;</span> + city)
    <span class="kw">if</span> err != <span class="ot">nil</span> {
        <span class="kw">return</span> weatherData{}, err
    }

    <span class="kw">defer</span> resp.Body.Close()

    <span class="kw">var</span> d weatherData

    <span class="kw">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;d); err != <span class="ot">nil</span> {
        <span class="kw">return</span> weatherData{}, err
    }

    <span class="kw">return</span> d, <span class="ot">nil</span>
}

<span class="kw">type</span> weatherData <span class="kw">struct</span> {
    Name <span class="dt">string</span> <span class="st">`json:&quot;name&quot;`</span>
    Main <span class="kw">struct</span> {
        Kelvin <span class="dt">float64</span> <span class="st">`json:&quot;temp&quot;`</span>
    } <span class="st">`json:&quot;main&quot;`</span>
}</code></pre></div>
<p>Build and run it, same as before.</p>
<pre><code>$ go build
$ ./hello</code></pre>
<pre><code>$ curl http://localhost:8080/weather/tokyo
{&quot;name&quot;:&quot;Tokyo&quot;,&quot;main&quot;:{&quot;temp&quot;:295.9}}</code></pre>
<p>Commit and push!</p>
<h2 id="querying-multiple-apis">Querying multiple APIs</h2>
<p>Maybe we can build a more accurate temperature for a city, by querying and averaging multiple weather APIs. Unfortunately for us, most weather APIs require authentication. So, get yourself an API key for <a href="http://www.wunderground.com/weather/api">Weather Underground</a>.</p>
<p>Since we want the same behavior from all of our weather APIs, it makes sense to encode that behavior as an interface.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> weatherProvider <span class="kw">interface</span> {
    temperature(city <span class="dt">string</span>) (<span class="dt">float64</span>, <span class="dt">error</span>) <span class="co">// in Kelvin, naturally</span>
}</code></pre></div>
<p>Now, we can transform our old OpenWeatherMap query function into a type that satisfies the weatherProvider interface. Since we don’t need to store any state to make the HTTP GET, we’ll just use an empty struct. And we’ll add a simple line of logging, so we can see what’s happening.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> openWeatherMap <span class="kw">struct</span>{}

<span class="kw">func</span> (w openWeatherMap) temperature(city <span class="dt">string</span>) (<span class="dt">float64</span>, <span class="dt">error</span>) {
    resp, err := http.Get(<span class="st">&quot;http://api.openweathermap.org/data/2.5/weather?APPID=YOUR_API_KEY&amp;q=&quot;</span> + city)
    <span class="kw">if</span> err != <span class="ot">nil</span> {
        <span class="kw">return</span> <span class="dv">0</span>, err
    }

    <span class="kw">defer</span> resp.Body.Close()

    <span class="kw">var</span> d <span class="kw">struct</span> {
        Main <span class="kw">struct</span> {
            Kelvin <span class="dt">float64</span> <span class="st">`json:&quot;temp&quot;`</span>
        } <span class="st">`json:&quot;main&quot;`</span>
    }

    <span class="kw">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;d); err != <span class="ot">nil</span> {
        <span class="kw">return</span> <span class="dv">0</span>, err
    }

    log.Printf(<span class="st">&quot;openWeatherMap: %s: %.2f&quot;</span>, city, d.Main.Kelvin)
    <span class="kw">return</span> d.Main.Kelvin, <span class="ot">nil</span>
}</code></pre></div>
<p>Since we only want to extract the Kelvin temperature from the response, we can define the response struct inline. Otherwise, it’s pretty much the same as the query function, just defined as a method on an openWeatherMap struct. That way, we can use an instance of openWeatherMap as a weatherProvider.</p>
<p>Let’s do the same for the Weather Underground. The only difference is we need to provide an API key. We’ll store the key in the struct, and use it in the method. It will be a very similar function.</p>
<p>(Note that the Weather Underground doesn’t disambiguate cities quite as nicely as OpenWeatherMap. We’re skipping some important logic to handle ambiguous city names for the purposes of the example.)</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> weatherUnderground <span class="kw">struct</span> {
    apiKey <span class="dt">string</span>
}

<span class="kw">func</span> (w weatherUnderground) temperature(city <span class="dt">string</span>) (<span class="dt">float64</span>, <span class="dt">error</span>) {
    resp, err := http.Get(<span class="st">&quot;http://api.wunderground.com/api/&quot;</span> + w.apiKey + <span class="st">&quot;/conditions/q/&quot;</span> + city + <span class="st">&quot;.json&quot;</span>)
    <span class="kw">if</span> err != <span class="ot">nil</span> {
        <span class="kw">return</span> <span class="dv">0</span>, err
    }

    <span class="kw">defer</span> resp.Body.Close()

    <span class="kw">var</span> d <span class="kw">struct</span> {
        Observation <span class="kw">struct</span> {
            Celsius <span class="dt">float64</span> <span class="st">`json:&quot;temp_c&quot;`</span>
        } <span class="st">`json:&quot;current_observation&quot;`</span>
    }

    <span class="kw">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;d); err != <span class="ot">nil</span> {
        <span class="kw">return</span> <span class="dv">0</span>, err
    }

    kelvin := d.Observation.Celsius + <span class="dv">273</span><span class="fl">.15</span>
    log.Printf(<span class="st">&quot;weatherUnderground: %s: %.2f&quot;</span>, city, kelvin)
    <span class="kw">return</span> kelvin, <span class="ot">nil</span>
}</code></pre></div>
<p>Now that we have a couple of weather providers, let’s write a function to query them all, and return the average temperature. For simplicity, if we encounter any errors, we’ll just give up.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">func</span> temperature(city <span class="dt">string</span>, providers ...weatherProvider) (<span class="dt">float64</span>, <span class="dt">error</span>) {
    sum := <span class="dv">0</span><span class="fl">.0</span>

    <span class="kw">for</span> _, provider := <span class="kw">range</span> providers {
        k, err := provider.temperature(city)
        <span class="kw">if</span> err != <span class="ot">nil</span> {
            <span class="kw">return</span> <span class="dv">0</span>, err
        }

        sum += k
    }

    <span class="kw">return</span> sum / <span class="dt">float64</span>(<span class="fu">len</span>(providers)), <span class="ot">nil</span>
}</code></pre></div>
<p>Notice that the function definition is very close to the weatherProvider temperature method. If we collect the individual weatherProviders into a type, and define the temperature method on that type, we can implement a meta-weatherProvider, comprised of other weatherProviders.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> multiWeatherProvider []weatherProvider

<span class="kw">func</span> (w multiWeatherProvider) temperature(city <span class="dt">string</span>) (<span class="dt">float64</span>, <span class="dt">error</span>) {
    sum := <span class="dv">0</span><span class="fl">.0</span>

    <span class="kw">for</span> _, provider := <span class="kw">range</span> w {
        k, err := provider.temperature(city)
        <span class="kw">if</span> err != <span class="ot">nil</span> {
            <span class="kw">return</span> <span class="dv">0</span>, err
        }

        sum += k
    }

    <span class="kw">return</span> sum / <span class="dt">float64</span>(<span class="fu">len</span>(w)), <span class="ot">nil</span>
}</code></pre></div>
<p>Perfect. We can pass a multiWeatherProvider anywhere that accepts a weatherProvider.</p>
<p>Now, we can wire that up to our HTTP server, very similar to before.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">func</span> main() {
    mw := multiWeatherProvider{
        openWeatherMap{},
        weatherUnderground{apiKey: <span class="st">&quot;your-key-here&quot;</span>},
    }

    http.HandleFunc(<span class="st">&quot;/weather/&quot;</span>, <span class="kw">func</span>(w http.ResponseWriter, r *http.Request) {
        begin := time.Now()
        city := strings.SplitN(r.URL.Path, <span class="st">&quot;/&quot;</span>, <span class="dv">3</span>)[<span class="dv">2</span>]

        temp, err := mw.temperature(city)
        <span class="kw">if</span> err != <span class="ot">nil</span> {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            <span class="kw">return</span>
        }

        w.Header().Set(<span class="st">&quot;Content-Type&quot;</span>, <span class="st">&quot;application/json; charset=utf-8&quot;</span>)
        json.NewEncoder(w).Encode(<span class="kw">map</span>[<span class="dt">string</span>]<span class="kw">interface</span>{}{
            <span class="st">&quot;city&quot;</span>: city,
            <span class="st">&quot;temp&quot;</span>: temp,
            <span class="st">&quot;took&quot;</span>: time.Since(begin).String(),
        })
    })

    http.ListenAndServe(<span class="st">&quot;:8080&quot;</span>, <span class="ot">nil</span>)
}</code></pre></div>
<p>Compile, run, and GET, just as before. In addition to the JSON response, you’ll see some output in your server logs.</p>
<pre><code>$ ./hello
2015/01/01 13:14:15 openWeatherMap: tokyo: 295.46
2015/01/01 13:14:16 weatherUnderground: tokyo: 273.15</code></pre>
<pre><code>$ curl http://localhost/weather/tokyo
{&quot;city&quot;:&quot;tokyo&quot;,&quot;temp&quot;:284.30499999999995,&quot;took&quot;:&quot;821.665230ms&quot;}</code></pre>
<p>Commit and push!</p>
<h2 id="make-it-concurrent">Make it concurrent</h2>
<p>Right now we just query the APIs synchronously, one after the other. But there’s no reason we couldn’t query them at the same time. That should decrease our response times.</p>
<p>To do that, we leverage Go’s concurrency primitives: goroutines and channels. We’ll spawn each API query in its own goroutine, which will run concurrently. We’ll collect the responses in a single channel, and perform the average calculation when everything is finished.</p>
<div class="sourceCode"><pre class="sourceCode go"><code class="sourceCode go"><span class="kw">func</span> (w multiWeatherProvider) temperature(city <span class="dt">string</span>) (<span class="dt">float64</span>, <span class="dt">error</span>) {
    <span class="co">// Make a channel for temperatures, and a channel for errors.</span>
    <span class="co">// Each provider will push a value into only one.</span>
    temps := <span class="fu">make</span>(<span class="kw">chan</span> <span class="dt">float64</span>, <span class="fu">len</span>(w))
    errs := <span class="fu">make</span>(<span class="kw">chan</span> <span class="dt">error</span>, <span class="fu">len</span>(w))

    <span class="co">// For each provider, spawn a goroutine with an anonymous function.</span>
    <span class="co">// That function will invoke the temperature method, and forward the response.</span>
    <span class="kw">for</span> _, provider := <span class="kw">range</span> w {
        <span class="kw">go</span> <span class="kw">func</span>(p weatherProvider) {
            k, err := p.temperature(city)
            <span class="kw">if</span> err != <span class="ot">nil</span> {
                errs &lt;- err
                <span class="kw">return</span>
            }
            temps &lt;- k
        }(provider)
    }

    sum := <span class="dv">0</span><span class="fl">.0</span>

    <span class="co">// Collect a temperature or an error from each provider.</span>
    <span class="kw">for</span> i := <span class="dv">0</span>; i &lt; <span class="fu">len</span>(w); i++ {
        <span class="kw">select</span> {
        <span class="kw">case</span> temp := &lt;-temps:
            sum += temp
        <span class="kw">case</span> err := &lt;-errs:
            <span class="kw">return</span> <span class="dv">0</span>, err
        }
    }

    <span class="co">// Return the average, same as before.</span>
    <span class="kw">return</span> sum / <span class="dt">float64</span>(<span class="fu">len</span>(w)), <span class="ot">nil</span>
}</code></pre></div>
<p>Now, our requests take as long as the slowest individual weatherProvider. And we only needed to change the behavior of the multiWeatherProvider, which, notably, still satisfies the simple, synchronous weatherProvider interface.</p>
<p>Commit and push!</p>
<h2 id="simplicity">Simplicity</h2>
<p>We’ve gone from ‘hello world’ to a concurrent, REST-ish backend server in a handful of steps and using only the Go standard library. Our code can be fetched and deployed on <a href="https://golang.org/doc/install#requirements">nearly any server architecture</a>. The resulting binary is self-contained and fast. And, most importantly, the code is straightforward to read and reason about. It can easily be maintained and extended, as necessary. I believe all of these properties are a function of Go’s steady and philosophic devotion to simplicity. As Rob “Commander” Pike puts it, <a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">less is exponentially more</a>.</p>
<h2 id="further-exercises">Further exercises</h2>
<p><a href="https://github.com/peterbourgon/how-i-start-go">Fork</a> the final code on github.</p>
<p>Can you add another weatherProvider? (Hint: <a href="https://developer.forecast.io/">forecast.io</a> is a good one.)</p>
<p>Can you implement a timeout in the multiWeatherProvider? (Hint: look at <a href="http://golang.org/pkg/time/#After">time.After</a>.)</p>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/go/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Peter Bourgon</h3>
    <h4>Go</h4>
    <h3><small> Go evangelist and SoundCloud engineer</small></h3>
    <p><a href='http://peter.bourgon.org'>Peter</a> is a software engineer focusing on large-scale distributed systems. He's been writing <a href='http://golang.org/'>Go</a> since its public release in 2009, and is a huge fan of its simplicity and pragmatism. Peter lives in Berlin and works at <a href='https://soundcloud.com/'>SoundCloud</a>, building the data systems and infrastructure that power the world's leading audio platform.</p>
    <a class="btn btn-primary" href="/posts/go/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Ruby</title>
    <link href="http://www.howistart.org/posts/ruby/1/index.html" />
    <id>http://www.howistart.org/posts/ruby/1/index.html</id>
    <published>2014-07-10T00:00:00Z</published>
    <updated>2014-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Ruby <small>with Steve Klabnik</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <h2 id="intro">Intro</h2>
<p>Hi there! I’m Steve. <em>waves</em>. Let’s build a Ruby gem together!</p>
<p>There are a few key steps to building a gem. Here’s what we need to do:</p>
<ol style="list-style-type: decimal">
<li>Figure out what our gem needs to do.</li>
<li>Install git</li>
<li>Install Ruby</li>
<li>Generate the skeleton</li>
<li>Write some tests</li>
<li>Implement the code</li>
<li>Write some docs</li>
<li>Push to GitHub</li>
<li>Push to RubyGems</li>
<li>Tweet about it</li>
</ol>
<p>Ten easy steps. Let’s do this!</p>
<p>Oh, one more comment before I start: I use <code>vim</code> to do all of my editing. Many people also use Textmate on Mac OS X, and Sublime is becoming increasingly popular. But I like <code>vim</code>. I don’t use any plugins, either. I do like <a href="https://github.com/kien/ctrlp.vim">cntrl-p</a>. In general, I keep my tooling very vanilla; it helps when I pair, when I teach, and probably to tell you the truth I’m probably just lazy.</p>
<p>Anyway. Ten steps!</p>
<h2 id="figure-out-what-our-gem-needs-to-do.">Figure out what our gem needs to do.</h2>
<p>The most important part! Every gem needs some kind of raison d’être. Any time I have some Ruby code I think someone else might use, I try to extract it into a gem. This means I currently have push access to 38 gems, and I am a committer on many more. Oh well, everyone has to have a hobby…</p>
<p>In this case, we want to make a gem so that I can show you how I make a gem. So we’ve got a name, which is often the hardest part of making the damn thing. We’ll call it “<code>how_i_start</code>”. Even with just the name, we already have something to talk about: naming conventions. Ruby gems should be named with all lower case letters, and no punctuation other than <code>_</code> and <code>-</code>. Use <code>_</code> for separating words, and <code>-</code> to indicate an extension to an existing gem.</p>
<p>Not every single gem follows these conventions, especially if they are quite old. For example, <a href="https://rubygems.org/gems/activerecord"><code>activerecord</code></a> should really be <code>active_record</code>. If you’re starting a new gem, don’t contribute to this confusion! You can find a slightly more full description of these naming guidelines <a href="http://guides.rubygems.org/name-your-gem/">on the RubyGems Guides</a>.</p>
<p>So, we’ve got a name, but what should it do? Let’s make it do something very simple: we’ll include a simple executable that prints out a link to this article. That’ll be a very small amount of behavior, and also be relevant.</p>
<p>I’ve already written and released a gem with this name, so if you want to push your own version of the RubyGem, you’ll have to change it to something else. Sorry about that! Maybe try the extension convention for names, and call yours <code>how_i_start-jonathan</code>. Of course, only do that if your name is Jonathan, or he’ll be really disappointed when he reads this article. I’ve got your back, Jonathan!</p>
<h2 id="install-git">Install git</h2>
<p>Rubyists use <code>git</code> to manage versions. If you don’t like it, well… sorry. You’re gonna have a bad time. Everything in Ruby world assumes <code>git</code>.</p>
<p>Since I’m on a Debian-based Linux, I just type this:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">apt-get</span> install git</code></pre></div>
<p>Done. This is probably the easiest step in the whole thing. Well, maybe not. But one command is pretty easy.</p>
<p>You can’t skip this step. Later, our tools will assume that we have <code>git</code> installed. It’s a bit fascist, I’ll admit, but at least the trains run on time. :[</p>
<h2 id="install-ruby">Install Ruby</h2>
<p>We can’t make a gem without Ruby! It’s also essential to use some sort of tool to switch between different Ruby versions, as well. When a new version of Ruby comes out, we want all those new goodies.</p>
<p>There are a bunch of options here, but I prefer minimalism. I use <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> to install Ruby, and <a href="https://github.com/postmodern/chruby">chruby</a> (“chuh ruby”) to <strong>ch</strong>ange between different <strong>ruby</strong>s.</p>
<p>Oh, I should also mention that I use Linux almost exclusively. These instructions will also work almost unchanged on an Apple computer, if you happen to be like many Rubyists. If you’re on Windows, I highly recommend <a href="http://rubyinstaller.org/">RubyInstaller</a>. I don’t use a version switcher when I’m on Windows.</p>
<p>Let’s install <code>ruby-build</code> so we can build and install a Ruby. I wonder if I could have fit more ‘install’ and ‘build’ and ‘Ruby’ into that sentence. Anyway, it’s simple:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">git</span> clone https://github.com/sstephenson/ruby-build.git
<span class="kw">cd</span> ruby-build
<span class="kw">./install.sh</span></code></pre></div>
<p>You may need a <code>sudo</code> if you don’t have permissions to install to <code>/usr/local</code>.</p>
<p>On my machine, <code>/usr/local/bin</code> is already in my <code>$PATH</code>, so it just works:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ruby-build</span> --definitions</code></pre></div>
<p>This prints out all the different versions of Ruby that <code>ruby-build</code> knows how to build:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ruby-build</span> --definitions <span class="kw">|</span> <span class="kw">wc</span> -l
<span class="kw">109</span></code></pre></div>
<p>Whoah, 109 versions so far!</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ruby-build</span> --definitions <span class="kw">|</span> <span class="kw">grep</span> <span class="st">&quot;2\.1&quot;</span>
<span class="kw">2.1.0</span>
<span class="kw">2.1.0-dev</span>
<span class="kw">2.1.0-preview1</span>
<span class="kw">2.1.0-preview2</span>
<span class="kw">2.1.0-rc1</span>
<span class="kw">2.1.1</span>
<span class="kw">rbx-2.1.0</span>
<span class="kw">rbx-2.1.1</span>
<span class="kw">rbx-2.2.1</span></code></pre></div>
<p>Ruby 2.1 is the latest version of Ruby that’s out right now, and there’s even a bunch of them! We want <code>2.1.1</code>. Let’s build it:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">ruby-build</span> 2.1.1 ~/.rubies/2.1.1</code></pre></div>
<p>You tell <code>ruby-build</code> which version of Ruby to build, and where you want to put it. <code>~/.rubies</code> is one of the places that <code>chruby</code> looks by default, and I like that each user on the machine can have their own Rubies. I mean, I’m the only person (other than the NSA, probably) that is using my laptop, but still, keeping it all local to your regular user is nice.</p>
<p>That should run for a while, and then you have a Ruby installed! Next, <code>chruby</code>. <code>chruby</code> is sweet because you’re able to type:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">chruby</span> 2.0.0
$ <span class="kw">ruby</span> -v
<span class="kw">ruby</span> 2.0.0p0 (2014-01-01) [<span class="kw">x86_64-linux</span>]
$ <span class="kw">chruby</span> 2.1.1
<span class="kw">ruby</span> 2.1.1p76 (2014-02-24 revision 45161) [<span class="kw">x86_64-linux</span>]</code></pre></div>
<p>Nice and easy. It’s great for being able to test your gem against multiple Ruby versions, or when a new Ruby comes out that you’d like to use.</p>
<p>Let’s install it:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">wget</span> -O chruby-0.3.8.tar.gz https://github.com/postmodern/chruby/archive/v0.3.8.tar.gz
$ <span class="kw">tar</span> -xzvf chruby-0.3.8.tar.gz
$ <span class="kw">cd</span> chruby-0.3.8/
$ <span class="kw">sudo</span> make install</code></pre></div>
<p>You then have to do one more thing: add a line to your shell’s profile. I use bash, so mine is <code>~/.bashrc</code>. If you’re cooler than me, you’ll probably edit <code>~/.zshrc</code>. Either way, add this line:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">source</span> /usr/local/share/chruby/chruby.sh</code></pre></div>
<p>This loads up <code>chruby</code>, which is basically just a shell script. I happen to like automatically switching to a particular Ruby, so I also add</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">chruby</span> 2.1.1</code></pre></div>
<p>This means that I’ll always have 2.1.1 right at my fingertips. Of course, given that it’s a shell script, this is also how you use <code>chruby</code>. Just type the version after the name, and you’re good to go. Easy peasy.</p>
<p>That’s it for tooling! We’re all good to go. Now, let’s dig in to the gem-building specific stuff.</p>
<h2 id="generate-the-skeleton">Generate the skeleton</h2>
<p>Turns out that we’re barely gonna even need to do any setup, as there’s a tool that does it for us. Ruby is super-huge on convention, so that means we have pretty awesome tools. They’d be even better with static types, but what’cha gonna do?</p>
<p>To do the generating, we need to install <a href="http://bundler.io/">Bundler</a>. There are only two Rubists in the world who don’t use Bundler. I’m only half-kidding. Bundler’s main job is to help you deal with versions of the dependencies your application needs. But since it does that, it also comes with an awesome generator to help you make gems. It’s going to do 90% of the work for us.</p>
<p>First, we need to install Bundler. It’s as easy as</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">gem</span> install bundler</code></pre></div>
<p>Once that’s done, we run a very similar, but different, command. This generates a skeleton for our gem’s meat to build on top of.</p>
<p>That sentence was kinda gross. Sorry. Anyway:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> gem how_i_start
      <span class="kw">create</span>  how_i_start/Gemfile
      <span class="kw">create</span>  how_i_start/Rakefile
      <span class="kw">create</span>  how_i_start/LICENSE.txt
      <span class="kw">create</span>  how_i_start/README.md
      <span class="kw">create</span>  how_i_start/.gitignore
      <span class="kw">create</span>  how_i_start/how_i_start.gemspec
      <span class="kw">create</span>  how_i_start/lib/how_i_start.rb
      <span class="kw">create</span>  how_i_start/lib/how_i_start/version.rb
<span class="kw">Initializing</span> git repo in /home/steve/src/how_i_start
$</code></pre></div>
<p>See? Told you we needed <code>git</code>. Here’s what these files do:</p>
<h3 id="gemfile">Gemfile</h3>
<p>The <code>Gemfile</code> is the main file that Bundler uses to track versions of all the dependencies our gem needs. It does this through an interesting mechanism:</p>
<pre><code>$ cat Gemfile
source &#39;https://rubygems.org&#39;

# Specify your gem&#39;s dependencies in how_i_start.gemspec
gemspec</code></pre>
<p>Surprise! Your dependencies are in another castle. Bundler knows how to figure them out from our gemspec, which we’ll talk about in a moment. We don’t need to edit this file at all, it works just fine.</p>
<h3 id="rakefile">Rakefile</h3>
<p>Rake is Ruby’s version of the venerable Make tool for building things. We don’t need to edit this either, as it already contains the stuff needed to do a bunch of cool things:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> exec rake -T
<span class="kw">rake</span> build    <span class="co"># Build how_i_start-0.0.1.gem into the pkg directory</span>
<span class="kw">rake</span> install  <span class="co"># Build and install how_i_start-0.0.1.gem into system gems</span>
<span class="kw">rake</span> release  <span class="co"># Create tag v0.0.1 and build and push how_i_start-0.0.1.gem to Ru...</span></code></pre></div>
<p>These three commands help us with making a gem. <code>rake build</code> will attempt to package up our gem. <code>rake install</code> will <code>rake build</code>, and then install it into our Ruby, so we can give it a whirl. Finally, <code>rake release</code> will actually release our gem. We’ll talk more about all this later.</p>
<h3 id="license.txt">LICENSE.txt</h3>
<p>Rubyists almost exclusively love the MIT license, because it makes making money really, really easy. I say all kinds of controversial political things on Twitter, and everybody shrugs. As soon as I suggest that I <em>might</em> use the GPL, people lose their cool.</p>
<p>You should use whatever license you want. I won’t judge you. Everyone else might, though. :/.</p>
<h3 id="readme.md">README.md</h3>
<p>Bundler gives us a pretty okay README to start with. We’ll modify this more soon. The <code>md</code> stands for Markdown, the One True Document Format.</p>
<h3 id="gitignore">.gitignore</h3>
<p>Bundler is kind enough to make sure to create a decent ignore file for <code>git</code> so that we don’t check bad things in. There’s one thing that’s different when you’re making a gem, and that’s the <code>Gemfile.lock</code>. Normally, if you were building an app, you’d check this in, but when you’re making a gem, you don’t. If you don’t know why this is, <a href="http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/">go read this</a>.</p>
<h3 id="how_i_start.gemspec">how_i_start.gemspec</h3>
<p>This file specifies all the metadata for our gem. The default values are decent, but I’m going to edit them, and <strong>then</strong> show you the output.</p>
<p>Okay, I’m done. Here it is. Substitute your own details, unless you’re me.</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat how_i_start.gemspec
<span class="co"># coding: utf-8</span>
lib = <span class="dt">File</span>.expand_path(<span class="st">&#39;../lib&#39;</span>, <span class="dv">__FILE__</span>)
<span class="dt">$LOAD_PATH</span>.unshift(lib) <span class="kw">unless</span> <span class="dt">$LOAD_PATH</span>.include?(lib)
require <span class="st">&#39;how_i_start/version&#39;</span>

<span class="dt">Gem</span>::<span class="dt">Specification</span>.new <span class="kw">do</span> |spec|
  spec.name          = <span class="st">&quot;how_i_start&quot;</span>
  spec.version       = <span class="dt">HowIStart</span>::<span class="dt">VERSION</span>
  spec.authors       = [<span class="st">&quot;Steve Klabnik&quot;</span>]
  spec.email         = [<span class="st">&quot;steve@steveklabnik.com&quot;</span>]
  spec.summary       =<span class="ot"> %q{</span><span class="st">A simple gem, to show you how I do things.</span><span class="ot">}</span>
  spec.description   =<span class="ot"> %q{</span><span class="st">A simple gem, to show you how I do things. If it were more complicated, I&#39;d explain more about it here.</span><span class="ot">}</span>
  spec.homepage      = <span class="st">&quot;https://steveklabnik.github.io/how_i_do_things&quot;</span>
  spec.license       = <span class="st">&quot;MIT&quot;</span>

  spec.files         = <span class="st">`git ls-files -z`</span>.split(<span class="st">&quot;\x0&quot;</span>)
  spec.executables   = spec.files.grep(<span class="ot">%r{^bin/}</span>) { |f| <span class="dt">File</span>.basename(f) }
  spec.test_files    = spec.files.grep(<span class="ot">%r{^(test|spec|features)/}</span>)
  spec.require_paths = [<span class="st">&quot;lib&quot;</span>]

  spec.add_development_dependency <span class="st">&quot;bundler&quot;</span>, <span class="st">&quot;~&gt; 1.6&quot;</span>
  spec.add_development_dependency <span class="st">&quot;rake&quot;</span>
<span class="kw">end</span></code></pre></div>
<p>The first part sets up loading paths. The real meat is in the block. It’s all pretty basic stuff. The second of the three blocks is kinda interesting, but you never need to touch the generated files. Basically, they use Git Magic (tm) to figure out which files should be included in your gem. This means that you’ll never accidentally distribute the wrong files, unless you forget to commit them. And if they’re not committed, they don’t exist. You know it’s true.</p>
<p>The <code>require_paths</code> line is a Ruby convention: all the files for your library go in <code>lib</code>.</p>
<p>The last two are interesting, too: they say that in order to work on our gem, we need <code>bundler</code> and <code>rake</code>. If we were using a special test framework, we’d add it here. <code>add_development_dependency</code> has a sibling method that we won’t use, but I feel like I should tell you about: <code>add_dependency</code>. If our gems needed other gems to work, we’d use that to add them, here. These two methods are what Bundler uses to figure out what to install when we’re working on our gem, and what Rubygems uses to figure out what to install when we’re installing our gem. TL;DR: they’re super important.</p>
<p>Whew! That file is the most important, as it tells us where everything else goes. Let’s move on.</p>
<h3 id="libhow_i_start.rb">lib/how_i_start.rb</h3>
<p>As I mentioned, this file is in <code>lib</code> because that’s where our files go. This file has the same name as the gem, so it’s the file that gets required when you say <code>require &quot;how_i_start&quot;</code> in a Ruby program. Very important.</p>
<h3 id="libhow_i_startversion.rb">lib/how_i_start/version.rb</h3>
<p>This file contains just a few lines:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat lib/how_i_start/version.rb
<span class="kw">module</span> <span class="dt">HowIStart</span>
  <span class="dt">VERSION</span> = <span class="st">&quot;0.0.1&quot;</span>
<span class="kw">end</span></code></pre></div>
<p>By keeping this constant in its own file, we can not load up our entire gem when we need to check what version it is. Careful readers will notice that our Gemspec did this, exactly.</p>
<p>You’ll edit this file when you’re about to release a new version of the gem.</p>
<h2 id="write-some-tests">Write some tests</h2>
<p>Step four! Every Rubyist except for DHH believes in test-driven development, so we’ll write a test first. This test will be very, very simple.</p>
<p>I prefer to use <code>minitest</code> for testing, as it’s included with Ruby. I don’t find the extra complexity of other testing frameworks particularly worthwhile, though I will say that RSpec’s mocking framework is kinda nice.</p>
<p>To do this, we need to do a few things:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">mkdir</span> test
$ <span class="kw">touch</span> test/url_test.rb</code></pre></div>
<p>This is the <code>minitest</code> convention. Test files are placed in <code>test</code> folder, ending with <code>_test.rb</code>. We’ll also need to add a few lines to the <code>Rakefile</code>:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat <span class="dt">Rakefile</span>
require <span class="st">&quot;bundler/gem_tasks&quot;</span>

require <span class="st">&quot;rake/testtask&quot;</span>

<span class="dt">Rake</span>::<span class="dt">TestTask</span>.new <span class="kw">do</span> |t|
  t.test_files = <span class="dt">FileList</span>[<span class="st">&#39;test/*_test.rb&#39;</span>]
<span class="kw">end</span>

task <span class="st">default: :test</span></code></pre></div>
<p>That first line was there from Bundler. It’s what made the previous three tasks we discussed. You have to add the rest. The first line requires the necessary stuff from Rake. The second instantiates the task. The line in the block tells the task where to find our files. Finally, we set our default task to run our tests.</p>
<p>Check to see if it works:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> exec rake
$ <span class="kw">echo</span> <span class="ot">$?</span>
<span class="kw">0</span>
$</code></pre></div>
<p>Cool. We don’t have any tests, so we don’t have any output. Let’s make a test!</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat test/url_test.rb
require <span class="st">&quot;minitest/autorun&quot;</span>

require <span class="st">&quot;how_i_start&quot;</span>

<span class="kw">class</span> <span class="dt">UrlTest</span> &lt; <span class="dt">Minitest</span>::<span class="dt">Test</span>
  <span class="kw">def</span> test_url
    assert_equal <span class="st">&quot;http://howistart.org/posts/ruby/1&quot;</span>, <span class="dt">HowIStart</span>::<span class="dt">Url</span>
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<p>Easy enough! We start off by requiring the test runner, requiring our library, and then we make a class to hold our test. One method, starting with <code>test_</code>, is our test itself. We have one simple assertion, which checks that we’ve set a constant to the URL of this post. Nice and easy.</p>
<p>The most important part of TDD is to run your tests and watch them fail. Here we go!</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> exec rake
<span class="kw">Run</span> options: --seed 28249

<span class="co"># Running:</span>

<span class="kw">E</span>

<span class="kw">Finished</span> in 0.001131s, 884.3719 runs/s, 0.0000 assertions/s.

  <span class="kw">1</span>) <span class="kw">Error</span>:
<span class="kw">UrlTest</span>#test_url:
<span class="kw">NameError</span>: uninitialized constant HowIStart::Url
    <span class="kw">/home/steve/src/how_i_start/test</span>/url_test.rb:<span class="kw">5</span>:in <span class="kw">`test_url</span><span class="st">&#39;</span>

<span class="st">1 runs, 0 assertions, 0 failures, 1 errors, 0 skips</span>
<span class="st">rake aborted!</span>
<span class="st">Command failed with status (1): [ruby -I&quot;lib&quot; -I&quot;/home/steve/.gem/ruby/2.1.1/gems/rake-10.3.2/lib&quot; &quot;/home/steve/.gem/ruby/2.1.1/gems/rake-10.3.2/lib/rake/rake_test_loader.rb&quot; &quot;test/url_test.rb&quot; ]</span>

<span class="st">Tasks: TOP =&gt; default =&gt; test</span>
<span class="st">(See full trace by running task with --trace)</span></code></pre></div>
<p>It doesn’t know what our constant is. Perfect.</p>
<h2 id="implement-the-code">Implement the code</h2>
<p>Let’s actually define our constant:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat lib/how_i_start.rb
require <span class="st">&quot;how_i_start/version&quot;</span>

<span class="kw">module</span> <span class="dt">HowIStart</span>
  <span class="dt">Url</span> = <span class="st">&quot;http://howistart.org/posts/ruby/1&quot;</span>
<span class="kw">end</span></code></pre></div>
<p>Note that that’s indented by two spaces, no tabs. Frankly, indenting your code with two spaces and no tabs is more important than getting the rest of the syntax right, if you ask a random Rubyist.</p>
<p>Now we can run our test again:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> exec rake
<span class="kw">Run</span> options: --seed 43182

<span class="co"># Running:</span>

<span class="kw">.</span>

<span class="kw">Finished</span> in 0.001069s, 935.6953 runs/s, 935.6953 assertions/s.

<span class="kw">1</span> runs, 1 assertions, 0 failures, 0 errors, 0 skips</code></pre></div>
<p>:heart_eyes:. We’ve passed the test! That was easy!</p>
<p>Just defining a constant isn’t quite enough, though. Let’s add an executable. Executables are stored in <code>bin</code>:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">mkdir</span> bin</code></pre></div>
<p>Put this in it:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat bin/how_i_start
<span class="kw">#!/usr/bin/env ruby</span>

require <span class="st">&#39;how_i_start&#39;</span>

puts <span class="dt">HowIStart</span>::<span class="dt">Url</span></code></pre></div>
<p>This is actually a script. We don’t add an extension, but we do use a ‘shebang’ line to tell the shell that this is a Ruby script. We then load our library, and print our constant.</p>
<p>I don’t tend to test ‘binaries.’ All the logic should go in the gem itself, the binary is just a thin shim to shove the command-line options to the Real Code.</p>
<h2 id="write-some-docs">Write some docs</h2>
<p>Use Rdoc. If it doesn’t work, use <a href="http://yardoc.org/">YARD</a>. I include this comment here because docs are really, really important. We don’t really have much to document, though. We’ll just add some comments:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">$ cat lib/how_i_start.rb
require <span class="st">&quot;how_i_start/version&quot;</span>

<span class="co"># All code in the gem is namespaced under this module.</span>
<span class="kw">module</span> <span class="dt">HowIStart</span>

  <span class="co"># The URL of the article about how I start.</span>
  <span class="dt">Url</span> = <span class="st">&quot;http://howistart.org/posts/ruby/1&quot;</span>
<span class="kw">end</span>
$ cat lib/how_i_start/version.rb
<span class="kw">module</span> <span class="dt">HowIStart</span>

  <span class="co"># The current version of HowIStart.</span>
  <span class="dt">VERSION</span> = <span class="st">&quot;0.0.1&quot;</span>
<span class="kw">end</span></code></pre></div>
<p>Rdoc will parse these comments to generate documentation. You can get more complicated than this, but it gives you the general idea. Generating the documentation is really easy:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">rdoc</span> lib
<span class="kw">Parsing</span> sources...
<span class="kw">100%</span> [ 2/ 2]  lib/how_i_start/version.rb

<span class="kw">Generating</span> Darkfish format into /home/steve/src/how_i_start/doc...

  <span class="kw">Files</span>:      2

  <span class="kw">Classes</span>:    0 (0 undocumented)
  <span class="kw">Modules</span>:    1 (0 undocumented)
  <span class="kw">Constants</span>:  2 (0 undocumented)
  <span class="kw">Attributes</span>: 0 (0 undocumented)
  <span class="kw">Methods</span>:    0 (0 undocumented)

  <span class="kw">Total</span>:      3 (0 undocumented)
  <span class="kw">100.00%</span> documented

  <span class="kw">Elapsed</span>: 0.0s
$ <span class="kw">firefox</span> doc/index.html</code></pre></div>
<p>RDoc can tell us if we’re missing any documentation. Awesome. I always open up the HTML docs in my browser to see if they look okay.</p>
<h2 id="push-to-github">Push to GitHub</h2>
<p>Rubyists assume you use GitHub. It was originally created by some Rubyists, lots of early users were Rubyists. If you like a different code hosting platform, sorry. :/. I can only think of one gem that I use that doesn’t use GitHub.</p>
<p>Make a new GitHub repository with the same name as your gem, and then use <code>git</code> to push it up:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> add .
$ <span class="kw">git</span> commit -m <span class="st">&quot;Initial commit.&quot;</span>
$ <span class="kw">git</span> remote add origin git@github.com:steveklabnik/how_i_start.git
$ <span class="kw">git</span> push -u origin master</code></pre></div>
<p>Refresh at will. Neat!</p>
<p>Oh no! It looks like we didn’t write a good README. Let’s fix that. Here’s my diff:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> diff --cached
<span class="kw">diff</span> --git a/README.md b/README.md
<span class="kw">index</span> 9c664a3..731d6f7 100644
<span class="kw">---</span> a/README.md
<span class="kw">+++</span> b/README.md
<span class="kw">@@</span> -1,24 +1,22 @@
 <span class="co"># HowIStart</span>

<span class="kw">-TODO</span>: Write a gem description
<span class="kw">+HowIStart</span> is a very simple example gem to show you how I begin a Ruby project.

 <span class="co">## Installation</span>

<span class="kw">-Add</span> this line to your application<span class="st">&#39;s Gemfile:</span>
<span class="st">-</span>
<span class="st">-    gem &#39;</span>how_i_start<span class="st">&#39;</span>
<span class="st">-</span>
<span class="st">-And then execute:</span>
<span class="st">-</span>
<span class="st">-    $ bundle</span>
<span class="st">-</span>
<span class="st">-Or install it yourself as:</span>
<span class="st">+Install it yourself as:</span>

<span class="st">     $ gem install how_i_start</span>

<span class="st"> ## Usage</span>

<span class="st">-TODO: Write usage instructions here</span>
<span class="st">+Just run the executable:</span>
<span class="st">+</span>
<span class="st">+```</span>
<span class="st">+$ how_i_start</span>
<span class="st">+```</span>
<span class="st">+</span>
<span class="st">+And it will point you at the article.</span>

<span class="st"> ## Contributing</span></code></pre></div>
<p>Let’s commit that too:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> add README.md
$ <span class="kw">git</span> commit -m <span class="st">&quot;Fix up README.&quot;</span>
$ <span class="kw">git</span> push origin master</code></pre></div>
<p>Much better.</p>
<h2 id="push-to-rubygems">Push to RubyGems</h2>
<p>Let’s release this sucker!</p>
<p>First thing to do is to make sure that packaging it all up works. Let’s try:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">bundle</span> exec rake install
<span class="kw">how_i_start</span> 0.0.1 built to pkg/how_i_start-0.0.1.gem.
<span class="kw">how_i_start</span> (0.0.1) <span class="kw">installed.</span>
<span class="kw">steve@computer</span>:~/src/how_i_start$ how_i_start
<span class="kw">http</span>://howistart.org/posts/ruby/1</code></pre></div>
<p>Great! It successfully built the package, and our ‘binary’ works. Since this is a feature-complete version of the gem, we should bump the version to 1.0.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cat</span> lib/how_i_start/version.rb
<span class="kw">module</span> HowIStart

  <span class="co"># The current version of HowIStart.</span>
  <span class="kw">VERSION</span> = <span class="st">&quot;1.0.0&quot;</span>
<span class="kw">end</span>
$ <span class="kw">git</span> add lib/how_i_start/version.rb
$ <span class="kw">git</span> commit -m <span class="st">&quot;Bump version for 1.0 release&quot;</span>
[<span class="kw">master</span> 499c1c0] Bump version for 1.0 release
 <span class="kw">1</span> file changed, 1 insertion(+), <span class="kw">1</span> deletion(-)
$ <span class="kw">bundle</span> exec rake release
<span class="kw">how_i_start</span> 1.0.0 built to pkg/how_i_start-1.0.0.gem.
<span class="kw">Tagged</span> v1.0.0.
<span class="kw">Pushed</span> git commits and tags.
<span class="kw">Pushed</span> how_i_start 1.0.0 to rubygems.org.</code></pre></div>
<p>We just increase the version, commit it, and then run the Rake task that Bundler gave us. Since this isn’t my first time, it uses my saved credentials, but it might ask you for yours.</p>
<h2 id="tweet-about-it">Tweet about it</h2>
<p>If a gem gets released in a forest, and nobody is there to hear it, it certainly… yeah okay, that didn’t really work out. My point is, if you make a gem, and nobody knows about it, then it’s not very useful. Promotion is hard, but there is an answer: Twitter. <a href="https://twitter.com/peterc/status/475292959337103360">Even people that hate Twitter post stuff to Twitter</a>. It’s just the way of the Ruby world.</p>
<p>So do this:</p>
<blockquote class="twitter-tweet" lang="en">
<p>
I've just released “How I Start” 1.0! 

$ gem install how_i_start

<a href="https://t.co/R5m6ODxOZB">https://t.co/R5m6ODxOZB</a>
</p>
— Brooklyn.rs (<span class="citation">@steveklabnik</span>) <a href="https://twitter.com/steveklabnik/statuses/479671271832444928">June 19, 2014</a>
</blockquote>
<p>It’s worth following a bunch of Ruby people on Twitter. Figure out who makes the gems you use, and follow them. Getting to know people is cool, but even if you hate that, you can <a href="https://twitter.com/steveklabnik/status/479671346314883073">find out about things before they really happen</a>.</p>
<p>Don’t be shy, though. You’ve made something useful! We all want to use it!</p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s it! None of it is particularly difficult by itself, but there is a bunch when you put it all together. Please take these ten simple steps and write some great gems! I know you have it in you!</p>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/ruby/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>Steve Klabnik</h3>
    <h4>Ruby</h4>
    <h3><small> Rails Core Committer & Author of Rails 4 in Action</small></h3>
    <p><a href='https://twitter.com/steveklabnik/'>Steve</a> is a long time <a href='http://rubyonrails.org/'>Rails</a> core comitter and author of <a href='http://www.designinghypermediaapis.com/'>Designing with Hypermedia API's</a>, <a href='http://www.rustforrubyists.com/'>Rust for Rubyists</a>, and <a href='http://www.manning.com/bigg2/'>Rails 4 in Action</a>. Currently Steve is providing his documentation expertise to <a href='http://mozilla.org'>Mozilla</a> to improve and expand the <a href='http://www.rust-lang.org/'>Rust</a> documentation.</p>
    <a class="btn btn-primary" href="/posts/ruby/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Elixir</title>
    <link href="http://www.howistart.org/posts/elixir/1/index.html" />
    <id>http://www.howistart.org/posts/elixir/1/index.html</id>
    <published>2014-07-10T00:00:00Z</published>
    <updated>2014-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="row">
  <div class="col-lg-12">
    <h1 class="page-header">
      Elixir <small>with José Valim</small>
    </h1>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <h1 id="portal">Portal</h1>
<p><a href="http://en.wikipedia.org/wiki/Portal_(video_game)">Portal is a game</a> that consists of a series of puzzles that must be solved by teleporting the player’s character and simple objects from one place to another.</p>
<p>In order to teleport, the player uses the Portal gun to shoot doors onto flat planes, like a floor or a wall. Entering one of those doors teleports you to the other:</p>
<div class="figure">
<img src="/posts/elixir/1/images/portal-drop.jpeg" />

</div>
<p>In this guide we will use the <a href="http://elixir-lang.org/getting-started/introduction.html">Elixir programming language</a> to build portals by shooting doors of different colors and transferring data between them! We will even learn how we can distribute doors across different machines in our network:</p>
<div class="figure">
<img src="/posts/elixir/1/images/portal-list.jpeg" />

</div>
<p>Here is what we will learn:</p>
<ul>
<li>Elixir’s interactive shell</li>
<li>Creating new Elixir projects</li>
<li>Pattern matching</li>
<li>Using agents for state</li>
<li>Using structs for custom data structures</li>
<li>Extending the language with protocols</li>
<li>Supervision trees and applications</li>
<li>Distributed Elixir nodes</li>
</ul>
<p>Let’s get started!</p>
<h2 id="installation">Installation</h2>
<p>Elixir’s website explains how to get Elixir up and running. Just <a href="http://elixir-lang.org/install.html">follow the steps described in the Installing Elixir page</a>.</p>
<p>Elixir developers spend a lot of time in their Operating System terminals; once installation is complete, you will have some new executables available. One of them is <code>iex</code>. Just type <code>iex</code> in your terminal (or <code>iex.bat</code> if you are on Windows) to get it up and running:</p>
<pre><code>$ iex
Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)</code></pre>
<p><code>iex</code> stands for Interactive Elixir. In <code>iex</code> you can type any expression and you will get a result back:</p>
<pre class="iex"><code>iex&gt; 40 + 2
42
iex&gt; &quot;hello&quot; &lt;&gt; &quot; world&quot;
&quot;hello world&quot;
iex&gt; # This is a code comment
nil</code></pre>
<p>Besides numbers and strings above, we also frequently use the following data types:</p>
<pre class="iex"><code>iex&gt; :atom           # An identifier (known as Symbols in other languages)
:atom
iex&gt; [1, 2, &quot;three&quot;] # Lists (typically hold a dynamic amount of items)
[1, 2, &quot;three&quot;]
iex&gt; {:ok, &quot;value&quot;}  # Tuples (typically hold a fixed amount of items)
{:ok, &quot;value&quot;}</code></pre>
<p>Once we finish our portal application, we expect to be able to type the following code inside <code>iex</code>:</p>
<pre class="iex"><code># Shoot two doors: one orange, another blue
iex(1)&gt; Portal.shoot(:orange)
{:ok, #PID&lt;0.72.0&gt;}
iex(2)&gt; Portal.shoot(:blue)
{:ok, #PID&lt;0.74.0&gt;}

# Start transferring the list [1, 2, 3, 4] from orange to blue
iex(3)&gt; portal = Portal.transfer(:orange, :blue, [1, 2, 3, 4])
#Portal&lt;
       :orange &lt;=&gt; :blue
  [1, 2, 3, 4] &lt;=&gt; []
&gt;

# Now every time we call push_right, data goes to blue
iex(4)&gt; Portal.push_right(portal)
#Portal&lt;
    :orange &lt;=&gt; :blue
  [1, 2, 3] &lt;=&gt; [4]
&gt;</code></pre>
<p>It looks sweet, doesn’t it?</p>
<h2 id="our-first-project">Our first project</h2>
<p>Elixir ships with a tool called Mix. Mix is what Elixir developers use to create, compile and test new projects. Let’s create a project named <code>portal</code> with <code>mix</code>. When creating the project, we will also pass the <code>--sup</code> option that will create a supervision tree. We will explore what the supervision tree does in later sections. For now, just type:</p>
<pre><code>$ mix new portal --sup</code></pre>
<p>The command above created a new directory named <code>portal</code> with some files in it. Change your working directory into <code>portal</code> and run <code>mix test</code> to run the project tests:</p>
<pre><code>$ cd portal
$ mix test</code></pre>
<p>Excellent, we already have a working project with a test suite set up.</p>
<p>Let’s explore the generated project using a text editor. I personally don’t pay much attention to text editors, I mostly use a stock <a href="http://www.sublimetext.com/3">Sublime Text 3</a> but you can find <a href="http://elixir-lang.org">Elixir support for different text editors on the website</a> under the “Code Editor Support” section.</p>
<p>With your editor open, explore the following directories:</p>
<ul>
<li><code>_build</code> - where Mix stores compilation artifacts</li>
<li><code>config</code> - where we configure our project and its dependencies</li>
<li><code>lib</code> - where we put our code</li>
<li><code>mix.exs</code> - where we define our project name, version and dependencies</li>
<li><code>test</code> - where we define our tests</li>
</ul>
<p>We can now start an <code>iex</code> session inside our project too. Just run:</p>
<pre><code>$ iex -S mix</code></pre>
<h2 id="pattern-matching">Pattern matching</h2>
<p>Before we implement our application, we need to talk about pattern matching. The <code>=</code> operator in Elixir is a bit different from the ones we see in other languages:</p>
<pre class="iex"><code>iex&gt; x = 1
1
iex&gt; x
1</code></pre>
<p>So far so good, what happens if we invert the operands?</p>
<pre class="iex"><code>iex&gt; 1 = x
1</code></pre>
<p>It worked! That’s because Elixir tries to match the right side against the left side. Since both are set to <code>1</code>, it works. Let’s try something else:</p>
<pre class="iex"><code>iex&gt; 2 = x
** (MatchError) no match of right hand side value: 1</code></pre>
<p>Now the sides did not match, so we got an error. We use pattern matching in Elixir to match data structures too. For example, we can use <code>[head|tail]</code> to extract the head (the first element) and tail (the remaining ones) from a list:</p>
<pre class="iex"><code>iex&gt; [head|tail] = [1, 2, 3]
[1, 2, 3]
iex&gt; head
1
iex&gt; tail
[2, 3]</code></pre>
<p>Matching an empty list against <code>[head|tail]</code> causes a match error:</p>
<pre class="iex"><code>iex&gt; [head|tail] = []
** (MatchError) no match of right hand side value: []</code></pre>
<p>Finally, we can also use the <code>[head|tail]</code> expression to add elements to the head of a list:</p>
<pre class="iex"><code>iex&gt; list = [1, 2, 3]
[1, 2, 3]
iex&gt; [0|list]
[0, 1, 2, 3]</code></pre>
<h2 id="modeling-portal-doors-with-agents">Modeling portal doors with Agents</h2>
<p>Elixir data structures are immutable. In the examples above, we never mutated the list. We can break a list apart or add new elements to the head, but the original list is never modified.</p>
<p>That said, when we need to keep some sort of state, like the data transfering through a portal, we must use an abstraction that stores this state for us. One such abstraction in Elixir is called an agent. Before we use agents, we need to briefly talk about anonymous functions:</p>
<pre class="iex"><code>iex&gt; adder = fn a, b -&gt; a + b end
#Function&lt;12.90072148/2 in :erl_eval.expr/5&gt;
iex&gt; adder.(1, 2)
3</code></pre>
<p>An anonymous function is delimited by the words <code>fn</code> and <code>end</code> and an arrow <code>-&gt;</code> is used to separate the arguments from the anonymous function body. We use anonymous functions to initialize, get and update the agent state:</p>
<pre class="iex"><code>iex&gt; {:ok, agent} = Agent.start_link(fn -&gt; [] end)
{:ok, #PID&lt;0.61.0&gt;}
iex&gt; Agent.get(agent, fn list -&gt; list end)
[]
iex&gt; Agent.update(agent, fn list -&gt; [0|list] end)
:ok
iex&gt; Agent.get(agent, fn list -&gt; list end)
[0]</code></pre>
<blockquote>
<p>Note: you will likely get different <code>#PID&lt;...&gt;</code> values than the ones we show throughout the tutorial. Don’t worry, this is expected!</p>
</blockquote>
<p>In the example above, we created a new agent, passing a function that returns the initial state of an empty list. The agent returns <code>{:ok, #PID&lt;0.61.0&gt;}</code>.</p>
<p>Curly brackets in Elixir specify a tuple; the tuple above contains the atom <code>:ok</code> and a process identifier (PID). We use atoms in Elixir as tags. In the example above, we are tagging the agent as successfully started.</p>
<p>The <code>#PID&lt;...&gt;</code> is a process identifier for the agent. When we say processes in Elixir, we don’t mean Operating System processes, but rather Elixir Processes, which are lightweight and isolated, allowing us to run hundreds of thousands of them on the same machine.</p>
<p>We store the agent’s PID in the <code>agent</code> variable, which allows us to send messages to get and update the agent’s state.</p>
<p>We will use agents to implement our portal doors. Create a new file named <code>lib/portal/door.ex</code> with the following contents:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="kw">defmodule</span> <span class="dt">Portal</span>.<span class="dt">Door</span> <span class="kw">do</span>
  <span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">  Starts a door with the given `color`.</span>

<span class="co">  The color is given as a name so we can identify</span>
<span class="co">  the door by color name instead of using a PID.</span>
<span class="co">  </span><span class="ot">&quot;&quot;&quot;</span>
  <span class="kw">def</span> start_link(color) <span class="kw">do</span>
    <span class="dt">Agent</span>.start_link(<span class="kw">fn</span> -&gt; [] <span class="kw">end</span>, <span class="st">name:</span> color)
  <span class="kw">end</span>

  <span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">  Get the data currently in the `door`.</span>
<span class="co">  </span><span class="ot">&quot;&quot;&quot;</span>
  <span class="kw">def</span> get(door) <span class="kw">do</span>
    <span class="dt">Agent</span>.get(door, <span class="kw">fn</span> list -&gt; list <span class="kw">end</span>)
  <span class="kw">end</span>

  <span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">  Pushes `value` into the door.</span>
<span class="co">  </span><span class="ot">&quot;&quot;&quot;</span>
  <span class="kw">def</span> push(door, value) <span class="kw">do</span>
    <span class="dt">Agent</span>.update(door, <span class="kw">fn</span> list -&gt; [value|list] <span class="kw">end</span>)
  <span class="kw">end</span>

  <span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">  Pops a value from the `door`.</span>

<span class="co">  Returns `{:ok, value}` if there is a value</span>
<span class="co">  or `:error` if the hole is currently empty.</span>
<span class="co">  </span><span class="ot">&quot;&quot;&quot;</span>
  <span class="kw">def</span> pop(door) <span class="kw">do</span>
    <span class="dt">Agent</span>.get_and_update(door, <span class="kw">fn</span>
      []    -&gt; {<span class="st">:error</span>, []}
      [h|t] -&gt; {{<span class="st">:ok</span>, h}, t}
    <span class="kw">end</span>)
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<p>In Elixir we define code inside modules, which are basically a group of functions. We have defined four functions above, all properly documented.</p>
<p>Let’s give our implementation a try. Start a new shell with <code>iex -S mix</code>. When starting the shell, our new file will be automatically compiled, so we can use it directly:</p>
<pre class="iex"><code>iex&gt; Portal.Door.start_link(:pink)
{:ok, #PID&lt;0.68.0&gt;}
iex&gt; Portal.Door.get(:pink)
[]
iex&gt; Portal.Door.push(:pink, 1)
:ok
iex&gt; Portal.Door.get(:pink)
[1]
iex&gt; Portal.Door.pop(:pink)
{:ok, 1}
iex&gt; Portal.Door.get(:pink)
[]
iex&gt; Portal.Door.pop(:pink)
:error</code></pre>
<p>Excellent!</p>
<p>One interesting aspect of Elixir is that documentation is treated as a first-class citizen. Since we have documented our <code>Portal.Door</code> code, we can now easily access its documentation from the terminal. Try it out:</p>
<pre class="iex"><code>iex&gt; h Portal.Door.start_link</code></pre>
<h2 id="portal-transfers">Portal transfers</h2>
<p>Our portal doors are ready so it is time to start working on portal transfers! In order to store the portal data, we are going to create a struct named <code>Portal</code>. Let’s give structs a try in IEx before moving forward:</p>
<pre class="iex"><code>iex&gt; defmodule User do
...&gt;   defstruct [:name, :age]
...&gt; end
iex&gt; user = %User{name: &quot;john doe&quot;, age: 27}
%User{name: &quot;john doe&quot;, age: 27}
iex&gt; user.name
&quot;john doe&quot;
iex&gt; %User{age: age} = user
%User{name: &quot;john doe&quot;, age: 27}
iex&gt; age
27</code></pre>
<p>A struct is defined inside a module and takes the same name as the module. After the struct is defined, we can use the <code>%User{...}</code> syntax to define new structs or match on them.</p>
<p>Let’s open up <code>lib/portal.ex</code> and add some code to the <code>Portal</code> module. Note the current <code>Portal</code> module already has a function named <code>start/2</code>. Do not remove this function, we will talk about it in the next sections, for now just add the new contents below inside the <code>Portal</code> module:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="kw">defstruct</span> [<span class="st">:left</span>, <span class="st">:right</span>]

<span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">Starts transfering `data` from `left` to `right`.</span>
<span class="ot">&quot;&quot;&quot;</span>
<span class="kw">def</span> transfer(left, right, data) <span class="kw">do</span>
  <span class="co"># First add all data to the portal on the left</span>
  <span class="kw">for</span> item &lt;- data <span class="kw">do</span>
    <span class="dt">Portal</span>.<span class="dt">Door</span>.push(left, item)
  <span class="kw">end</span>

  <span class="co"># Returns a portal struct we will use next</span>
  %<span class="dt">Portal</span>{<span class="st">left:</span> left, <span class="st">right:</span> right}
<span class="kw">end</span>

<span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">Pushes data to the right in the given `portal`.</span>
<span class="ot">&quot;&quot;&quot;</span>
<span class="kw">def</span> push_right(portal) <span class="kw">do</span>
  <span class="co"># See if we can pop data from left. If so, push the</span>
  <span class="co"># popped data to the right. Otherwise, do nothing.</span>
  <span class="kw">case</span> <span class="dt">Portal</span>.<span class="dt">Door</span>.pop(portal.left) <span class="kw">do</span>
    <span class="st">:error</span>   -&gt; <span class="st">:ok</span>
    {<span class="st">:ok</span>, h} -&gt; <span class="dt">Portal</span>.<span class="dt">Door</span>.push(portal.right, h)
  <span class="kw">end</span>

  <span class="co"># Let&#39;s return the portal itself</span>
  portal
<span class="kw">end</span></code></pre></div>
<p>We have defined our <code>Portal</code> struct and a <code>Portal.transfer/3</code> function (the <code>/3</code> indicates the function expects three arguments). Let’s give this transfer a try. Start another shell with <code>iex -S mix</code> so our changes are compiled and type:</p>
<pre class="iex"><code># Start doors
iex&gt; Portal.Door.start_link(:orange)
{:ok, #PID&lt;0.59.0&gt;}
iex&gt; Portal.Door.start_link(:blue)
{:ok, #PID&lt;0.61.0&gt;}

# Start transfer
iex&gt; portal = Portal.transfer(:orange, :blue, [1, 2, 3])
%Portal{left: :orange, right: :blue}

# Check there is data on the orange/left door
iex&gt; Portal.Door.get(:orange)
[3, 2, 1]

# Push right once
iex&gt; Portal.push_right(portal)
%Portal{left: :orange, right: :blue}

# See changes
iex&gt; Portal.Door.get(:orange)
[2, 1]
iex&gt; Portal.Door.get(:blue)
[3]</code></pre>
<p>Our portal transfer seems to work as expected. Note that the data is in reverse order in the left/orange door in the example above. That is expected because we want the end of the list (in this case the number 3) to be the first data pushed into the right/blue door.</p>
<p>One difference in the snippet above, compared to the one we saw at the beginning of this tutorial, is that our portal is currently being printed as a struct: <code>%Portal{left: :orange, right: :blue}</code>. It would be nice if we actually had a printed representation of the portal transfer, allowing us to see the portal process as we push data.</p>
<p>That’s what we will do next.</p>
<h2 id="inspecting-portals-with-protocols">Inspecting portals with Protocols</h2>
<p>We already know that data can be printed in <code>iex</code>. After all, when we type <code>1 + 2</code> in <code>iex</code>, we do get <code>3</code> back. However, can we customize how our own types are printed?</p>
<p>Yes, we can! Elixir provides protocols, which allows behaviour to be extended and implemented for any data type, like our <code>Portal</code> struct, at any time.</p>
<p>For example, every time something is printed in our <code>iex</code> terminal, Elixir uses the <code>Inspect</code> protocol. Since protocols can be extended at any time, by any data type, it means we can implement it for <code>Portal</code> too. Open up <code>lib/portal.ex</code> and, at the end of the file, outside the <code>Portal</code> module, add the following:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="kw">defimpl</span> <span class="dt">Inspect</span>, <span class="kw">for</span>: <span class="dt">Portal</span> <span class="kw">do</span>
  <span class="kw">def</span> inspect(%<span class="dt">Portal</span>{<span class="st">left:</span> left, <span class="st">right:</span> right}, _) <span class="kw">do</span>
    left_door  = inspect(left)
    right_door = inspect(right)

    left_data  = inspect(<span class="dt">Enum</span>.reverse(<span class="dt">Portal</span>.<span class="dt">Door</span>.get(left)))
    right_data = inspect(<span class="dt">Portal</span>.<span class="dt">Door</span>.get(right))

    max = max(<span class="dt">String</span>.length(left_door), <span class="dt">String</span>.length(left_data))

    <span class="st">&quot;&quot;&quot;</span>
<span class="st">    #Portal&lt;</span>
<span class="st">      #{String.rjust(left_door, max)} &lt;=&gt; #{right_door}</span>
<span class="st">      #{String.rjust(left_data, max)} &lt;=&gt; #{right_data}</span>
<span class="st">    &gt;</span>
<span class="st">    &quot;&quot;&quot;</span>
  <span class="kw">end</span>
<span class="kw">end</span></code></pre></div>
<p>In the snippet above, we have implemented the <code>Inspect</code> protocol for the <code>Portal</code> struct. The protocol expects just one function named <code>inspect</code> to be implemented. The function expects two arguments, the first is the <code>Portal</code> struct itself and the second is a set of options, which we don’t care about for now.</p>
<p>Then we call <code>inspect</code> multiple times, to get a text representation of both <code>left</code> and <code>right</code> doors, as well as to get a representation of the data inside the doors. Finally, we return a string containing the portal presentation properly aligned.</p>
<p>Start another <code>iex</code> session with <code>iex -S mix</code> to see our new representation being used:</p>
<pre class="iex"><code>iex&gt; Portal.Door.start_link(:orange)
{:ok, #PID&lt;0.59.0&gt;}
iex&gt; Portal.Door.start_link(:blue)
{:ok, #PID&lt;0.61.0&gt;}
iex&gt; portal = Portal.transfer(:orange, :blue, [1, 2, 3])
#Portal&lt;
    :orange &lt;=&gt; :blue
  [1, 2, 3] &lt;=&gt; []
&gt;</code></pre>
<h2 id="shooting-supervised-doors">Shooting supervised doors</h2>
<p>We often hear that the Erlang VM, the virtual machine Elixir runs on, alongside the Erlang ecosystem are great for building fault-tolerant applications. One of the reasons for such are the so-called supervision trees.</p>
<p>Our code so far is not supervised. Let’s see what happens when we explicitly shutdown one of the door agents:</p>
<pre class="iex"><code># Start doors and transfer
iex&gt; Portal.Door.start_link(:orange)
{:ok, #PID&lt;0.59.0&gt;}
iex&gt; Portal.Door.start_link(:blue)
{:ok, #PID&lt;0.61.0&gt;}
iex&gt; portal = Portal.transfer(:orange, :blue, [1, 2, 3])

# First unlink the door from the shell to avoid the shell from crashing
iex&gt; Process.unlink(Process.whereis(:blue))
true
# Send a shutdown exit signal to the blue agent
iex&gt; Process.exit(Process.whereis(:blue), :shutdown)
true

# Try to move data
iex&gt; Portal.push_right(portal)
** (exit) exited in: :gen_server.call(:blue, ..., 5000)
    ** (EXIT) no process
    (stdlib) gen_server.erl:190: :gen_server.call/3
    (portal) lib/portal.ex:25: Portal.push_right/1</code></pre>
<p>We got an exit error because there is no <code>:blue</code> door. You can see there is an <code>** (EXIT) no process</code> message following our function call. To fix the situation we are going to setup a supervisor that will be responsible for restarting a portal door whenever it crashes.</p>
<p>Remember when we passed the <code>--sup</code> flag when creating our <code>portal</code> project? We passed that flag because supervisors typically run inside supervision trees and supervision trees are usually started as part of application. All the <code>--sup</code> flag does is to create a supervised structure by default which we can see in our <code>Portal</code> module:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="kw">defmodule</span> <span class="dt">Portal</span> <span class="kw">do</span>
  <span class="kw">use</span> <span class="dt">Application</span>

  <span class="co"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="co"># for more information on OTP Applications</span>
  <span class="kw">def</span> start(_type, _args) <span class="kw">do</span>
    <span class="kw">import</span> <span class="dt">Supervisor</span>.<span class="dt">Spec</span>, <span class="st">warn:</span> <span class="dv">false</span>

    children = [
      <span class="co"># Define workers and child supervisors to be supervised</span>
      <span class="co"># worker(Portal.Worker, [arg1, arg2, arg3])</span>
    ]

    <span class="co"># See http://elixir-lang.org/docs/stable/elixir/Supervisor.html</span>
    <span class="co"># for other strategies and supported options</span>
    opts = [<span class="st">strategy:</span> <span class="st">:one_for_one</span>, <span class="st">name:</span> <span class="dt">Portal</span>.<span class="dt">Supervisor</span>]
    <span class="dt">Supervisor</span>.start_link(children, opts)
  <span class="kw">end</span>

  <span class="co"># ... functions we have added ...</span>
<span class="kw">end</span></code></pre></div>
<p>The code above makes the <code>Portal</code> module an application callback. The application callback must provide a function named <code>start/2</code>, which we see above, and this function must start a supervisor representing the root of our supervision tree. Currently our supervisor has no children and that is exactly what we will change next.</p>
<p>Replace the <code>start/2</code> function above by:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="kw">def</span> start(_type, _args) <span class="kw">do</span>
  <span class="kw">import</span> <span class="dt">Supervisor</span>.<span class="dt">Spec</span>, <span class="st">warn:</span> <span class="dv">false</span>

  children = [
    worker(<span class="dt">Portal</span>.<span class="dt">Door</span>, [])
  ]

  opts = [<span class="st">strategy:</span> <span class="st">:simple_one_for_one</span>, <span class="st">name:</span> <span class="dt">Portal</span>.<span class="dt">Supervisor</span>]
  <span class="dt">Supervisor</span>.start_link(children, opts)
<span class="kw">end</span></code></pre></div>
<p>We have done two changes:</p>
<ul>
<li><p>We have added a child specification to the supervisor, of type <code>worker</code>, and the child is represented by the module <code>Portal.Door</code>. We pass no arguments to the worker, just an empty list <code>[]</code>, as the door color will be specified later on.</p></li>
<li><p>We have changed the strategy from <code>:one_for_one</code> to <code>:simple_one_for_one</code>. Supervisors provide different strategies and <code>:simple_one_for_one</code> is useful when we want to dynamically create children, often with different arguments. This is exactly the case for our portal doors, where we want to spawn multiple doors with different colors.</p></li>
</ul>
<p>The last step is to add a function named <code>shoot/1</code> to the <code>Portal</code> module that receives a color and spawns a new door as part of the supervision tree:</p>
<div class="sourceCode"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span class="ot">@doc &quot;&quot;&quot;</span>
<span class="co">Shoots a new door with the given `color`.</span>
<span class="ot">&quot;&quot;&quot;</span>
<span class="kw">def</span> shoot(color) <span class="kw">do</span>
  <span class="dt">Supervisor</span>.start_child(<span class="dt">Portal</span>.<span class="dt">Supervisor</span>, [color])
<span class="kw">end</span></code></pre></div>
<p>The function above reaches the supervisor named <code>Portal.Supervisor</code> and asks for a new child to be started. <code>Portal.Supervisor</code> is the name of the supervisor we have defined in <code>start/2</code> and the child is going to be a <code>Portal.Door</code> which was specified as a worker of that supervisor.</p>
<p>Internally, to start the child, the supervisor will invoke <code>Portal.Door.start_link(color)</code>, where color is the value passed on the <code>start_child/2</code> call above. If we had invoked <code>Supervisor.start_child(Portal.Supervisor, [foo, bar, baz])</code>, the supervisor would have attempted to start a child with <code>Portal.Door.start_link(foo, bar, baz)</code>.</p>
<p>Let’s give our shooting function a try. Start a new <code>iex -S mix</code> session and:</p>
<pre class="iex"><code>iex&gt; Portal.shoot(:orange)
{:ok, #PID&lt;0.72.0&gt;}
iex&gt; Portal.shoot(:blue)
{:ok, #PID&lt;0.74.0&gt;}
iex&gt; portal = Portal.transfer(:orange, :blue, [1, 2, 3, 4])
#Portal&lt;
       :orange &lt;=&gt; :blue
  [1, 2, 3, 4] &lt;=&gt; []
&gt;

iex&gt; Portal.push_right(portal)
#Portal&lt;
    :orange &lt;=&gt; :blue
  [1, 2, 3] &lt;=&gt; [4]
&gt;</code></pre>
<p>And what happens if we stop the <code>:blue</code> process now?</p>
<pre class="iex"><code>iex&gt; Process.unlink(Process.whereis(:blue))
true
iex&gt; Process.exit(Process.whereis(:blue), :shutdown)
true
iex&gt; Portal.push_right(portal)
#Portal&lt;
  :orange &lt;=&gt; :blue
   [1, 2] &lt;=&gt; [3]
&gt;</code></pre>
<p>Notice this time the following <code>push_right/1</code> operation worked because the supervisor automatically started another <code>:blue</code> portal. Unfortunately the data that was in the blue door before the crash was lost but our system did recover from the crash.</p>
<p>In practice there are different supervision strategies to choose from as well as mechanisms to persist data in case something goes wrong, allowing you to choose the best option for your applications.</p>
<p>Outstanding!</p>
<h2 id="distributed-transfers">Distributed transfers</h2>
<p>With our portals working, we are ready to give distributed transfers a try. This can be extra awesome if you launch the code on two different machines on the same network. However, if you don’t have another machine handy, it will work just fine.</p>
<p>We can start an <code>iex</code> session as node inside of a network by passing the <code>--sname</code> option. Let’s give it a try:</p>
<pre><code>$ iex --sname room1 --cookie secret -S mix
Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)
iex(room1@jv)1&gt;</code></pre>
<p>You can see this <code>iex</code> terminal is different from the previous ones. Now, we can see <code>room1@jv</code> in the prompt. <code>room1</code> is the name we gave to the node and <code>jv</code> is the network name of the computer the node is started. In my case, my machine is named <code>jv</code>, but you will get a different result. From now on, we will use <code>room1@COMPUTER-NAME</code> and <code>room2@COMPUTER-NAME</code> and you must replace <code>COMPUTER-NAME</code> by your respective computer names.</p>
<p>In the <code>iex</code> session named <code>room1</code>, let’s shoot a <code>:blue</code> door:</p>
<pre class="iex"><code>iex(room1@COMPUTER-NAME)&gt; Portal.shoot(:blue)
{:ok, #PID&lt;0.65.0&gt;}</code></pre>
<p>Let’s start another <code>iex</code> session named <code>room2</code>:</p>
<pre><code>$ iex --sname room2 --cookie secret -S mix</code></pre>
<blockquote>
<p>Note: the cookie has to be the same on both computers in order for the two Elixir nodes to be able to communicate with each other.</p>
</blockquote>
<p>The Agent API out of the box allows us to do cross-node requests. All we need to do is to pass the node name where the named agent we want to reach is running when invoking the <code>Portal.Door</code> functions. For example, let’s reach the blue door from <code>room2</code>:</p>
<pre class="iex"><code>iex(room2@COMPUTER-NAME)&gt; Portal.Door.get({:blue, :&quot;room1@COMPUTER-NAME&quot;})
[]</code></pre>
<p>This means we can have distributed transfer by simply using node names. Still on <code>room2</code>, let’s try:</p>
<pre class="iex"><code>iex(room2@COMPUTER-NAME)&gt; Portal.shoot(:orange)
{:ok, #PID&lt;0.71.0&gt;}
iex(room2@COMPUTER-NAME)&gt; orange = {:orange, :&quot;room2@COMPUTER-NAME&quot;}
{:orange, :&quot;room2@COMPUTER-NAME&quot;}
iex(room2@COMPUTER-NAME)&gt; blue = {:blue, :&quot;room1@COMPUTER-NAME&quot;}
{:blue, :&quot;room1@COMPUTER-NAME&quot;}
iex(room2@COMPUTER-NAME)&gt; portal = Portal.transfer(orange, blue, [1, 2, 3, 4])
#Portal&lt;
  {:orange, :room2@COMPUTER-NAME} &lt;=&gt; {:blue, :room1@COMPUTER-NAME}
          [1, 2, 3, 4] &lt;=&gt; []
&gt;
iex(room2@COMPUTER-NAME)&gt; Portal.push_right(portal)
#Portal&lt;
  {:orange, :room2@COMPUTER-NAME} &lt;=&gt; {:blue, :room1@COMPUTER-NAME}
             [1, 2, 3] &lt;=&gt; [4]
&gt;
</code></pre>
<p>Awesome. We have distributed transfers working in our code base without changing a single line of code!</p>
<p>Even though <code>room2</code> is coordinating the transfer, we can still observe the transfer from <code>room1</code>:</p>
<pre class="iex"><code>iex(room1@COMPUTER-NAME)&gt; orange = {:orange, :&quot;room2@COMPUTER-NAME&quot;}
{:orange, :&quot;room2@COMPUTER-NAME&quot;}
iex(room1@COMPUTER-NAME)&gt; blue = {:blue, :&quot;room1@COMPUTER-NAME&quot;}
{:blue, :&quot;room1@COMPUTER-NAME&quot;}
iex(room1@COMPUTER-NAME)&gt; Portal.Door.get(orange)
[3, 2, 1]
iex(room1@COMPUTER-NAME)&gt; Portal.Door.get(blue)
[4]</code></pre>
<p>Our distributed portal transfer works because the doors are just processes and accessing/pushing the data through doors is done by sending messages to those processes via the Agent API. We say sending a message in Elixir is location transparent: we can send messages to any PID regardless if it is in the same node as the sender or in different nodes of the same network.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>So we have reached the end of this guide on how to get started with Elixir! It was a fun ride and we quickly went from manually starting doors processes to shooting fault-tolerant doors for distributed portal transfers!</p>
<p>We challenge you to continue learning and exploring more of Elixir by taking your portal application to the next level:</p>
<ul>
<li><p>Add a <code>Portal.push_left/1</code> function that transfers the data in the other direction. How can you avoid the code duplication existing between the <code>push_left/1</code> and <code>push_right/1</code> functions?</p></li>
<li><p>Learn more about <a href="http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html">ExUnit</a>, Elixir’s testing framework, and write tests for the functionality we have built so far. Remember we already have a default structure laid out in the <code>test</code> directory.</p></li>
<li><p>Generate HTML documentation for your project with <a href="http://github.com/elixir-lang/ex_doc">ExDoc</a>.</p></li>
<li><p>Push your project to an external source, like <a href="https://github.com">Github</a>, and publish a package using the <a href="https://hex.pm">Hex package manager</a>.</p></li>
</ul>
<p>We welcome you to explore our <a href="http://elixir-lang.org">website</a> and read our Getting Started guide or many of the available resources to learn more about Elixir and our vibrant community.</p>
<p>Finally, huge thanks to <a href="http://twitter.com/augiedb">Augie De Blieck Jr.</a> for the drawings in this tutorial.</p>
<p>See you around!</p>
<link href="/css/github.css" rel="stylesheet">
<script src="/js/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
  </div>
</div>

<div class="row">
  <div class="col-lg-10 col-lg-offset-1">
    <hr />
  </div>
</div>


<div class="row">
  <div class="col-lg-6 col-lg-6">
    <div class="col-lg-5 col-lg-offset-5">
      <img class="img-responsive" src="/posts/elixir/1/images/headshot.png" alt="">
    </div>
  </div>

  <div class="col-lg-6 col-lg-6">
    <h3>José Valim</h3>
    <h4>Elixir</h4>
    <h3><small> Creator of Elixir</small></h3>
    <p><a href='https://twitter.com/josevalim'>José Valim</a> is creator of <a href='http://elixir-lang.org'>Elixir</a> and member of the <a href='http://rubyonrails.org'>Rails Core Team</a>. He is also co-founder of <a href='http://plataformatec.com.br'>Plataformatec</a>, a consultancy based in Brazil, and an active conference speaker.</p>
    <a class="btn btn-primary" href="/posts/elixir/1/index.html">Read <span class="glyphicon glyphicon-chevron-right"></span></a>
  </div>
</div>
]]></summary>
</entry>

</feed>
